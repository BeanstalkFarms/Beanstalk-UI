import React, { useState } from 'react';
import BigNumber from 'bignumber.js';
import { useSelector } from 'react-redux';
import { Box } from '@mui/material';
import { AppState } from 'state';
import { LUSD_BDV_TO_SEEDS } from 'constants/index';
import { poolForLP } from 'util/index';
import {
  BaseModule,
  ListTable,
  SiloAsset,
  siloStrings,
  TransitAsset,
} from 'components/Common';

export default function BeanlusdTable() {
  const {
    beanlusdReceivableBalance,
    beanlusdDeposits,
    beanlusdBDVDeposits,
    beanlusdReceivableCrates,
    beanlusdWithdrawals,
  } = useSelector<AppState, AppState['userBalance']>(
    (state) => state.userBalance
  );
  const season = useSelector<AppState, AppState['season']>(
    (state) => state.season.season
  );
  const prices = useSelector<AppState, AppState['prices']>(
    (state) => state.prices
  );
  const totalBalance = useSelector<AppState, AppState['totalBalance']>(
    (state) => state.totalBalance
  );

  const sectionTitlesInfoDescription = [
    siloStrings.lpDepositsTable,
    siloStrings.lpWithdrawalsTable,
  ];

  const [sectionInfo, setSectionInfo] = useState(0);
  const [page, setPage] = useState(0);

  const handleTabInfoChange = (event, newSectionInfo, newPageZero) => {
    setSectionInfo(newSectionInfo);
    setPage(newPageZero);
  };
  const handlePageChange = (event, newPage) => {
    setPage(newPage);
  };

  const poolForLPRatio = (amount: BigNumber) => {
    if (amount.isLessThanOrEqualTo(0)) return [new BigNumber(-1), new BigNumber(-1)];
    return poolForLP(
      amount,
      prices.beanCrv3Reserve,
      prices.crv3Reserve,
      totalBalance.totalCrv3
    );
  };

  /* "Info" section == the BaseModule shown below the Deposit &
    Deposit tabs. Used to show bean deposits. */
  const sectionTitlesInfo = [];
  const sectionsInfo = [];
  if (beanlusdDeposits !== undefined && Object.keys(beanlusdDeposits).length > 0) {
    sectionsInfo.push(
      <ListTable
        asset={SiloAsset.LP}
        crates={beanlusdDeposits}
        handleChange={handlePageChange}
        indexTitle="Season"
        isLP
        isLUSD
        page={page}
        poolForLPRatio={poolForLPRatio}
        season={season}
        bdvCrates={beanlusdBDVDeposits}
        bdvPerSeed={LUSD_BDV_TO_SEEDS}
      />
    );
    sectionTitlesInfo.push('BEAN:LUSD Deposits');
  }
  if (
    (beanlusdWithdrawals !== undefined && Object.keys(beanlusdWithdrawals).length > 0) ||
    beanlusdReceivableBalance.isGreaterThan(0)
  ) {
    sectionsInfo.push(
      <ListTable
        asset={TransitAsset.LP}
        crates={beanlusdWithdrawals}
        claimableBalance={beanlusdReceivableBalance}
        claimableCrates={beanlusdReceivableCrates}
        handleChange={handlePageChange}
        index={season}
        indexTitle="Seasons to Arrival"
        isLP
        isLUSD
        page={page}
        poolForLPRatio={poolForLPRatio}
        bdvPerSeed={LUSD_BDV_TO_SEEDS}
      />
    );
    sectionTitlesInfo.push('BEAN:LUSD Withdrawals');
  }

  // Show this section only if there are Deposits / Withdrawals.
  const showListTables = (sectionsInfo.length > 0) ? (
    <Box style={{ display: 'block', marginTop: '61px' }}>
      <BaseModule
        handleTabChange={handleTabInfoChange}
        section={sectionInfo}
        sectionTitles={sectionTitlesInfo}
        sectionTitlesDescription={sectionTitlesInfoDescription}
        showButton={false}
      >
        {sectionsInfo[sectionInfo]}
      </BaseModule>
    </Box>
  ) : null;

  return (
    <>{showListTables}</>
  );
}
