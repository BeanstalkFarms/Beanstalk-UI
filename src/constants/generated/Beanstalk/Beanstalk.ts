/* Autogenerated file. Do not edit manually. */
// @ts-nocheck
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export declare namespace LibClaim {
  export type ClaimStruct = {
    beanWithdrawals: BigNumberish[];
    lpWithdrawals: BigNumberish[];
    plots: BigNumberish[];
    claimEth: boolean;
    convertLP: boolean;
    minBeanAmount: BigNumberish;
    minEthAmount: BigNumberish;
    toWallet: boolean;
  };

  export type ClaimStructOutput = [
    number[],
    number[],
    BigNumber[],
    boolean,
    boolean,
    BigNumber,
    BigNumber,
    boolean
  ] & {
    beanWithdrawals: number[];
    lpWithdrawals: number[];
    plots: BigNumber[];
    claimEth: boolean;
    convertLP: boolean;
    minBeanAmount: BigNumber;
    minEthAmount: BigNumber;
    toWallet: boolean;
  };
}

export declare namespace LibMarket {
  export type AddLiquidityStruct = {
    beanAmount: BigNumberish;
    minBeanAmount: BigNumberish;
    minEthAmount: BigNumberish;
  };

  export type AddLiquidityStructOutput = [BigNumber, BigNumber, BigNumber] & {
    beanAmount: BigNumber;
    minBeanAmount: BigNumber;
    minEthAmount: BigNumber;
  };
}

export declare namespace IDiamondCut {
  export type FacetCutStruct = {
    facetAddress: string;
    action: BigNumberish;
    functionSelectors: BytesLike[];
  };

  export type FacetCutStructOutput = [string, number, string[]] & {
    facetAddress: string;
    action: number;
    functionSelectors: string[];
  };
}

export declare namespace IDiamondLoupe {
  export type FacetStruct = {
    facetAddress: string;
    functionSelectors: BytesLike[];
  };

  export type FacetStructOutput = [string, string[]] & {
    facetAddress: string;
    functionSelectors: string[];
  };
}

export declare namespace Storage {
  export type FundraiserStruct = {
    payee: string;
    token: string;
    total: BigNumberish;
    remaining: BigNumberish;
    start: BigNumberish;
  };

  export type FundraiserStructOutput = [
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    payee: string;
    token: string;
    total: BigNumber;
    remaining: BigNumber;
    start: BigNumber;
  };

  export type BipStruct = {
    proposer: string;
    start: BigNumberish;
    period: BigNumberish;
    executed: boolean;
    pauseOrUnpause: BigNumberish;
    timestamp: BigNumberish;
    roots: BigNumberish;
    endTotalRoots: BigNumberish;
  };

  export type BipStructOutput = [
    string,
    number,
    number,
    boolean,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    proposer: string;
    start: number;
    period: number;
    executed: boolean;
    pauseOrUnpause: BigNumber;
    timestamp: BigNumber;
    roots: BigNumber;
    endTotalRoots: BigNumber;
  };

  export type DiamondCutStruct = {
    diamondCut: IDiamondCut.FacetCutStruct[];
    initAddress: string;
    initData: BytesLike;
  };

  export type DiamondCutStructOutput = [
    IDiamondCut.FacetCutStructOutput[],
    string,
    string
  ] & {
    diamondCut: IDiamondCut.FacetCutStructOutput[];
    initAddress: string;
    initData: string;
  };

  export type RainStruct = {
    start: BigNumberish;
    raining: boolean;
    pods: BigNumberish;
    roots: BigNumberish;
  };

  export type RainStructOutput = [number, boolean, BigNumber, BigNumber] & {
    start: number;
    raining: boolean;
    pods: BigNumber;
    roots: BigNumber;
  };

  export type SeasonStruct = {
    current: BigNumberish;
    sis: BigNumberish;
    withdrawSeasons: BigNumberish;
    start: BigNumberish;
    period: BigNumberish;
    timestamp: BigNumberish;
  };

  export type SeasonStructOutput = [
    number,
    number,
    number,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    current: number;
    sis: number;
    withdrawSeasons: number;
    start: BigNumber;
    period: BigNumber;
    timestamp: BigNumber;
  };

  export type WeatherStruct = {
    startSoil: BigNumberish;
    lastDSoil: BigNumberish;
    lastSoilPercent: BigNumberish;
    lastSowTime: BigNumberish;
    nextSowTime: BigNumberish;
    yield: BigNumberish;
    didSowBelowMin: boolean;
    didSowFaster: boolean;
  };

  export type WeatherStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    number,
    number,
    number,
    boolean,
    boolean
  ] & {
    startSoil: BigNumber;
    lastDSoil: BigNumber;
    lastSoilPercent: BigNumber;
    lastSowTime: number;
    nextSowTime: number;
    yield: number;
    didSowBelowMin: boolean;
    didSowFaster: boolean;
  };

  export type V1IncreaseSiloStruct = {
    beans: BigNumberish;
    stalk: BigNumberish;
    roots: BigNumberish;
  };

  export type V1IncreaseSiloStructOutput = [BigNumber, BigNumber, BigNumber] & {
    beans: BigNumber;
    stalk: BigNumber;
    roots: BigNumber;
  };

  export type SeasonOfPlentyStruct = {
    weth: BigNumberish;
    base: BigNumberish;
    last: BigNumberish;
  };

  export type SeasonOfPlentyStructOutput = [BigNumber, BigNumber, number] & {
    weth: BigNumber;
    base: BigNumber;
    last: number;
  };

  export type SiloSettingsStruct = {
    selector: BytesLike;
    seeds: BigNumberish;
    stalk: BigNumberish;
  };

  export type SiloSettingsStructOutput = [string, number, number] & {
    selector: string;
    seeds: number;
    stalk: number;
  };
}

export declare namespace Listing {
  export type PodListingStruct = {
    account: string;
    index: BigNumberish;
    start: BigNumberish;
    amount: BigNumberish;
    pricePerPod: BigNumberish;
    maxHarvestableIndex: BigNumberish;
    toWallet: boolean;
  };

  export type PodListingStructOutput = [
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    number,
    BigNumber,
    boolean
  ] & {
    account: string;
    index: BigNumber;
    start: BigNumber;
    amount: BigNumber;
    pricePerPod: number;
    maxHarvestableIndex: BigNumber;
    toWallet: boolean;
  };
}

export declare namespace Order {
  export type PodOrderStruct = {
    account: string;
    pricePerPod: BigNumberish;
    maxPlaceInLine: BigNumberish;
  };

  export type PodOrderStructOutput = [string, number, BigNumber] & {
    account: string;
    pricePerPod: number;
    maxPlaceInLine: BigNumber;
  };
}

export declare namespace Decimal {
  export type D256Struct = { value: BigNumberish };

  export type D256StructOutput = [BigNumber] & { value: BigNumber };
}

export declare namespace SiloV2Facet {
  export type SeasonClaimStruct = { token: string; season: BigNumberish };

  export type SeasonClaimStructOutput = [string, number] & {
    token: string;
    season: number;
  };

  export type SeasonsClaimStruct = { token: string; seasons: BigNumberish[] };

  export type SeasonsClaimStructOutput = [string, number[]] & {
    token: string;
    seasons: number[];
  };

  export type WithdrawSeasonStruct = {
    token: string;
    season: BigNumberish;
    amount: BigNumberish;
  };

  export type WithdrawSeasonStructOutput = [string, number, BigNumber] & {
    token: string;
    season: number;
    amount: BigNumber;
  };

  export type WithdrawSeasonsStruct = {
    token: string;
    seasons: BigNumberish[];
    amounts: BigNumberish[];
  };

  export type WithdrawSeasonsStructOutput = [string, number[], BigNumber[]] & {
    token: string;
    seasons: number[];
    amounts: BigNumber[];
  };
}

export interface BeanstalkInterface extends utils.Interface {
  functions: {
    "mockToBDV(uint256)": FunctionFragment;
    "claim((uint32[],uint32[],uint256[],bool,bool,uint256,uint256,bool))": FunctionFragment;
    "claimAndUnwrapBeans((uint32[],uint32[],uint256[],bool,bool,uint256,uint256,bool),uint256)": FunctionFragment;
    "claimBeans(uint32[])": FunctionFragment;
    "claimEth()": FunctionFragment;
    "claimLP(uint32[])": FunctionFragment;
    "harvest(uint256[])": FunctionFragment;
    "removeAndClaimLP(uint32[],uint256,uint256)": FunctionFragment;
    "unwrapBeans(uint256)": FunctionFragment;
    "wrapBeans(uint256)": FunctionFragment;
    "wrappedBeans(address)": FunctionFragment;
    "beansToPeg()": FunctionFragment;
    "claimConvertAddAndDepositLP(uint256,(uint256,uint256,uint256),uint32[],uint256[],(uint32[],uint32[],uint256[],bool,bool,uint256,uint256,bool))": FunctionFragment;
    "convertAddAndDepositLP(uint256,(uint256,uint256,uint256),uint32[],uint256[])": FunctionFragment;
    "convertDepositedBeans(uint256,uint256,uint32[],uint256[])": FunctionFragment;
    "convertDepositedLP(uint256,uint256,uint32[],uint256[])": FunctionFragment;
    "lpToPeg()": FunctionFragment;
    "curveToBDV(uint256)": FunctionFragment;
    "diamondCut((address,uint8,bytes4[])[],address,bytes)": FunctionFragment;
    "facetAddress(bytes4)": FunctionFragment;
    "facetAddresses()": FunctionFragment;
    "facetFunctionSelectors(address)": FunctionFragment;
    "facets()": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "buyAndSowBeans(uint256,uint256)": FunctionFragment;
    "buyAndSowBeansWithMin(uint256,uint256,uint256)": FunctionFragment;
    "claimAndSowBeans(uint256,(uint32[],uint32[],uint256[],bool,bool,uint256,uint256,bool))": FunctionFragment;
    "claimAndSowBeansWithMin(uint256,uint256,(uint32[],uint32[],uint256[],bool,bool,uint256,uint256,bool))": FunctionFragment;
    "claimBuyAndSowBeans(uint256,uint256,(uint32[],uint32[],uint256[],bool,bool,uint256,uint256,bool))": FunctionFragment;
    "claimBuyAndSowBeansWithMin(uint256,uint256,uint256,(uint32[],uint32[],uint256[],bool,bool,uint256,uint256,bool))": FunctionFragment;
    "harvestableIndex()": FunctionFragment;
    "harvestedIndex()": FunctionFragment;
    "plot(address,uint256)": FunctionFragment;
    "podIndex()": FunctionFragment;
    "sowBeans(uint256)": FunctionFragment;
    "sowBeansWithMin(uint256,uint256)": FunctionFragment;
    "totalHarvestable()": FunctionFragment;
    "totalPods()": FunctionFragment;
    "totalSoil()": FunctionFragment;
    "totalUnripenedPods()": FunctionFragment;
    "createFundraiser(address,address,uint256)": FunctionFragment;
    "fund(uint32,uint256)": FunctionFragment;
    "fundingToken(uint32)": FunctionFragment;
    "fundraiser(uint32)": FunctionFragment;
    "numberOfFundraisers()": FunctionFragment;
    "remainingFunding(uint32)": FunctionFragment;
    "totalFunding(uint32)": FunctionFragment;
    "activeBips()": FunctionFragment;
    "bip(uint32)": FunctionFragment;
    "bipDiamondCut(uint32)": FunctionFragment;
    "bipFacetCuts(uint32)": FunctionFragment;
    "commit(uint32)": FunctionFragment;
    "emergencyCommit(uint32)": FunctionFragment;
    "numberOfBips()": FunctionFragment;
    "ownerPause()": FunctionFragment;
    "ownerUnpause()": FunctionFragment;
    "pauseOrUnpause(uint32)": FunctionFragment;
    "propose((address,uint8,bytes4[])[],address,bytes,uint8)": FunctionFragment;
    "rootsFor(uint32)": FunctionFragment;
    "unvote(uint32)": FunctionFragment;
    "unvoteAll(uint32[])": FunctionFragment;
    "vote(uint32)": FunctionFragment;
    "voteAll(uint32[])": FunctionFragment;
    "voteUnvoteAll(uint32[])": FunctionFragment;
    "voted(address,uint32)": FunctionFragment;
    "voted(address)": FunctionFragment;
    "allowancePods(address,address)": FunctionFragment;
    "approvePods(address,uint256)": FunctionFragment;
    "buyBeansAndCreatePodOrder(uint256,uint256,uint24,uint232)": FunctionFragment;
    "buyBeansAndFillPodListing((address,uint256,uint256,uint256,uint24,uint256,bool),uint256,uint256)": FunctionFragment;
    "cancelPodListing(uint256)": FunctionFragment;
    "cancelPodOrder(uint24,uint256,bool)": FunctionFragment;
    "claimAndCreatePodOrder(uint256,uint24,uint232,(uint32[],uint32[],uint256[],bool,bool,uint256,uint256,bool))": FunctionFragment;
    "claimAndFillPodListing((address,uint256,uint256,uint256,uint24,uint256,bool),uint256,(uint32[],uint32[],uint256[],bool,bool,uint256,uint256,bool))": FunctionFragment;
    "claimBuyBeansAndCreatePodOrder(uint256,uint256,uint24,uint232,(uint32[],uint32[],uint256[],bool,bool,uint256,uint256,bool))": FunctionFragment;
    "claimBuyBeansAndFillPodListing((address,uint256,uint256,uint256,uint24,uint256,bool),uint256,uint256,(uint32[],uint32[],uint256[],bool,bool,uint256,uint256,bool))": FunctionFragment;
    "createPodListing(uint256,uint256,uint256,uint24,uint256,bool)": FunctionFragment;
    "createPodOrder(uint256,uint24,uint256)": FunctionFragment;
    "fillPodListing((address,uint256,uint256,uint256,uint24,uint256,bool),uint256)": FunctionFragment;
    "fillPodOrder((address,uint24,uint256),uint256,uint256,uint256,bool)": FunctionFragment;
    "podListing(uint256)": FunctionFragment;
    "podOrder(address,uint24,uint256)": FunctionFragment;
    "podOrderById(bytes32)": FunctionFragment;
    "transferPlot(address,address,uint256,uint256,uint256)": FunctionFragment;
    "capture()": FunctionFragment;
    "getTWAPPrices()": FunctionFragment;
    "owner()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "bean()": FunctionFragment;
    "lockedReserves()": FunctionFragment;
    "pair()": FunctionFragment;
    "paused()": FunctionFragment;
    "pegPair()": FunctionFragment;
    "pegReserves()": FunctionFragment;
    "rain()": FunctionFragment;
    "reserves()": FunctionFragment;
    "season()": FunctionFragment;
    "seasonOfPlenty(uint32)": FunctionFragment;
    "seasonTime()": FunctionFragment;
    "sunrise()": FunctionFragment;
    "time()": FunctionFragment;
    "weather()": FunctionFragment;
    "withdrawSeasons()": FunctionFragment;
    "yield()": FunctionFragment;
    "addAndDepositLP(uint256,uint256,uint256,(uint256,uint256,uint256))": FunctionFragment;
    "balanceOfEth(address)": FunctionFragment;
    "balanceOfFarmableBeans(address)": FunctionFragment;
    "balanceOfFarmableBeansV1(address)": FunctionFragment;
    "balanceOfFarmableBeansV2(uint256)": FunctionFragment;
    "balanceOfFarmableBeansV3(address,uint256)": FunctionFragment;
    "balanceOfFarmableSeeds(address)": FunctionFragment;
    "balanceOfFarmableStalk(address)": FunctionFragment;
    "balanceOfGrownStalk(address)": FunctionFragment;
    "balanceOfPlentyBase(address)": FunctionFragment;
    "balanceOfRainRoots(address)": FunctionFragment;
    "balanceOfRoots(address)": FunctionFragment;
    "balanceOfSeeds(address)": FunctionFragment;
    "balanceOfStalk(address)": FunctionFragment;
    "balanceOfUnclaimedRoots(address)": FunctionFragment;
    "beanDeposit(address,uint32)": FunctionFragment;
    "beanWithdrawal(address,uint32)": FunctionFragment;
    "buyAndDepositBeans(uint256,uint256)": FunctionFragment;
    "claimAddAndDepositLP(uint256,uint256,uint256,(uint256,uint256,uint256),(uint32[],uint32[],uint256[],bool,bool,uint256,uint256,bool))": FunctionFragment;
    "claimAndDepositBeans(uint256,(uint32[],uint32[],uint256[],bool,bool,uint256,uint256,bool))": FunctionFragment;
    "claimAndDepositLP(uint256,(uint32[],uint32[],uint256[],bool,bool,uint256,uint256,bool))": FunctionFragment;
    "claimAndWithdrawBeans(uint32[],uint256[],(uint32[],uint32[],uint256[],bool,bool,uint256,uint256,bool))": FunctionFragment;
    "claimAndWithdrawLP(uint32[],uint256[],(uint32[],uint32[],uint256[],bool,bool,uint256,uint256,bool))": FunctionFragment;
    "claimBuyAndDepositBeans(uint256,uint256,(uint32[],uint32[],uint256[],bool,bool,uint256,uint256,bool))": FunctionFragment;
    "depositBeans(uint256)": FunctionFragment;
    "depositLP(uint256)": FunctionFragment;
    "lastSeasonOfPlenty()": FunctionFragment;
    "lastSupplyIncreases(address)": FunctionFragment;
    "lastUpdate(address)": FunctionFragment;
    "legacySupplyIncrease()": FunctionFragment;
    "lpDeposit(address,uint32)": FunctionFragment;
    "lpWithdrawal(address,uint32)": FunctionFragment;
    "proposedUntil(address)": FunctionFragment;
    "seasonsOfPlenty()": FunctionFragment;
    "supplyIncreases()": FunctionFragment;
    "totalDepositedBeans()": FunctionFragment;
    "totalDepositedLP()": FunctionFragment;
    "totalFarmableBeans()": FunctionFragment;
    "totalRoots()": FunctionFragment;
    "totalSeeds()": FunctionFragment;
    "totalStalk()": FunctionFragment;
    "totalWithdrawnBeans()": FunctionFragment;
    "totalWithdrawnLP()": FunctionFragment;
    "unclaimedRoots()": FunctionFragment;
    "updateSilo(address)": FunctionFragment;
    "votedUntil(address)": FunctionFragment;
    "weth()": FunctionFragment;
    "withdrawBeans(uint32[],uint256[])": FunctionFragment;
    "withdrawLP(uint32[],uint256[])": FunctionFragment;
    "claimTokenBySeason(address,uint32)": FunctionFragment;
    "claimTokenBySeasons(address,uint32[])": FunctionFragment;
    "claimTokensBySeason((address,uint32)[])": FunctionFragment;
    "claimTokensBySeasons((address,uint32[])[])": FunctionFragment;
    "deposit(address,uint256)": FunctionFragment;
    "getDeposit(address,address,uint32)": FunctionFragment;
    "getTotalDeposited(address)": FunctionFragment;
    "getTotalWithdrawn(address)": FunctionFragment;
    "getWithdrawal(address,address,uint32)": FunctionFragment;
    "tokenSettings(address)": FunctionFragment;
    "whitelistToken(address,bytes4,uint32,uint32)": FunctionFragment;
    "withdrawTokenBySeason(address,uint32,uint256)": FunctionFragment;
    "withdrawTokenBySeasons(address,uint32[],uint256[])": FunctionFragment;
    "withdrawTokensBySeason((address,uint32,uint256)[])": FunctionFragment;
    "withdrawTokensBySeasons((address,uint32[],uint256[])[])": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "mockToBDV"
      | "claim"
      | "claimAndUnwrapBeans"
      | "claimBeans"
      | "claimEth"
      | "claimLP"
      | "harvest"
      | "removeAndClaimLP"
      | "unwrapBeans"
      | "wrapBeans"
      | "wrappedBeans"
      | "beansToPeg"
      | "claimConvertAddAndDepositLP"
      | "convertAddAndDepositLP"
      | "convertDepositedBeans"
      | "convertDepositedLP"
      | "lpToPeg"
      | "curveToBDV"
      | "diamondCut"
      | "facetAddress"
      | "facetAddresses"
      | "facetFunctionSelectors"
      | "facets"
      | "supportsInterface"
      | "buyAndSowBeans"
      | "buyAndSowBeansWithMin"
      | "claimAndSowBeans"
      | "claimAndSowBeansWithMin"
      | "claimBuyAndSowBeans"
      | "claimBuyAndSowBeansWithMin"
      | "harvestableIndex"
      | "harvestedIndex"
      | "plot"
      | "podIndex"
      | "sowBeans"
      | "sowBeansWithMin"
      | "totalHarvestable"
      | "totalPods"
      | "totalSoil"
      | "totalUnripenedPods"
      | "createFundraiser"
      | "fund"
      | "fundingToken"
      | "fundraiser"
      | "numberOfFundraisers"
      | "remainingFunding"
      | "totalFunding"
      | "activeBips"
      | "bip"
      | "bipDiamondCut"
      | "bipFacetCuts"
      | "commit"
      | "emergencyCommit"
      | "numberOfBips"
      | "ownerPause"
      | "ownerUnpause"
      | "pauseOrUnpause"
      | "propose"
      | "rootsFor"
      | "unvote"
      | "unvoteAll"
      | "vote"
      | "voteAll"
      | "voteUnvoteAll"
      | "voted(address,uint32)"
      | "voted(address)"
      | "allowancePods"
      | "approvePods"
      | "buyBeansAndCreatePodOrder"
      | "buyBeansAndFillPodListing"
      | "cancelPodListing"
      | "cancelPodOrder"
      | "claimAndCreatePodOrder"
      | "claimAndFillPodListing"
      | "claimBuyBeansAndCreatePodOrder"
      | "claimBuyBeansAndFillPodListing"
      | "createPodListing"
      | "createPodOrder"
      | "fillPodListing"
      | "fillPodOrder"
      | "podListing"
      | "podOrder"
      | "podOrderById"
      | "transferPlot"
      | "capture"
      | "getTWAPPrices"
      | "owner"
      | "transferOwnership"
      | "bean"
      | "lockedReserves"
      | "pair"
      | "paused"
      | "pegPair"
      | "pegReserves"
      | "rain"
      | "reserves"
      | "season"
      | "seasonOfPlenty"
      | "seasonTime"
      | "sunrise"
      | "time"
      | "weather"
      | "withdrawSeasons"
      | "yield"
      | "addAndDepositLP"
      | "balanceOfEth"
      | "balanceOfFarmableBeans"
      | "balanceOfFarmableBeansV1"
      | "balanceOfFarmableBeansV2"
      | "balanceOfFarmableBeansV3"
      | "balanceOfFarmableSeeds"
      | "balanceOfFarmableStalk"
      | "balanceOfGrownStalk"
      | "balanceOfPlentyBase"
      | "balanceOfRainRoots"
      | "balanceOfRoots"
      | "balanceOfSeeds"
      | "balanceOfStalk"
      | "balanceOfUnclaimedRoots"
      | "beanDeposit"
      | "beanWithdrawal"
      | "buyAndDepositBeans"
      | "claimAddAndDepositLP"
      | "claimAndDepositBeans"
      | "claimAndDepositLP"
      | "claimAndWithdrawBeans"
      | "claimAndWithdrawLP"
      | "claimBuyAndDepositBeans"
      | "depositBeans"
      | "depositLP"
      | "lastSeasonOfPlenty"
      | "lastSupplyIncreases"
      | "lastUpdate"
      | "legacySupplyIncrease"
      | "lpDeposit"
      | "lpWithdrawal"
      | "proposedUntil"
      | "seasonsOfPlenty"
      | "supplyIncreases"
      | "totalDepositedBeans"
      | "totalDepositedLP"
      | "totalFarmableBeans"
      | "totalRoots"
      | "totalSeeds"
      | "totalStalk"
      | "totalWithdrawnBeans"
      | "totalWithdrawnLP"
      | "unclaimedRoots"
      | "updateSilo"
      | "votedUntil"
      | "weth"
      | "withdrawBeans"
      | "withdrawLP"
      | "claimTokenBySeason"
      | "claimTokenBySeasons"
      | "claimTokensBySeason"
      | "claimTokensBySeasons"
      | "deposit"
      | "getDeposit"
      | "getTotalDeposited"
      | "getTotalWithdrawn"
      | "getWithdrawal"
      | "tokenSettings"
      | "whitelistToken"
      | "withdrawTokenBySeason"
      | "withdrawTokenBySeasons"
      | "withdrawTokensBySeason"
      | "withdrawTokensBySeasons"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "mockToBDV",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claim",
    values: [LibClaim.ClaimStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "claimAndUnwrapBeans",
    values: [LibClaim.ClaimStruct, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimBeans",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(functionFragment: "claimEth", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "claimLP",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "harvest",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "removeAndClaimLP",
    values: [BigNumberish[], BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "unwrapBeans",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "wrapBeans",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "wrappedBeans",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "beansToPeg",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimConvertAddAndDepositLP",
    values: [
      BigNumberish,
      LibMarket.AddLiquidityStruct,
      BigNumberish[],
      BigNumberish[],
      LibClaim.ClaimStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "convertAddAndDepositLP",
    values: [
      BigNumberish,
      LibMarket.AddLiquidityStruct,
      BigNumberish[],
      BigNumberish[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "convertDepositedBeans",
    values: [BigNumberish, BigNumberish, BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "convertDepositedLP",
    values: [BigNumberish, BigNumberish, BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(functionFragment: "lpToPeg", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "curveToBDV",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "diamondCut",
    values: [IDiamondCut.FacetCutStruct[], string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "facetAddress",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "facetAddresses",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "facetFunctionSelectors",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "facets", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "buyAndSowBeans",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "buyAndSowBeansWithMin",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimAndSowBeans",
    values: [BigNumberish, LibClaim.ClaimStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "claimAndSowBeansWithMin",
    values: [BigNumberish, BigNumberish, LibClaim.ClaimStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "claimBuyAndSowBeans",
    values: [BigNumberish, BigNumberish, LibClaim.ClaimStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "claimBuyAndSowBeansWithMin",
    values: [BigNumberish, BigNumberish, BigNumberish, LibClaim.ClaimStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "harvestableIndex",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "harvestedIndex",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "plot",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "podIndex", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "sowBeans",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sowBeansWithMin",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalHarvestable",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "totalPods", values?: undefined): string;
  encodeFunctionData(functionFragment: "totalSoil", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalUnripenedPods",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createFundraiser",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "fund",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "fundingToken",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "fundraiser",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "numberOfFundraisers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "remainingFunding",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalFunding",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "activeBips",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "bip", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "bipDiamondCut",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "bipFacetCuts",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "commit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyCommit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "numberOfBips",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ownerPause",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ownerUnpause",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pauseOrUnpause",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "propose",
    values: [IDiamondCut.FacetCutStruct[], string, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rootsFor",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "unvote",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "unvoteAll",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(functionFragment: "vote", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "voteAll",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "voteUnvoteAll",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "voted(address,uint32)",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "voted(address)",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "allowancePods",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "approvePods",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "buyBeansAndCreatePodOrder",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "buyBeansAndFillPodListing",
    values: [Listing.PodListingStruct, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelPodListing",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelPodOrder",
    values: [BigNumberish, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "claimAndCreatePodOrder",
    values: [BigNumberish, BigNumberish, BigNumberish, LibClaim.ClaimStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "claimAndFillPodListing",
    values: [Listing.PodListingStruct, BigNumberish, LibClaim.ClaimStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "claimBuyBeansAndCreatePodOrder",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      LibClaim.ClaimStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "claimBuyBeansAndFillPodListing",
    values: [
      Listing.PodListingStruct,
      BigNumberish,
      BigNumberish,
      LibClaim.ClaimStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createPodListing",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      boolean
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createPodOrder",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "fillPodListing",
    values: [Listing.PodListingStruct, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "fillPodOrder",
    values: [
      Order.PodOrderStruct,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      boolean
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "podListing",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "podOrder",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "podOrderById",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferPlot",
    values: [string, string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "capture", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getTWAPPrices",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "bean", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "lockedReserves",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "pair", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(functionFragment: "pegPair", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pegReserves",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "rain", values?: undefined): string;
  encodeFunctionData(functionFragment: "reserves", values?: undefined): string;
  encodeFunctionData(functionFragment: "season", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "seasonOfPlenty",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "seasonTime",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "sunrise", values?: undefined): string;
  encodeFunctionData(functionFragment: "time", values?: undefined): string;
  encodeFunctionData(functionFragment: "weather", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawSeasons",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "yield", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addAndDepositLP",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      LibMarket.AddLiquidityStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOfEth",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOfFarmableBeans",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOfFarmableBeansV1",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOfFarmableBeansV2",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOfFarmableBeansV3",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOfFarmableSeeds",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOfFarmableStalk",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOfGrownStalk",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOfPlentyBase",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOfRainRoots",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOfRoots",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOfSeeds",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOfStalk",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOfUnclaimedRoots",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "beanDeposit",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "beanWithdrawal",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "buyAndDepositBeans",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimAddAndDepositLP",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      LibMarket.AddLiquidityStruct,
      LibClaim.ClaimStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "claimAndDepositBeans",
    values: [BigNumberish, LibClaim.ClaimStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "claimAndDepositLP",
    values: [BigNumberish, LibClaim.ClaimStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "claimAndWithdrawBeans",
    values: [BigNumberish[], BigNumberish[], LibClaim.ClaimStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "claimAndWithdrawLP",
    values: [BigNumberish[], BigNumberish[], LibClaim.ClaimStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "claimBuyAndDepositBeans",
    values: [BigNumberish, BigNumberish, LibClaim.ClaimStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "depositBeans",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositLP",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lastSeasonOfPlenty",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastSupplyIncreases",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "lastUpdate", values: [string]): string;
  encodeFunctionData(
    functionFragment: "legacySupplyIncrease",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lpDeposit",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lpWithdrawal",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "proposedUntil",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "seasonsOfPlenty",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "supplyIncreases",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalDepositedBeans",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalDepositedLP",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalFarmableBeans",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalRoots",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSeeds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalStalk",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalWithdrawnBeans",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalWithdrawnLP",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "unclaimedRoots",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "updateSilo", values: [string]): string;
  encodeFunctionData(functionFragment: "votedUntil", values: [string]): string;
  encodeFunctionData(functionFragment: "weth", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawBeans",
    values: [BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawLP",
    values: [BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "claimTokenBySeason",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimTokenBySeasons",
    values: [string, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "claimTokensBySeason",
    values: [SiloV2Facet.SeasonClaimStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "claimTokensBySeasons",
    values: [SiloV2Facet.SeasonsClaimStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDeposit",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalDeposited",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalWithdrawn",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getWithdrawal",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenSettings",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistToken",
    values: [string, BytesLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawTokenBySeason",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawTokenBySeasons",
    values: [string, BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawTokensBySeason",
    values: [SiloV2Facet.WithdrawSeasonStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawTokensBySeasons",
    values: [SiloV2Facet.WithdrawSeasonsStruct[]]
  ): string;

  decodeFunctionResult(functionFragment: "mockToBDV", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimAndUnwrapBeans",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claimBeans", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claimEth", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claimLP", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "harvest", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeAndClaimLP",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unwrapBeans",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "wrapBeans", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "wrappedBeans",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "beansToPeg", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimConvertAddAndDepositLP",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "convertAddAndDepositLP",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "convertDepositedBeans",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "convertDepositedLP",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lpToPeg", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "curveToBDV", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "diamondCut", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "facetAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "facetAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "facetFunctionSelectors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "facets", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buyAndSowBeans",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buyAndSowBeansWithMin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimAndSowBeans",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimAndSowBeansWithMin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimBuyAndSowBeans",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimBuyAndSowBeansWithMin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "harvestableIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "harvestedIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "plot", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "podIndex", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sowBeans", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "sowBeansWithMin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalHarvestable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "totalPods", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "totalSoil", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalUnripenedPods",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createFundraiser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fund", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "fundingToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fundraiser", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "numberOfFundraisers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "remainingFunding",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalFunding",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "activeBips", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bip", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "bipDiamondCut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bipFacetCuts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "commit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "emergencyCommit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "numberOfBips",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ownerPause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ownerUnpause",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pauseOrUnpause",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "propose", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rootsFor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unvote", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unvoteAll", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vote", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "voteAll", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "voteUnvoteAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "voted(address,uint32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "voted(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allowancePods",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approvePods",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buyBeansAndCreatePodOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buyBeansAndFillPodListing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelPodListing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelPodOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimAndCreatePodOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimAndFillPodListing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimBuyBeansAndCreatePodOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimBuyBeansAndFillPodListing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createPodListing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createPodOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fillPodListing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fillPodOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "podListing", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "podOrder", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "podOrderById",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferPlot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "capture", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTWAPPrices",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "bean", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lockedReserves",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pair", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pegPair", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pegReserves",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rain", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "reserves", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "season", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "seasonOfPlenty",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "seasonTime", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sunrise", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "time", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "weather", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawSeasons",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "yield", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addAndDepositLP",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfEth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfFarmableBeans",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfFarmableBeansV1",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfFarmableBeansV2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfFarmableBeansV3",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfFarmableSeeds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfFarmableStalk",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfGrownStalk",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfPlentyBase",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfRainRoots",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfRoots",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfSeeds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfStalk",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfUnclaimedRoots",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "beanDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "beanWithdrawal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buyAndDepositBeans",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimAddAndDepositLP",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimAndDepositBeans",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimAndDepositLP",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimAndWithdrawBeans",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimAndWithdrawLP",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimBuyAndDepositBeans",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositBeans",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "depositLP", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastSeasonOfPlenty",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastSupplyIncreases",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lastUpdate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "legacySupplyIncrease",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lpDeposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lpWithdrawal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposedUntil",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "seasonsOfPlenty",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supplyIncreases",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalDepositedBeans",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalDepositedLP",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalFarmableBeans",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "totalRoots", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "totalSeeds", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "totalStalk", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalWithdrawnBeans",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalWithdrawnLP",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unclaimedRoots",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "updateSilo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "votedUntil", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "weth", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawBeans",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdrawLP", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimTokenBySeason",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimTokenBySeasons",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimTokensBySeason",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimTokensBySeasons",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getDeposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTotalDeposited",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalWithdrawn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWithdrawal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenSettings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelistToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawTokenBySeason",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawTokenBySeasons",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawTokensBySeason",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawTokensBySeasons",
    data: BytesLike
  ): Result;

  events: {
    "BeanAllocation(address,uint256)": EventFragment;
    "BeanAllocation(address,uint256)": EventFragment;
    "BeanAllocation(address,uint256)": EventFragment;
    "BeanClaim(address,uint32[],uint256)": EventFragment;
    "EtherClaim(address,uint256)": EventFragment;
    "Harvest(address,uint256[],uint256)": EventFragment;
    "LPClaim(address,uint32[],uint256)": EventFragment;
    "BeanRemove(address,uint32[],uint256[],uint256)": EventFragment;
    "BeanRemove(address,uint32[],uint256[],uint256)": EventFragment;
    "LPDeposit(address,uint256,uint256,uint256)": EventFragment;
    "LPDeposit(address,uint256,uint256,uint256)": EventFragment;
    "LPRemove(address,uint32[],uint256[],uint256)": EventFragment;
    "LPRemove(address,uint32[],uint256[],uint256)": EventFragment;
    "DiamondCut(tuple[],address,bytes)": EventFragment;
    "Sow(address,uint256,uint256,uint256)": EventFragment;
    "Sow(address,uint256,uint256,uint256)": EventFragment;
    "CompleteFundraiser(uint32)": EventFragment;
    "CreateFundraiser(uint32,address,address,uint256)": EventFragment;
    "FundFundraiser(address,uint32,uint256)": EventFragment;
    "Commit(address,uint32)": EventFragment;
    "Incentivization(address,uint256)": EventFragment;
    "Incentivization(address,uint256)": EventFragment;
    "Pause(address,uint256)": EventFragment;
    "Proposal(address,uint32,uint256,uint256)": EventFragment;
    "Unpause(address,uint256,uint256)": EventFragment;
    "Unvote(address,uint32,uint256)": EventFragment;
    "Vote(address,uint32,uint256)": EventFragment;
    "VoteList(address,uint32[],bool[],uint256)": EventFragment;
    "PlotTransfer(address,address,uint256,uint256)": EventFragment;
    "PodApproval(address,address,uint256)": EventFragment;
    "PodListingCancelled(address,uint256)": EventFragment;
    "PodListingCreated(address,uint256,uint256,uint256,uint24,uint256,bool)": EventFragment;
    "PodListingFilled(address,address,uint256,uint256,uint256)": EventFragment;
    "PodOrderCancelled(address,bytes32)": EventFragment;
    "PodOrderCreated(address,bytes32,uint256,uint24,uint256)": EventFragment;
    "PodOrderFilled(address,address,bytes32,uint256,uint256,uint256)": EventFragment;
    "SeasonOfPlenty(uint256,uint256,uint256)": EventFragment;
    "SeasonSnapshot(uint32,uint256,uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "Sunrise(uint256)": EventFragment;
    "SupplyDecrease(uint256,uint256,int256)": EventFragment;
    "SupplyIncrease(uint256,uint256,uint256,uint256,int256)": EventFragment;
    "SupplyNeutral(uint256,int256)": EventFragment;
    "WeatherChange(uint256,uint256,int8)": EventFragment;
    "BeanDeposit(address,uint256,uint256)": EventFragment;
    "BeanWithdraw(address,uint256,uint256)": EventFragment;
    "LPWithdraw(address,uint256,uint256)": EventFragment;
    "ClaimSeason(address,address,uint32,uint256)": EventFragment;
    "ClaimSeasons(address,address,uint32[],uint256)": EventFragment;
    "Deposit(address,address,uint256,uint256,uint256)": EventFragment;
    "RemoveSeason(address,address,uint32,uint256)": EventFragment;
    "RemoveSeasons(address,address,uint32[],uint256[],uint256)": EventFragment;
    "Withdraw(address,address,uint32,uint256)": EventFragment;
  };

  getEvent(
    nameOrSignatureOrTopic: "BeanAllocation(address,uint256)"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "BeanAllocation(address,uint256)"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "BeanAllocation(address,uint256)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BeanClaim"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EtherClaim"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Harvest"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LPClaim"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "BeanRemove(address,uint32[],uint256[],uint256)"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "BeanRemove(address,uint32[],uint256[],uint256)"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "LPDeposit(address,uint256,uint256,uint256)"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "LPDeposit(address,uint256,uint256,uint256)"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "LPRemove(address,uint32[],uint256[],uint256)"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "LPRemove(address,uint32[],uint256[],uint256)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DiamondCut"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "Sow(address,uint256,uint256,uint256)"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "Sow(address,uint256,uint256,uint256)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CompleteFundraiser"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CreateFundraiser"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FundFundraiser"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Commit"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "Incentivization(address,uint256)"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "Incentivization(address,uint256)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Pause"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Proposal"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpause"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unvote"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Vote"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VoteList"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PlotTransfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PodApproval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PodListingCancelled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PodListingCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PodListingFilled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PodOrderCancelled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PodOrderCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PodOrderFilled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SeasonOfPlenty"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SeasonSnapshot"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Sunrise"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SupplyDecrease"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SupplyIncrease"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SupplyNeutral"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WeatherChange"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BeanDeposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BeanWithdraw"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LPWithdraw"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ClaimSeason"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ClaimSeasons"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemoveSeason"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemoveSeasons"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}

export interface BeanAllocation_address_uint256_EventObject {
  account: string;
  beans: BigNumber;
}
export type BeanAllocation_address_uint256_Event = TypedEvent<
  [string, BigNumber],
  BeanAllocation_address_uint256_EventObject
>;

export type BeanAllocation_address_uint256_EventFilter =
  TypedEventFilter<BeanAllocation_address_uint256_Event>;

export interface BeanAllocation_address_uint256_EventObject {
  account: string;
  beans: BigNumber;
}
export type BeanAllocation_address_uint256_Event = TypedEvent<
  [string, BigNumber],
  BeanAllocation_address_uint256_EventObject
>;

export type BeanAllocation_address_uint256_EventFilter =
  TypedEventFilter<BeanAllocation_address_uint256_Event>;

export interface BeanAllocation_address_uint256_EventObject {
  account: string;
  beans: BigNumber;
}
export type BeanAllocation_address_uint256_Event = TypedEvent<
  [string, BigNumber],
  BeanAllocation_address_uint256_EventObject
>;

export type BeanAllocation_address_uint256_EventFilter =
  TypedEventFilter<BeanAllocation_address_uint256_Event>;

export interface BeanClaimEventObject {
  account: string;
  withdrawals: number[];
  beans: BigNumber;
}
export type BeanClaimEvent = TypedEvent<
  [string, number[], BigNumber],
  BeanClaimEventObject
>;

export type BeanClaimEventFilter = TypedEventFilter<BeanClaimEvent>;

export interface EtherClaimEventObject {
  account: string;
  ethereum: BigNumber;
}
export type EtherClaimEvent = TypedEvent<
  [string, BigNumber],
  EtherClaimEventObject
>;

export type EtherClaimEventFilter = TypedEventFilter<EtherClaimEvent>;

export interface HarvestEventObject {
  account: string;
  plots: BigNumber[];
  beans: BigNumber;
}
export type HarvestEvent = TypedEvent<
  [string, BigNumber[], BigNumber],
  HarvestEventObject
>;

export type HarvestEventFilter = TypedEventFilter<HarvestEvent>;

export interface LPClaimEventObject {
  account: string;
  withdrawals: number[];
  lp: BigNumber;
}
export type LPClaimEvent = TypedEvent<
  [string, number[], BigNumber],
  LPClaimEventObject
>;

export type LPClaimEventFilter = TypedEventFilter<LPClaimEvent>;

export interface BeanRemove_address_uint32_array_uint256_array_uint256_EventObject {
  account: string;
  crates: number[];
  crateBeans: BigNumber[];
  beans: BigNumber;
}
export type BeanRemove_address_uint32_array_uint256_array_uint256_Event =
  TypedEvent<
    [string, number[], BigNumber[], BigNumber],
    BeanRemove_address_uint32_array_uint256_array_uint256_EventObject
  >;

export type BeanRemove_address_uint32_array_uint256_array_uint256_EventFilter =
  TypedEventFilter<BeanRemove_address_uint32_array_uint256_array_uint256_Event>;

export interface BeanRemove_address_uint32_array_uint256_array_uint256_EventObject {
  account: string;
  crates: number[];
  crateBeans: BigNumber[];
  beans: BigNumber;
}
export type BeanRemove_address_uint32_array_uint256_array_uint256_Event =
  TypedEvent<
    [string, number[], BigNumber[], BigNumber],
    BeanRemove_address_uint32_array_uint256_array_uint256_EventObject
  >;

export type BeanRemove_address_uint32_array_uint256_array_uint256_EventFilter =
  TypedEventFilter<BeanRemove_address_uint32_array_uint256_array_uint256_Event>;

export interface LPDeposit_address_uint256_uint256_uint256_EventObject {
  account: string;
  season: BigNumber;
  lp: BigNumber;
  seeds: BigNumber;
}
export type LPDeposit_address_uint256_uint256_uint256_Event = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  LPDeposit_address_uint256_uint256_uint256_EventObject
>;

export type LPDeposit_address_uint256_uint256_uint256_EventFilter =
  TypedEventFilter<LPDeposit_address_uint256_uint256_uint256_Event>;

export interface LPDeposit_address_uint256_uint256_uint256_EventObject {
  account: string;
  season: BigNumber;
  lp: BigNumber;
  seeds: BigNumber;
}
export type LPDeposit_address_uint256_uint256_uint256_Event = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  LPDeposit_address_uint256_uint256_uint256_EventObject
>;

export type LPDeposit_address_uint256_uint256_uint256_EventFilter =
  TypedEventFilter<LPDeposit_address_uint256_uint256_uint256_Event>;

export interface LPRemove_address_uint32_array_uint256_array_uint256_EventObject {
  account: string;
  crates: number[];
  crateLP: BigNumber[];
  lp: BigNumber;
}
export type LPRemove_address_uint32_array_uint256_array_uint256_Event =
  TypedEvent<
    [string, number[], BigNumber[], BigNumber],
    LPRemove_address_uint32_array_uint256_array_uint256_EventObject
  >;

export type LPRemove_address_uint32_array_uint256_array_uint256_EventFilter =
  TypedEventFilter<LPRemove_address_uint32_array_uint256_array_uint256_Event>;

export interface LPRemove_address_uint32_array_uint256_array_uint256_EventObject {
  account: string;
  crates: number[];
  crateLP: BigNumber[];
  lp: BigNumber;
}
export type LPRemove_address_uint32_array_uint256_array_uint256_Event =
  TypedEvent<
    [string, number[], BigNumber[], BigNumber],
    LPRemove_address_uint32_array_uint256_array_uint256_EventObject
  >;

export type LPRemove_address_uint32_array_uint256_array_uint256_EventFilter =
  TypedEventFilter<LPRemove_address_uint32_array_uint256_array_uint256_Event>;

export interface DiamondCutEventObject {
  _diamondCut: IDiamondCut.FacetCutStructOutput[];
  _init: string;
  _calldata: string;
}
export type DiamondCutEvent = TypedEvent<
  [IDiamondCut.FacetCutStructOutput[], string, string],
  DiamondCutEventObject
>;

export type DiamondCutEventFilter = TypedEventFilter<DiamondCutEvent>;

export interface Sow_address_uint256_uint256_uint256_EventObject {
  account: string;
  index: BigNumber;
  beans: BigNumber;
  pods: BigNumber;
}
export type Sow_address_uint256_uint256_uint256_Event = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  Sow_address_uint256_uint256_uint256_EventObject
>;

export type Sow_address_uint256_uint256_uint256_EventFilter =
  TypedEventFilter<Sow_address_uint256_uint256_uint256_Event>;

export interface Sow_address_uint256_uint256_uint256_EventObject {
  account: string;
  index: BigNumber;
  beans: BigNumber;
  pods: BigNumber;
}
export type Sow_address_uint256_uint256_uint256_Event = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  Sow_address_uint256_uint256_uint256_EventObject
>;

export type Sow_address_uint256_uint256_uint256_EventFilter =
  TypedEventFilter<Sow_address_uint256_uint256_uint256_Event>;

export interface CompleteFundraiserEventObject {
  id: number;
}
export type CompleteFundraiserEvent = TypedEvent<
  [number],
  CompleteFundraiserEventObject
>;

export type CompleteFundraiserEventFilter =
  TypedEventFilter<CompleteFundraiserEvent>;

export interface CreateFundraiserEventObject {
  id: number;
  fundraiser: string;
  token: string;
  amount: BigNumber;
}
export type CreateFundraiserEvent = TypedEvent<
  [number, string, string, BigNumber],
  CreateFundraiserEventObject
>;

export type CreateFundraiserEventFilter =
  TypedEventFilter<CreateFundraiserEvent>;

export interface FundFundraiserEventObject {
  account: string;
  id: number;
  amount: BigNumber;
}
export type FundFundraiserEvent = TypedEvent<
  [string, number, BigNumber],
  FundFundraiserEventObject
>;

export type FundFundraiserEventFilter = TypedEventFilter<FundFundraiserEvent>;

export interface CommitEventObject {
  account: string;
  bip: number;
}
export type CommitEvent = TypedEvent<[string, number], CommitEventObject>;

export type CommitEventFilter = TypedEventFilter<CommitEvent>;

export interface Incentivization_address_uint256_EventObject {
  account: string;
  beans: BigNumber;
}
export type Incentivization_address_uint256_Event = TypedEvent<
  [string, BigNumber],
  Incentivization_address_uint256_EventObject
>;

export type Incentivization_address_uint256_EventFilter =
  TypedEventFilter<Incentivization_address_uint256_Event>;

export interface Incentivization_address_uint256_EventObject {
  account: string;
  beans: BigNumber;
}
export type Incentivization_address_uint256_Event = TypedEvent<
  [string, BigNumber],
  Incentivization_address_uint256_EventObject
>;

export type Incentivization_address_uint256_EventFilter =
  TypedEventFilter<Incentivization_address_uint256_Event>;

export interface PauseEventObject {
  account: string;
  timestamp: BigNumber;
}
export type PauseEvent = TypedEvent<[string, BigNumber], PauseEventObject>;

export type PauseEventFilter = TypedEventFilter<PauseEvent>;

export interface ProposalEventObject {
  account: string;
  bip: number;
  start: BigNumber;
  period: BigNumber;
}
export type ProposalEvent = TypedEvent<
  [string, number, BigNumber, BigNumber],
  ProposalEventObject
>;

export type ProposalEventFilter = TypedEventFilter<ProposalEvent>;

export interface UnpauseEventObject {
  account: string;
  timestamp: BigNumber;
  timePassed: BigNumber;
}
export type UnpauseEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  UnpauseEventObject
>;

export type UnpauseEventFilter = TypedEventFilter<UnpauseEvent>;

export interface UnvoteEventObject {
  account: string;
  bip: number;
  roots: BigNumber;
}
export type UnvoteEvent = TypedEvent<
  [string, number, BigNumber],
  UnvoteEventObject
>;

export type UnvoteEventFilter = TypedEventFilter<UnvoteEvent>;

export interface VoteEventObject {
  account: string;
  bip: number;
  roots: BigNumber;
}
export type VoteEvent = TypedEvent<
  [string, number, BigNumber],
  VoteEventObject
>;

export type VoteEventFilter = TypedEventFilter<VoteEvent>;

export interface VoteListEventObject {
  account: string;
  bips: number[];
  votes: boolean[];
  roots: BigNumber;
}
export type VoteListEvent = TypedEvent<
  [string, number[], boolean[], BigNumber],
  VoteListEventObject
>;

export type VoteListEventFilter = TypedEventFilter<VoteListEvent>;

export interface PlotTransferEventObject {
  from: string;
  to: string;
  id: BigNumber;
  pods: BigNumber;
}
export type PlotTransferEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  PlotTransferEventObject
>;

export type PlotTransferEventFilter = TypedEventFilter<PlotTransferEvent>;

export interface PodApprovalEventObject {
  owner: string;
  spender: string;
  pods: BigNumber;
}
export type PodApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  PodApprovalEventObject
>;

export type PodApprovalEventFilter = TypedEventFilter<PodApprovalEvent>;

export interface PodListingCancelledEventObject {
  account: string;
  index: BigNumber;
}
export type PodListingCancelledEvent = TypedEvent<
  [string, BigNumber],
  PodListingCancelledEventObject
>;

export type PodListingCancelledEventFilter =
  TypedEventFilter<PodListingCancelledEvent>;

export interface PodListingCreatedEventObject {
  account: string;
  index: BigNumber;
  start: BigNumber;
  amount: BigNumber;
  pricePerPod: number;
  maxHarvestableIndex: BigNumber;
  toWallet: boolean;
}
export type PodListingCreatedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, number, BigNumber, boolean],
  PodListingCreatedEventObject
>;

export type PodListingCreatedEventFilter =
  TypedEventFilter<PodListingCreatedEvent>;

export interface PodListingFilledEventObject {
  from: string;
  to: string;
  index: BigNumber;
  start: BigNumber;
  amount: BigNumber;
}
export type PodListingFilledEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber],
  PodListingFilledEventObject
>;

export type PodListingFilledEventFilter =
  TypedEventFilter<PodListingFilledEvent>;

export interface PodOrderCancelledEventObject {
  account: string;
  id: string;
}
export type PodOrderCancelledEvent = TypedEvent<
  [string, string],
  PodOrderCancelledEventObject
>;

export type PodOrderCancelledEventFilter =
  TypedEventFilter<PodOrderCancelledEvent>;

export interface PodOrderCreatedEventObject {
  account: string;
  id: string;
  amount: BigNumber;
  pricePerPod: number;
  maxPlaceInLine: BigNumber;
}
export type PodOrderCreatedEvent = TypedEvent<
  [string, string, BigNumber, number, BigNumber],
  PodOrderCreatedEventObject
>;

export type PodOrderCreatedEventFilter = TypedEventFilter<PodOrderCreatedEvent>;

export interface PodOrderFilledEventObject {
  from: string;
  to: string;
  id: string;
  index: BigNumber;
  start: BigNumber;
  amount: BigNumber;
}
export type PodOrderFilledEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber, BigNumber],
  PodOrderFilledEventObject
>;

export type PodOrderFilledEventFilter = TypedEventFilter<PodOrderFilledEvent>;

export interface SeasonOfPlentyEventObject {
  season: BigNumber;
  eth: BigNumber;
  harvestable: BigNumber;
}
export type SeasonOfPlentyEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  SeasonOfPlentyEventObject
>;

export type SeasonOfPlentyEventFilter = TypedEventFilter<SeasonOfPlentyEvent>;

export interface SeasonSnapshotEventObject {
  season: number;
  price: BigNumber;
  supply: BigNumber;
  stalk: BigNumber;
  seeds: BigNumber;
  podIndex: BigNumber;
  harvestableIndex: BigNumber;
}
export type SeasonSnapshotEvent = TypedEvent<
  [number, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
  SeasonSnapshotEventObject
>;

export type SeasonSnapshotEventFilter = TypedEventFilter<SeasonSnapshotEvent>;

export interface SunriseEventObject {
  season: BigNumber;
}
export type SunriseEvent = TypedEvent<[BigNumber], SunriseEventObject>;

export type SunriseEventFilter = TypedEventFilter<SunriseEvent>;

export interface SupplyDecreaseEventObject {
  season: BigNumber;
  price: BigNumber;
  newSoil: BigNumber;
}
export type SupplyDecreaseEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  SupplyDecreaseEventObject
>;

export type SupplyDecreaseEventFilter = TypedEventFilter<SupplyDecreaseEvent>;

export interface SupplyIncreaseEventObject {
  season: BigNumber;
  price: BigNumber;
  newHarvestable: BigNumber;
  newSilo: BigNumber;
  newSoil: BigNumber;
}
export type SupplyIncreaseEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
  SupplyIncreaseEventObject
>;

export type SupplyIncreaseEventFilter = TypedEventFilter<SupplyIncreaseEvent>;

export interface SupplyNeutralEventObject {
  season: BigNumber;
  newSoil: BigNumber;
}
export type SupplyNeutralEvent = TypedEvent<
  [BigNumber, BigNumber],
  SupplyNeutralEventObject
>;

export type SupplyNeutralEventFilter = TypedEventFilter<SupplyNeutralEvent>;

export interface WeatherChangeEventObject {
  season: BigNumber;
  caseId: BigNumber;
  change: number;
}
export type WeatherChangeEvent = TypedEvent<
  [BigNumber, BigNumber, number],
  WeatherChangeEventObject
>;

export type WeatherChangeEventFilter = TypedEventFilter<WeatherChangeEvent>;

export interface BeanDepositEventObject {
  account: string;
  season: BigNumber;
  beans: BigNumber;
}
export type BeanDepositEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  BeanDepositEventObject
>;

export type BeanDepositEventFilter = TypedEventFilter<BeanDepositEvent>;

export interface BeanWithdrawEventObject {
  account: string;
  season: BigNumber;
  beans: BigNumber;
}
export type BeanWithdrawEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  BeanWithdrawEventObject
>;

export type BeanWithdrawEventFilter = TypedEventFilter<BeanWithdrawEvent>;

export interface LPWithdrawEventObject {
  account: string;
  season: BigNumber;
  lp: BigNumber;
}
export type LPWithdrawEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  LPWithdrawEventObject
>;

export type LPWithdrawEventFilter = TypedEventFilter<LPWithdrawEvent>;

export interface ClaimSeasonEventObject {
  account: string;
  token: string;
  season: number;
  amount: BigNumber;
}
export type ClaimSeasonEvent = TypedEvent<
  [string, string, number, BigNumber],
  ClaimSeasonEventObject
>;

export type ClaimSeasonEventFilter = TypedEventFilter<ClaimSeasonEvent>;

export interface ClaimSeasonsEventObject {
  account: string;
  token: string;
  seasons: number[];
  amount: BigNumber;
}
export type ClaimSeasonsEvent = TypedEvent<
  [string, string, number[], BigNumber],
  ClaimSeasonsEventObject
>;

export type ClaimSeasonsEventFilter = TypedEventFilter<ClaimSeasonsEvent>;

export interface DepositEventObject {
  account: string;
  token: string;
  season: BigNumber;
  amount: BigNumber;
  bdv: BigNumber;
}
export type DepositEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber],
  DepositEventObject
>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export interface RemoveSeasonEventObject {
  account: string;
  token: string;
  season: number;
  amount: BigNumber;
}
export type RemoveSeasonEvent = TypedEvent<
  [string, string, number, BigNumber],
  RemoveSeasonEventObject
>;

export type RemoveSeasonEventFilter = TypedEventFilter<RemoveSeasonEvent>;

export interface RemoveSeasonsEventObject {
  account: string;
  token: string;
  seasons: number[];
  amounts: BigNumber[];
  amount: BigNumber;
}
export type RemoveSeasonsEvent = TypedEvent<
  [string, string, number[], BigNumber[], BigNumber],
  RemoveSeasonsEventObject
>;

export type RemoveSeasonsEventFilter = TypedEventFilter<RemoveSeasonsEvent>;

export interface WithdrawEventObject {
  account: string;
  token: string;
  season: number;
  amount: BigNumber;
}
export type WithdrawEvent = TypedEvent<
  [string, string, number, BigNumber],
  WithdrawEventObject
>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export interface Beanstalk extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BeanstalkInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    mockToBDV(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    claim(
      c: LibClaim.ClaimStruct,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimAndUnwrapBeans(
      c: LibClaim.ClaimStruct,
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimBeans(
      withdrawals: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimEth(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimLP(
      withdrawals: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    harvest(
      plots: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeAndClaimLP(
      withdrawals: BigNumberish[],
      minBeanAmount: BigNumberish,
      minEthAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unwrapBeans(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    wrapBeans(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    wrappedBeans(user: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    beansToPeg(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { beans: BigNumber }>;

    claimConvertAddAndDepositLP(
      lp: BigNumberish,
      al: LibMarket.AddLiquidityStruct,
      crates: BigNumberish[],
      amounts: BigNumberish[],
      claim: LibClaim.ClaimStruct,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    convertAddAndDepositLP(
      lp: BigNumberish,
      al: LibMarket.AddLiquidityStruct,
      crates: BigNumberish[],
      amounts: BigNumberish[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    convertDepositedBeans(
      beans: BigNumberish,
      minLP: BigNumberish,
      crates: BigNumberish[],
      amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    convertDepositedLP(
      lp: BigNumberish,
      minBeans: BigNumberish,
      crates: BigNumberish[],
      amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    lpToPeg(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { lp: BigNumber }>;

    curveToBDV(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    diamondCut(
      _diamondCut: IDiamondCut.FacetCutStruct[],
      _init: string,
      _calldata: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    facetAddress(
      _functionSelector: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string] & { facetAddress_: string }>;

    facetAddresses(
      overrides?: CallOverrides
    ): Promise<[string[]] & { facetAddresses_: string[] }>;

    facetFunctionSelectors(
      _facet: string,
      overrides?: CallOverrides
    ): Promise<[string[]] & { facetFunctionSelectors_: string[] }>;

    facets(
      overrides?: CallOverrides
    ): Promise<
      [IDiamondLoupe.FacetStructOutput[]] & {
        facets_: IDiamondLoupe.FacetStructOutput[];
      }
    >;

    supportsInterface(
      _interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    buyAndSowBeans(
      amount: BigNumberish,
      buyAmount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    buyAndSowBeansWithMin(
      amount: BigNumberish,
      buyAmount: BigNumberish,
      minAmount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimAndSowBeans(
      amount: BigNumberish,
      claim: LibClaim.ClaimStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimAndSowBeansWithMin(
      amount: BigNumberish,
      minAmount: BigNumberish,
      claim: LibClaim.ClaimStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimBuyAndSowBeans(
      amount: BigNumberish,
      buyAmount: BigNumberish,
      claim: LibClaim.ClaimStruct,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimBuyAndSowBeansWithMin(
      amount: BigNumberish,
      buyAmount: BigNumberish,
      minAmount: BigNumberish,
      claim: LibClaim.ClaimStruct,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    harvestableIndex(overrides?: CallOverrides): Promise<[BigNumber]>;

    harvestedIndex(overrides?: CallOverrides): Promise<[BigNumber]>;

    plot(
      account: string,
      plotId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    podIndex(overrides?: CallOverrides): Promise<[BigNumber]>;

    sowBeans(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sowBeansWithMin(
      amount: BigNumberish,
      minAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    totalHarvestable(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalPods(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalSoil(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalUnripenedPods(overrides?: CallOverrides): Promise<[BigNumber]>;

    createFundraiser(
      payee: string,
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    fund(
      id: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    fundingToken(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    fundraiser(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[Storage.FundraiserStructOutput]>;

    numberOfFundraisers(overrides?: CallOverrides): Promise<[number]>;

    remainingFunding(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    totalFunding(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    activeBips(overrides?: CallOverrides): Promise<[number[]]>;

    bip(
      bipId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[Storage.BipStructOutput]>;

    bipDiamondCut(
      bipId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[Storage.DiamondCutStructOutput]>;

    bipFacetCuts(
      bipId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[IDiamondCut.FacetCutStructOutput[]]>;

    commit(
      bip: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    emergencyCommit(
      bip: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    numberOfBips(overrides?: CallOverrides): Promise<[number]>;

    ownerPause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    ownerUnpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    pauseOrUnpause(
      bip: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    propose(
      _diamondCut: IDiamondCut.FacetCutStruct[],
      _init: string,
      _calldata: BytesLike,
      _pauseOrUnpause: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rootsFor(
      bipId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    unvote(
      bip: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unvoteAll(
      bip_list: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    vote(
      bip: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    voteAll(
      bip_list: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    voteUnvoteAll(
      bip_list: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "voted(address,uint32)"(
      account: string,
      bipId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "voted(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    allowancePods(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    approvePods(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    buyBeansAndCreatePodOrder(
      beanAmount: BigNumberish,
      buyBeanAmount: BigNumberish,
      pricePerPod: BigNumberish,
      maxPlaceInLine: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    buyBeansAndFillPodListing(
      l: Listing.PodListingStruct,
      beanAmount: BigNumberish,
      buyBeanAmount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cancelPodListing(
      index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cancelPodOrder(
      pricePerPod: BigNumberish,
      maxPlaceInLine: BigNumberish,
      toWallet: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimAndCreatePodOrder(
      beanAmount: BigNumberish,
      pricePerPod: BigNumberish,
      maxPlaceInLine: BigNumberish,
      claim: LibClaim.ClaimStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimAndFillPodListing(
      l: Listing.PodListingStruct,
      beanAmount: BigNumberish,
      claim: LibClaim.ClaimStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimBuyBeansAndCreatePodOrder(
      beanAmount: BigNumberish,
      buyBeanAmount: BigNumberish,
      pricePerPod: BigNumberish,
      maxPlaceInLine: BigNumberish,
      claim: LibClaim.ClaimStruct,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimBuyBeansAndFillPodListing(
      l: Listing.PodListingStruct,
      beanAmount: BigNumberish,
      buyBeanAmount: BigNumberish,
      claim: LibClaim.ClaimStruct,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createPodListing(
      index: BigNumberish,
      start: BigNumberish,
      amount: BigNumberish,
      pricePerPod: BigNumberish,
      maxHarvestableIndex: BigNumberish,
      toWallet: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createPodOrder(
      beanAmount: BigNumberish,
      pricePerPod: BigNumberish,
      maxPlaceInLine: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    fillPodListing(
      l: Listing.PodListingStruct,
      beanAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    fillPodOrder(
      o: Order.PodOrderStruct,
      index: BigNumberish,
      start: BigNumberish,
      amount: BigNumberish,
      toWallet: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    podListing(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    podOrder(
      account: string,
      pricePerPod: BigNumberish,
      maxPlaceInLine: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    podOrderById(
      id: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    transferPlot(
      sender: string,
      recipient: string,
      id: BigNumberish,
      start: BigNumberish,
      end: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    capture(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getTWAPPrices(overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string] & { owner_: string }>;

    transferOwnership(
      _newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    bean(overrides?: CallOverrides): Promise<[string]>;

    lockedReserves(overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

    pair(overrides?: CallOverrides): Promise<[string]>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    pegPair(overrides?: CallOverrides): Promise<[string]>;

    pegReserves(overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

    rain(overrides?: CallOverrides): Promise<[Storage.RainStructOutput]>;

    reserves(overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

    season(overrides?: CallOverrides): Promise<[number]>;

    seasonOfPlenty(
      _s: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    seasonTime(overrides?: CallOverrides): Promise<[number]>;

    sunrise(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    time(overrides?: CallOverrides): Promise<[Storage.SeasonStructOutput]>;

    weather(overrides?: CallOverrides): Promise<[Storage.WeatherStructOutput]>;

    withdrawSeasons(overrides?: CallOverrides): Promise<[number]>;

    yield(overrides?: CallOverrides): Promise<[number]>;

    addAndDepositLP(
      lp: BigNumberish,
      buyBeanAmount: BigNumberish,
      buyEthAmount: BigNumberish,
      al: LibMarket.AddLiquidityStruct,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balanceOfEth(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    balanceOfFarmableBeans(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { beans: BigNumber }>;

    balanceOfFarmableBeansV1(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { beans: BigNumber }>;

    balanceOfFarmableBeansV2(
      roots: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { beans: BigNumber }>;

    balanceOfFarmableBeansV3(
      account: string,
      accountStalk: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { beans: BigNumber }>;

    balanceOfFarmableSeeds(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    balanceOfFarmableStalk(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    balanceOfGrownStalk(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    balanceOfPlentyBase(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    balanceOfRainRoots(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    balanceOfRoots(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    balanceOfSeeds(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    balanceOfStalk(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    balanceOfUnclaimedRoots(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { uRoots: BigNumber }>;

    beanDeposit(
      account: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    beanWithdrawal(
      account: string,
      i: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    buyAndDepositBeans(
      amount: BigNumberish,
      buyAmount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimAddAndDepositLP(
      lp: BigNumberish,
      buyBeanAmount: BigNumberish,
      buyEthAmount: BigNumberish,
      al: LibMarket.AddLiquidityStruct,
      claim: LibClaim.ClaimStruct,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimAndDepositBeans(
      amount: BigNumberish,
      claim: LibClaim.ClaimStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimAndDepositLP(
      amount: BigNumberish,
      claim: LibClaim.ClaimStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimAndWithdrawBeans(
      crates: BigNumberish[],
      amounts: BigNumberish[],
      claim: LibClaim.ClaimStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimAndWithdrawLP(
      crates: BigNumberish[],
      amounts: BigNumberish[],
      claim: LibClaim.ClaimStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimBuyAndDepositBeans(
      amount: BigNumberish,
      buyAmount: BigNumberish,
      claim: LibClaim.ClaimStruct,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositBeans(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositLP(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    lastSeasonOfPlenty(overrides?: CallOverrides): Promise<[number]>;

    lastSupplyIncreases(
      account: string,
      overrides?: CallOverrides
    ): Promise<[number]>;

    lastUpdate(account: string, overrides?: CallOverrides): Promise<[number]>;

    legacySupplyIncrease(
      overrides?: CallOverrides
    ): Promise<[Storage.V1IncreaseSiloStructOutput]>;

    lpDeposit(
      account: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    lpWithdrawal(
      account: string,
      i: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    proposedUntil(
      account: string,
      overrides?: CallOverrides
    ): Promise<[number]>;

    seasonsOfPlenty(
      overrides?: CallOverrides
    ): Promise<[Storage.SeasonOfPlentyStructOutput]>;

    supplyIncreases(overrides?: CallOverrides): Promise<[number]>;

    totalDepositedBeans(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalDepositedLP(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalFarmableBeans(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalRoots(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalSeeds(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalStalk(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalWithdrawnBeans(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalWithdrawnLP(overrides?: CallOverrides): Promise<[BigNumber]>;

    unclaimedRoots(overrides?: CallOverrides): Promise<[BigNumber]>;

    updateSilo(
      account: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    votedUntil(account: string, overrides?: CallOverrides): Promise<[number]>;

    weth(overrides?: CallOverrides): Promise<[string]>;

    withdrawBeans(
      crates: BigNumberish[],
      amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawLP(
      crates: BigNumberish[],
      amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimTokenBySeason(
      token: string,
      season: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimTokenBySeasons(
      token: string,
      seasons: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimTokensBySeason(
      claims: SiloV2Facet.SeasonClaimStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimTokensBySeasons(
      claims: SiloV2Facet.SeasonsClaimStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deposit(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getDeposit(
      account: string,
      token: string,
      season: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    getTotalDeposited(
      token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTotalWithdrawn(
      token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getWithdrawal(
      account: string,
      token: string,
      season: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    tokenSettings(
      token: string,
      overrides?: CallOverrides
    ): Promise<[Storage.SiloSettingsStructOutput]>;

    whitelistToken(
      token: string,
      selector: BytesLike,
      stalk: BigNumberish,
      seeds: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawTokenBySeason(
      token: string,
      season: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawTokenBySeasons(
      token: string,
      seasons: BigNumberish[],
      amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawTokensBySeason(
      withdraws: SiloV2Facet.WithdrawSeasonStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawTokensBySeasons(
      withdraws: SiloV2Facet.WithdrawSeasonsStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  mockToBDV(
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  claim(
    c: LibClaim.ClaimStruct,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimAndUnwrapBeans(
    c: LibClaim.ClaimStruct,
    amount: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimBeans(
    withdrawals: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimEth(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimLP(
    withdrawals: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  harvest(
    plots: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeAndClaimLP(
    withdrawals: BigNumberish[],
    minBeanAmount: BigNumberish,
    minEthAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unwrapBeans(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  wrapBeans(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  wrappedBeans(user: string, overrides?: CallOverrides): Promise<BigNumber>;

  beansToPeg(overrides?: CallOverrides): Promise<BigNumber>;

  claimConvertAddAndDepositLP(
    lp: BigNumberish,
    al: LibMarket.AddLiquidityStruct,
    crates: BigNumberish[],
    amounts: BigNumberish[],
    claim: LibClaim.ClaimStruct,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  convertAddAndDepositLP(
    lp: BigNumberish,
    al: LibMarket.AddLiquidityStruct,
    crates: BigNumberish[],
    amounts: BigNumberish[],
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  convertDepositedBeans(
    beans: BigNumberish,
    minLP: BigNumberish,
    crates: BigNumberish[],
    amounts: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  convertDepositedLP(
    lp: BigNumberish,
    minBeans: BigNumberish,
    crates: BigNumberish[],
    amounts: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  lpToPeg(overrides?: CallOverrides): Promise<BigNumber>;

  curveToBDV(
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  diamondCut(
    _diamondCut: IDiamondCut.FacetCutStruct[],
    _init: string,
    _calldata: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  facetAddress(
    _functionSelector: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  facetAddresses(overrides?: CallOverrides): Promise<string[]>;

  facetFunctionSelectors(
    _facet: string,
    overrides?: CallOverrides
  ): Promise<string[]>;

  facets(overrides?: CallOverrides): Promise<IDiamondLoupe.FacetStructOutput[]>;

  supportsInterface(
    _interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  buyAndSowBeans(
    amount: BigNumberish,
    buyAmount: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  buyAndSowBeansWithMin(
    amount: BigNumberish,
    buyAmount: BigNumberish,
    minAmount: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimAndSowBeans(
    amount: BigNumberish,
    claim: LibClaim.ClaimStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimAndSowBeansWithMin(
    amount: BigNumberish,
    minAmount: BigNumberish,
    claim: LibClaim.ClaimStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimBuyAndSowBeans(
    amount: BigNumberish,
    buyAmount: BigNumberish,
    claim: LibClaim.ClaimStruct,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimBuyAndSowBeansWithMin(
    amount: BigNumberish,
    buyAmount: BigNumberish,
    minAmount: BigNumberish,
    claim: LibClaim.ClaimStruct,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  harvestableIndex(overrides?: CallOverrides): Promise<BigNumber>;

  harvestedIndex(overrides?: CallOverrides): Promise<BigNumber>;

  plot(
    account: string,
    plotId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  podIndex(overrides?: CallOverrides): Promise<BigNumber>;

  sowBeans(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sowBeansWithMin(
    amount: BigNumberish,
    minAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  totalHarvestable(overrides?: CallOverrides): Promise<BigNumber>;

  totalPods(overrides?: CallOverrides): Promise<BigNumber>;

  totalSoil(overrides?: CallOverrides): Promise<BigNumber>;

  totalUnripenedPods(overrides?: CallOverrides): Promise<BigNumber>;

  createFundraiser(
    payee: string,
    token: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  fund(
    id: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  fundingToken(id: BigNumberish, overrides?: CallOverrides): Promise<string>;

  fundraiser(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<Storage.FundraiserStructOutput>;

  numberOfFundraisers(overrides?: CallOverrides): Promise<number>;

  remainingFunding(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  totalFunding(id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  activeBips(overrides?: CallOverrides): Promise<number[]>;

  bip(
    bipId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<Storage.BipStructOutput>;

  bipDiamondCut(
    bipId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<Storage.DiamondCutStructOutput>;

  bipFacetCuts(
    bipId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<IDiamondCut.FacetCutStructOutput[]>;

  commit(
    bip: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  emergencyCommit(
    bip: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  numberOfBips(overrides?: CallOverrides): Promise<number>;

  ownerPause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  ownerUnpause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  pauseOrUnpause(
    bip: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  propose(
    _diamondCut: IDiamondCut.FacetCutStruct[],
    _init: string,
    _calldata: BytesLike,
    _pauseOrUnpause: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rootsFor(bipId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  unvote(
    bip: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unvoteAll(
    bip_list: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  vote(
    bip: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  voteAll(
    bip_list: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  voteUnvoteAll(
    bip_list: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "voted(address,uint32)"(
    account: string,
    bipId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "voted(address)"(
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  allowancePods(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approvePods(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  buyBeansAndCreatePodOrder(
    beanAmount: BigNumberish,
    buyBeanAmount: BigNumberish,
    pricePerPod: BigNumberish,
    maxPlaceInLine: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  buyBeansAndFillPodListing(
    l: Listing.PodListingStruct,
    beanAmount: BigNumberish,
    buyBeanAmount: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cancelPodListing(
    index: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cancelPodOrder(
    pricePerPod: BigNumberish,
    maxPlaceInLine: BigNumberish,
    toWallet: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimAndCreatePodOrder(
    beanAmount: BigNumberish,
    pricePerPod: BigNumberish,
    maxPlaceInLine: BigNumberish,
    claim: LibClaim.ClaimStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimAndFillPodListing(
    l: Listing.PodListingStruct,
    beanAmount: BigNumberish,
    claim: LibClaim.ClaimStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimBuyBeansAndCreatePodOrder(
    beanAmount: BigNumberish,
    buyBeanAmount: BigNumberish,
    pricePerPod: BigNumberish,
    maxPlaceInLine: BigNumberish,
    claim: LibClaim.ClaimStruct,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimBuyBeansAndFillPodListing(
    l: Listing.PodListingStruct,
    beanAmount: BigNumberish,
    buyBeanAmount: BigNumberish,
    claim: LibClaim.ClaimStruct,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createPodListing(
    index: BigNumberish,
    start: BigNumberish,
    amount: BigNumberish,
    pricePerPod: BigNumberish,
    maxHarvestableIndex: BigNumberish,
    toWallet: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createPodOrder(
    beanAmount: BigNumberish,
    pricePerPod: BigNumberish,
    maxPlaceInLine: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  fillPodListing(
    l: Listing.PodListingStruct,
    beanAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  fillPodOrder(
    o: Order.PodOrderStruct,
    index: BigNumberish,
    start: BigNumberish,
    amount: BigNumberish,
    toWallet: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  podListing(index: BigNumberish, overrides?: CallOverrides): Promise<string>;

  podOrder(
    account: string,
    pricePerPod: BigNumberish,
    maxPlaceInLine: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  podOrderById(id: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

  transferPlot(
    sender: string,
    recipient: string,
    id: BigNumberish,
    start: BigNumberish,
    end: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  capture(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getTWAPPrices(overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

  owner(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    _newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  bean(overrides?: CallOverrides): Promise<string>;

  lockedReserves(overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

  pair(overrides?: CallOverrides): Promise<string>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  pegPair(overrides?: CallOverrides): Promise<string>;

  pegReserves(overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

  rain(overrides?: CallOverrides): Promise<Storage.RainStructOutput>;

  reserves(overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

  season(overrides?: CallOverrides): Promise<number>;

  seasonOfPlenty(
    _s: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  seasonTime(overrides?: CallOverrides): Promise<number>;

  sunrise(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  time(overrides?: CallOverrides): Promise<Storage.SeasonStructOutput>;

  weather(overrides?: CallOverrides): Promise<Storage.WeatherStructOutput>;

  withdrawSeasons(overrides?: CallOverrides): Promise<number>;

  yield(overrides?: CallOverrides): Promise<number>;

  addAndDepositLP(
    lp: BigNumberish,
    buyBeanAmount: BigNumberish,
    buyEthAmount: BigNumberish,
    al: LibMarket.AddLiquidityStruct,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balanceOfEth(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  balanceOfFarmableBeans(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  balanceOfFarmableBeansV1(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  balanceOfFarmableBeansV2(
    roots: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  balanceOfFarmableBeansV3(
    account: string,
    accountStalk: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  balanceOfFarmableSeeds(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  balanceOfFarmableStalk(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  balanceOfGrownStalk(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  balanceOfPlentyBase(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  balanceOfRainRoots(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  balanceOfRoots(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  balanceOfSeeds(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  balanceOfStalk(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  balanceOfUnclaimedRoots(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  beanDeposit(
    account: string,
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  beanWithdrawal(
    account: string,
    i: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  buyAndDepositBeans(
    amount: BigNumberish,
    buyAmount: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimAddAndDepositLP(
    lp: BigNumberish,
    buyBeanAmount: BigNumberish,
    buyEthAmount: BigNumberish,
    al: LibMarket.AddLiquidityStruct,
    claim: LibClaim.ClaimStruct,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimAndDepositBeans(
    amount: BigNumberish,
    claim: LibClaim.ClaimStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimAndDepositLP(
    amount: BigNumberish,
    claim: LibClaim.ClaimStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimAndWithdrawBeans(
    crates: BigNumberish[],
    amounts: BigNumberish[],
    claim: LibClaim.ClaimStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimAndWithdrawLP(
    crates: BigNumberish[],
    amounts: BigNumberish[],
    claim: LibClaim.ClaimStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimBuyAndDepositBeans(
    amount: BigNumberish,
    buyAmount: BigNumberish,
    claim: LibClaim.ClaimStruct,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositBeans(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositLP(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  lastSeasonOfPlenty(overrides?: CallOverrides): Promise<number>;

  lastSupplyIncreases(
    account: string,
    overrides?: CallOverrides
  ): Promise<number>;

  lastUpdate(account: string, overrides?: CallOverrides): Promise<number>;

  legacySupplyIncrease(
    overrides?: CallOverrides
  ): Promise<Storage.V1IncreaseSiloStructOutput>;

  lpDeposit(
    account: string,
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  lpWithdrawal(
    account: string,
    i: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  proposedUntil(account: string, overrides?: CallOverrides): Promise<number>;

  seasonsOfPlenty(
    overrides?: CallOverrides
  ): Promise<Storage.SeasonOfPlentyStructOutput>;

  supplyIncreases(overrides?: CallOverrides): Promise<number>;

  totalDepositedBeans(overrides?: CallOverrides): Promise<BigNumber>;

  totalDepositedLP(overrides?: CallOverrides): Promise<BigNumber>;

  totalFarmableBeans(overrides?: CallOverrides): Promise<BigNumber>;

  totalRoots(overrides?: CallOverrides): Promise<BigNumber>;

  totalSeeds(overrides?: CallOverrides): Promise<BigNumber>;

  totalStalk(overrides?: CallOverrides): Promise<BigNumber>;

  totalWithdrawnBeans(overrides?: CallOverrides): Promise<BigNumber>;

  totalWithdrawnLP(overrides?: CallOverrides): Promise<BigNumber>;

  unclaimedRoots(overrides?: CallOverrides): Promise<BigNumber>;

  updateSilo(
    account: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  votedUntil(account: string, overrides?: CallOverrides): Promise<number>;

  weth(overrides?: CallOverrides): Promise<string>;

  withdrawBeans(
    crates: BigNumberish[],
    amounts: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawLP(
    crates: BigNumberish[],
    amounts: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimTokenBySeason(
    token: string,
    season: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimTokenBySeasons(
    token: string,
    seasons: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimTokensBySeason(
    claims: SiloV2Facet.SeasonClaimStruct[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimTokensBySeasons(
    claims: SiloV2Facet.SeasonsClaimStruct[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deposit(
    token: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getDeposit(
    account: string,
    token: string,
    season: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  getTotalDeposited(
    token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTotalWithdrawn(
    token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getWithdrawal(
    account: string,
    token: string,
    season: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  tokenSettings(
    token: string,
    overrides?: CallOverrides
  ): Promise<Storage.SiloSettingsStructOutput>;

  whitelistToken(
    token: string,
    selector: BytesLike,
    stalk: BigNumberish,
    seeds: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawTokenBySeason(
    token: string,
    season: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawTokenBySeasons(
    token: string,
    seasons: BigNumberish[],
    amounts: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawTokensBySeason(
    withdraws: SiloV2Facet.WithdrawSeasonStruct[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawTokensBySeasons(
    withdraws: SiloV2Facet.WithdrawSeasonsStruct[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    mockToBDV(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claim(
      c: LibClaim.ClaimStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimAndUnwrapBeans(
      c: LibClaim.ClaimStruct,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimBeans(
      withdrawals: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    claimEth(overrides?: CallOverrides): Promise<void>;

    claimLP(
      withdrawals: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    harvest(plots: BigNumberish[], overrides?: CallOverrides): Promise<void>;

    removeAndClaimLP(
      withdrawals: BigNumberish[],
      minBeanAmount: BigNumberish,
      minEthAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    unwrapBeans(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    wrapBeans(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    wrappedBeans(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    beansToPeg(overrides?: CallOverrides): Promise<BigNumber>;

    claimConvertAddAndDepositLP(
      lp: BigNumberish,
      al: LibMarket.AddLiquidityStruct,
      crates: BigNumberish[],
      amounts: BigNumberish[],
      claim: LibClaim.ClaimStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    convertAddAndDepositLP(
      lp: BigNumberish,
      al: LibMarket.AddLiquidityStruct,
      crates: BigNumberish[],
      amounts: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    convertDepositedBeans(
      beans: BigNumberish,
      minLP: BigNumberish,
      crates: BigNumberish[],
      amounts: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    convertDepositedLP(
      lp: BigNumberish,
      minBeans: BigNumberish,
      crates: BigNumberish[],
      amounts: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    lpToPeg(overrides?: CallOverrides): Promise<BigNumber>;

    curveToBDV(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    diamondCut(
      _diamondCut: IDiamondCut.FacetCutStruct[],
      _init: string,
      _calldata: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    facetAddress(
      _functionSelector: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    facetAddresses(overrides?: CallOverrides): Promise<string[]>;

    facetFunctionSelectors(
      _facet: string,
      overrides?: CallOverrides
    ): Promise<string[]>;

    facets(
      overrides?: CallOverrides
    ): Promise<IDiamondLoupe.FacetStructOutput[]>;

    supportsInterface(
      _interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    buyAndSowBeans(
      amount: BigNumberish,
      buyAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    buyAndSowBeansWithMin(
      amount: BigNumberish,
      buyAmount: BigNumberish,
      minAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimAndSowBeans(
      amount: BigNumberish,
      claim: LibClaim.ClaimStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimAndSowBeansWithMin(
      amount: BigNumberish,
      minAmount: BigNumberish,
      claim: LibClaim.ClaimStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimBuyAndSowBeans(
      amount: BigNumberish,
      buyAmount: BigNumberish,
      claim: LibClaim.ClaimStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimBuyAndSowBeansWithMin(
      amount: BigNumberish,
      buyAmount: BigNumberish,
      minAmount: BigNumberish,
      claim: LibClaim.ClaimStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    harvestableIndex(overrides?: CallOverrides): Promise<BigNumber>;

    harvestedIndex(overrides?: CallOverrides): Promise<BigNumber>;

    plot(
      account: string,
      plotId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    podIndex(overrides?: CallOverrides): Promise<BigNumber>;

    sowBeans(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sowBeansWithMin(
      amount: BigNumberish,
      minAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalHarvestable(overrides?: CallOverrides): Promise<BigNumber>;

    totalPods(overrides?: CallOverrides): Promise<BigNumber>;

    totalSoil(overrides?: CallOverrides): Promise<BigNumber>;

    totalUnripenedPods(overrides?: CallOverrides): Promise<BigNumber>;

    createFundraiser(
      payee: string,
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    fund(
      id: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fundingToken(id: BigNumberish, overrides?: CallOverrides): Promise<string>;

    fundraiser(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<Storage.FundraiserStructOutput>;

    numberOfFundraisers(overrides?: CallOverrides): Promise<number>;

    remainingFunding(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalFunding(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    activeBips(overrides?: CallOverrides): Promise<number[]>;

    bip(
      bipId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<Storage.BipStructOutput>;

    bipDiamondCut(
      bipId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<Storage.DiamondCutStructOutput>;

    bipFacetCuts(
      bipId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<IDiamondCut.FacetCutStructOutput[]>;

    commit(bip: BigNumberish, overrides?: CallOverrides): Promise<void>;

    emergencyCommit(
      bip: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    numberOfBips(overrides?: CallOverrides): Promise<number>;

    ownerPause(overrides?: CallOverrides): Promise<void>;

    ownerUnpause(overrides?: CallOverrides): Promise<void>;

    pauseOrUnpause(bip: BigNumberish, overrides?: CallOverrides): Promise<void>;

    propose(
      _diamondCut: IDiamondCut.FacetCutStruct[],
      _init: string,
      _calldata: BytesLike,
      _pauseOrUnpause: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    rootsFor(
      bipId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unvote(bip: BigNumberish, overrides?: CallOverrides): Promise<void>;

    unvoteAll(
      bip_list: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    vote(bip: BigNumberish, overrides?: CallOverrides): Promise<void>;

    voteAll(bip_list: BigNumberish[], overrides?: CallOverrides): Promise<void>;

    voteUnvoteAll(
      bip_list: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    "voted(address,uint32)"(
      account: string,
      bipId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "voted(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    allowancePods(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approvePods(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    buyBeansAndCreatePodOrder(
      beanAmount: BigNumberish,
      buyBeanAmount: BigNumberish,
      pricePerPod: BigNumberish,
      maxPlaceInLine: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    buyBeansAndFillPodListing(
      l: Listing.PodListingStruct,
      beanAmount: BigNumberish,
      buyBeanAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    cancelPodListing(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    cancelPodOrder(
      pricePerPod: BigNumberish,
      maxPlaceInLine: BigNumberish,
      toWallet: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    claimAndCreatePodOrder(
      beanAmount: BigNumberish,
      pricePerPod: BigNumberish,
      maxPlaceInLine: BigNumberish,
      claim: LibClaim.ClaimStruct,
      overrides?: CallOverrides
    ): Promise<string>;

    claimAndFillPodListing(
      l: Listing.PodListingStruct,
      beanAmount: BigNumberish,
      claim: LibClaim.ClaimStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    claimBuyBeansAndCreatePodOrder(
      beanAmount: BigNumberish,
      buyBeanAmount: BigNumberish,
      pricePerPod: BigNumberish,
      maxPlaceInLine: BigNumberish,
      claim: LibClaim.ClaimStruct,
      overrides?: CallOverrides
    ): Promise<string>;

    claimBuyBeansAndFillPodListing(
      l: Listing.PodListingStruct,
      beanAmount: BigNumberish,
      buyBeanAmount: BigNumberish,
      claim: LibClaim.ClaimStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    createPodListing(
      index: BigNumberish,
      start: BigNumberish,
      amount: BigNumberish,
      pricePerPod: BigNumberish,
      maxHarvestableIndex: BigNumberish,
      toWallet: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    createPodOrder(
      beanAmount: BigNumberish,
      pricePerPod: BigNumberish,
      maxPlaceInLine: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    fillPodListing(
      l: Listing.PodListingStruct,
      beanAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    fillPodOrder(
      o: Order.PodOrderStruct,
      index: BigNumberish,
      start: BigNumberish,
      amount: BigNumberish,
      toWallet: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    podListing(index: BigNumberish, overrides?: CallOverrides): Promise<string>;

    podOrder(
      account: string,
      pricePerPod: BigNumberish,
      maxPlaceInLine: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    podOrderById(id: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    transferPlot(
      sender: string,
      recipient: string,
      id: BigNumberish,
      start: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    capture(
      overrides?: CallOverrides
    ): Promise<[Decimal.D256StructOutput, Decimal.D256StructOutput]>;

    getTWAPPrices(overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

    owner(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      _newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    bean(overrides?: CallOverrides): Promise<string>;

    lockedReserves(overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

    pair(overrides?: CallOverrides): Promise<string>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    pegPair(overrides?: CallOverrides): Promise<string>;

    pegReserves(overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

    rain(overrides?: CallOverrides): Promise<Storage.RainStructOutput>;

    reserves(overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

    season(overrides?: CallOverrides): Promise<number>;

    seasonOfPlenty(
      _s: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    seasonTime(overrides?: CallOverrides): Promise<number>;

    sunrise(overrides?: CallOverrides): Promise<void>;

    time(overrides?: CallOverrides): Promise<Storage.SeasonStructOutput>;

    weather(overrides?: CallOverrides): Promise<Storage.WeatherStructOutput>;

    withdrawSeasons(overrides?: CallOverrides): Promise<number>;

    yield(overrides?: CallOverrides): Promise<number>;

    addAndDepositLP(
      lp: BigNumberish,
      buyBeanAmount: BigNumberish,
      buyEthAmount: BigNumberish,
      al: LibMarket.AddLiquidityStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    balanceOfEth(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfFarmableBeans(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfFarmableBeansV1(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfFarmableBeansV2(
      roots: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfFarmableBeansV3(
      account: string,
      accountStalk: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfFarmableSeeds(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfFarmableStalk(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfGrownStalk(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfPlentyBase(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfRainRoots(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfRoots(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfSeeds(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfStalk(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfUnclaimedRoots(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    beanDeposit(
      account: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    beanWithdrawal(
      account: string,
      i: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    buyAndDepositBeans(
      amount: BigNumberish,
      buyAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    claimAddAndDepositLP(
      lp: BigNumberish,
      buyBeanAmount: BigNumberish,
      buyEthAmount: BigNumberish,
      al: LibMarket.AddLiquidityStruct,
      claim: LibClaim.ClaimStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    claimAndDepositBeans(
      amount: BigNumberish,
      claim: LibClaim.ClaimStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    claimAndDepositLP(
      amount: BigNumberish,
      claim: LibClaim.ClaimStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    claimAndWithdrawBeans(
      crates: BigNumberish[],
      amounts: BigNumberish[],
      claim: LibClaim.ClaimStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    claimAndWithdrawLP(
      crates: BigNumberish[],
      amounts: BigNumberish[],
      claim: LibClaim.ClaimStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    claimBuyAndDepositBeans(
      amount: BigNumberish,
      buyAmount: BigNumberish,
      claim: LibClaim.ClaimStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    depositBeans(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    depositLP(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    lastSeasonOfPlenty(overrides?: CallOverrides): Promise<number>;

    lastSupplyIncreases(
      account: string,
      overrides?: CallOverrides
    ): Promise<number>;

    lastUpdate(account: string, overrides?: CallOverrides): Promise<number>;

    legacySupplyIncrease(
      overrides?: CallOverrides
    ): Promise<Storage.V1IncreaseSiloStructOutput>;

    lpDeposit(
      account: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    lpWithdrawal(
      account: string,
      i: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    proposedUntil(account: string, overrides?: CallOverrides): Promise<number>;

    seasonsOfPlenty(
      overrides?: CallOverrides
    ): Promise<Storage.SeasonOfPlentyStructOutput>;

    supplyIncreases(overrides?: CallOverrides): Promise<number>;

    totalDepositedBeans(overrides?: CallOverrides): Promise<BigNumber>;

    totalDepositedLP(overrides?: CallOverrides): Promise<BigNumber>;

    totalFarmableBeans(overrides?: CallOverrides): Promise<BigNumber>;

    totalRoots(overrides?: CallOverrides): Promise<BigNumber>;

    totalSeeds(overrides?: CallOverrides): Promise<BigNumber>;

    totalStalk(overrides?: CallOverrides): Promise<BigNumber>;

    totalWithdrawnBeans(overrides?: CallOverrides): Promise<BigNumber>;

    totalWithdrawnLP(overrides?: CallOverrides): Promise<BigNumber>;

    unclaimedRoots(overrides?: CallOverrides): Promise<BigNumber>;

    updateSilo(account: string, overrides?: CallOverrides): Promise<void>;

    votedUntil(account: string, overrides?: CallOverrides): Promise<number>;

    weth(overrides?: CallOverrides): Promise<string>;

    withdrawBeans(
      crates: BigNumberish[],
      amounts: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawLP(
      crates: BigNumberish[],
      amounts: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    claimTokenBySeason(
      token: string,
      season: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    claimTokenBySeasons(
      token: string,
      seasons: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    claimTokensBySeason(
      claims: SiloV2Facet.SeasonClaimStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    claimTokensBySeasons(
      claims: SiloV2Facet.SeasonsClaimStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    deposit(
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getDeposit(
      account: string,
      token: string,
      season: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    getTotalDeposited(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalWithdrawn(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getWithdrawal(
      account: string,
      token: string,
      season: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenSettings(
      token: string,
      overrides?: CallOverrides
    ): Promise<Storage.SiloSettingsStructOutput>;

    whitelistToken(
      token: string,
      selector: BytesLike,
      stalk: BigNumberish,
      seeds: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawTokenBySeason(
      token: string,
      season: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawTokenBySeasons(
      token: string,
      seasons: BigNumberish[],
      amounts: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawTokensBySeason(
      withdraws: SiloV2Facet.WithdrawSeasonStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawTokensBySeasons(
      withdraws: SiloV2Facet.WithdrawSeasonsStruct[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "BeanAllocation(address,uint256)"(
      account?: string | null,
      beans?: null
    ): BeanAllocation_address_uint256_EventFilter;
    "BeanAllocation(address,uint256)"(
      account?: string | null,
      beans?: null
    ): BeanAllocation_address_uint256_EventFilter;
    "BeanAllocation(address,uint256)"(
      account?: string | null,
      beans?: null
    ): BeanAllocation_address_uint256_EventFilter;

    "BeanClaim(address,uint32[],uint256)"(
      account?: string | null,
      withdrawals?: null,
      beans?: null
    ): BeanClaimEventFilter;
    BeanClaim(
      account?: string | null,
      withdrawals?: null,
      beans?: null
    ): BeanClaimEventFilter;

    "EtherClaim(address,uint256)"(
      account?: string | null,
      ethereum?: null
    ): EtherClaimEventFilter;
    EtherClaim(account?: string | null, ethereum?: null): EtherClaimEventFilter;

    "Harvest(address,uint256[],uint256)"(
      account?: string | null,
      plots?: null,
      beans?: null
    ): HarvestEventFilter;
    Harvest(
      account?: string | null,
      plots?: null,
      beans?: null
    ): HarvestEventFilter;

    "LPClaim(address,uint32[],uint256)"(
      account?: string | null,
      withdrawals?: null,
      lp?: null
    ): LPClaimEventFilter;
    LPClaim(
      account?: string | null,
      withdrawals?: null,
      lp?: null
    ): LPClaimEventFilter;

    "BeanRemove(address,uint32[],uint256[],uint256)"(
      account?: string | null,
      crates?: null,
      crateBeans?: null,
      beans?: null
    ): BeanRemove_address_uint32_array_uint256_array_uint256_EventFilter;
    "BeanRemove(address,uint32[],uint256[],uint256)"(
      account?: string | null,
      crates?: null,
      crateBeans?: null,
      beans?: null
    ): BeanRemove_address_uint32_array_uint256_array_uint256_EventFilter;
    "LPDeposit(address,uint256,uint256,uint256)"(
      account?: string | null,
      season?: null,
      lp?: null,
      seeds?: null
    ): LPDeposit_address_uint256_uint256_uint256_EventFilter;
    "LPDeposit(address,uint256,uint256,uint256)"(
      account?: string | null,
      season?: null,
      lp?: null,
      seeds?: null
    ): LPDeposit_address_uint256_uint256_uint256_EventFilter;
    "LPRemove(address,uint32[],uint256[],uint256)"(
      account?: string | null,
      crates?: null,
      crateLP?: null,
      lp?: null
    ): LPRemove_address_uint32_array_uint256_array_uint256_EventFilter;
    "LPRemove(address,uint32[],uint256[],uint256)"(
      account?: string | null,
      crates?: null,
      crateLP?: null,
      lp?: null
    ): LPRemove_address_uint32_array_uint256_array_uint256_EventFilter;

    "DiamondCut(tuple[],address,bytes)"(
      _diamondCut?: null,
      _init?: null,
      _calldata?: null
    ): DiamondCutEventFilter;
    DiamondCut(
      _diamondCut?: null,
      _init?: null,
      _calldata?: null
    ): DiamondCutEventFilter;

    "Sow(address,uint256,uint256,uint256)"(
      account?: string | null,
      index?: null,
      beans?: null,
      pods?: null
    ): Sow_address_uint256_uint256_uint256_EventFilter;
    "Sow(address,uint256,uint256,uint256)"(
      account?: string | null,
      index?: null,
      beans?: null,
      pods?: null
    ): Sow_address_uint256_uint256_uint256_EventFilter;

    "CompleteFundraiser(uint32)"(
      id?: BigNumberish | null
    ): CompleteFundraiserEventFilter;
    CompleteFundraiser(id?: BigNumberish | null): CompleteFundraiserEventFilter;

    "CreateFundraiser(uint32,address,address,uint256)"(
      id?: BigNumberish | null,
      fundraiser?: null,
      token?: null,
      amount?: null
    ): CreateFundraiserEventFilter;
    CreateFundraiser(
      id?: BigNumberish | null,
      fundraiser?: null,
      token?: null,
      amount?: null
    ): CreateFundraiserEventFilter;

    "FundFundraiser(address,uint32,uint256)"(
      account?: string | null,
      id?: BigNumberish | null,
      amount?: null
    ): FundFundraiserEventFilter;
    FundFundraiser(
      account?: string | null,
      id?: BigNumberish | null,
      amount?: null
    ): FundFundraiserEventFilter;

    "Commit(address,uint32)"(
      account?: string | null,
      bip?: BigNumberish | null
    ): CommitEventFilter;
    Commit(
      account?: string | null,
      bip?: BigNumberish | null
    ): CommitEventFilter;

    "Incentivization(address,uint256)"(
      account?: string | null,
      beans?: null
    ): Incentivization_address_uint256_EventFilter;
    "Incentivization(address,uint256)"(
      account?: string | null,
      beans?: null
    ): Incentivization_address_uint256_EventFilter;

    "Pause(address,uint256)"(
      account?: null,
      timestamp?: null
    ): PauseEventFilter;
    Pause(account?: null, timestamp?: null): PauseEventFilter;

    "Proposal(address,uint32,uint256,uint256)"(
      account?: string | null,
      bip?: BigNumberish | null,
      start?: BigNumberish | null,
      period?: null
    ): ProposalEventFilter;
    Proposal(
      account?: string | null,
      bip?: BigNumberish | null,
      start?: BigNumberish | null,
      period?: null
    ): ProposalEventFilter;

    "Unpause(address,uint256,uint256)"(
      account?: null,
      timestamp?: null,
      timePassed?: null
    ): UnpauseEventFilter;
    Unpause(
      account?: null,
      timestamp?: null,
      timePassed?: null
    ): UnpauseEventFilter;

    "Unvote(address,uint32,uint256)"(
      account?: string | null,
      bip?: BigNumberish | null,
      roots?: null
    ): UnvoteEventFilter;
    Unvote(
      account?: string | null,
      bip?: BigNumberish | null,
      roots?: null
    ): UnvoteEventFilter;

    "Vote(address,uint32,uint256)"(
      account?: string | null,
      bip?: BigNumberish | null,
      roots?: null
    ): VoteEventFilter;
    Vote(
      account?: string | null,
      bip?: BigNumberish | null,
      roots?: null
    ): VoteEventFilter;

    "VoteList(address,uint32[],bool[],uint256)"(
      account?: string | null,
      bips?: null,
      votes?: null,
      roots?: null
    ): VoteListEventFilter;
    VoteList(
      account?: string | null,
      bips?: null,
      votes?: null,
      roots?: null
    ): VoteListEventFilter;

    "PlotTransfer(address,address,uint256,uint256)"(
      from?: string | null,
      to?: string | null,
      id?: BigNumberish | null,
      pods?: null
    ): PlotTransferEventFilter;
    PlotTransfer(
      from?: string | null,
      to?: string | null,
      id?: BigNumberish | null,
      pods?: null
    ): PlotTransferEventFilter;

    "PodApproval(address,address,uint256)"(
      owner?: string | null,
      spender?: string | null,
      pods?: null
    ): PodApprovalEventFilter;
    PodApproval(
      owner?: string | null,
      spender?: string | null,
      pods?: null
    ): PodApprovalEventFilter;

    "PodListingCancelled(address,uint256)"(
      account?: string | null,
      index?: BigNumberish | null
    ): PodListingCancelledEventFilter;
    PodListingCancelled(
      account?: string | null,
      index?: BigNumberish | null
    ): PodListingCancelledEventFilter;

    "PodListingCreated(address,uint256,uint256,uint256,uint24,uint256,bool)"(
      account?: string | null,
      index?: null,
      start?: null,
      amount?: null,
      pricePerPod?: null,
      maxHarvestableIndex?: null,
      toWallet?: null
    ): PodListingCreatedEventFilter;
    PodListingCreated(
      account?: string | null,
      index?: null,
      start?: null,
      amount?: null,
      pricePerPod?: null,
      maxHarvestableIndex?: null,
      toWallet?: null
    ): PodListingCreatedEventFilter;

    "PodListingFilled(address,address,uint256,uint256,uint256)"(
      from?: string | null,
      to?: string | null,
      index?: null,
      start?: null,
      amount?: null
    ): PodListingFilledEventFilter;
    PodListingFilled(
      from?: string | null,
      to?: string | null,
      index?: null,
      start?: null,
      amount?: null
    ): PodListingFilledEventFilter;

    "PodOrderCancelled(address,bytes32)"(
      account?: string | null,
      id?: null
    ): PodOrderCancelledEventFilter;
    PodOrderCancelled(
      account?: string | null,
      id?: null
    ): PodOrderCancelledEventFilter;

    "PodOrderCreated(address,bytes32,uint256,uint24,uint256)"(
      account?: string | null,
      id?: null,
      amount?: null,
      pricePerPod?: null,
      maxPlaceInLine?: null
    ): PodOrderCreatedEventFilter;
    PodOrderCreated(
      account?: string | null,
      id?: null,
      amount?: null,
      pricePerPod?: null,
      maxPlaceInLine?: null
    ): PodOrderCreatedEventFilter;

    "PodOrderFilled(address,address,bytes32,uint256,uint256,uint256)"(
      from?: string | null,
      to?: string | null,
      id?: null,
      index?: null,
      start?: null,
      amount?: null
    ): PodOrderFilledEventFilter;
    PodOrderFilled(
      from?: string | null,
      to?: string | null,
      id?: null,
      index?: null,
      start?: null,
      amount?: null
    ): PodOrderFilledEventFilter;

    "SeasonOfPlenty(uint256,uint256,uint256)"(
      season?: BigNumberish | null,
      eth?: null,
      harvestable?: null
    ): SeasonOfPlentyEventFilter;
    SeasonOfPlenty(
      season?: BigNumberish | null,
      eth?: null,
      harvestable?: null
    ): SeasonOfPlentyEventFilter;

    "SeasonSnapshot(uint32,uint256,uint256,uint256,uint256,uint256,uint256)"(
      season?: BigNumberish | null,
      price?: null,
      supply?: null,
      stalk?: null,
      seeds?: null,
      podIndex?: null,
      harvestableIndex?: null
    ): SeasonSnapshotEventFilter;
    SeasonSnapshot(
      season?: BigNumberish | null,
      price?: null,
      supply?: null,
      stalk?: null,
      seeds?: null,
      podIndex?: null,
      harvestableIndex?: null
    ): SeasonSnapshotEventFilter;

    "Sunrise(uint256)"(season?: BigNumberish | null): SunriseEventFilter;
    Sunrise(season?: BigNumberish | null): SunriseEventFilter;

    "SupplyDecrease(uint256,uint256,int256)"(
      season?: BigNumberish | null,
      price?: null,
      newSoil?: null
    ): SupplyDecreaseEventFilter;
    SupplyDecrease(
      season?: BigNumberish | null,
      price?: null,
      newSoil?: null
    ): SupplyDecreaseEventFilter;

    "SupplyIncrease(uint256,uint256,uint256,uint256,int256)"(
      season?: BigNumberish | null,
      price?: null,
      newHarvestable?: null,
      newSilo?: null,
      newSoil?: null
    ): SupplyIncreaseEventFilter;
    SupplyIncrease(
      season?: BigNumberish | null,
      price?: null,
      newHarvestable?: null,
      newSilo?: null,
      newSoil?: null
    ): SupplyIncreaseEventFilter;

    "SupplyNeutral(uint256,int256)"(
      season?: BigNumberish | null,
      newSoil?: null
    ): SupplyNeutralEventFilter;
    SupplyNeutral(
      season?: BigNumberish | null,
      newSoil?: null
    ): SupplyNeutralEventFilter;

    "WeatherChange(uint256,uint256,int8)"(
      season?: BigNumberish | null,
      caseId?: null,
      change?: null
    ): WeatherChangeEventFilter;
    WeatherChange(
      season?: BigNumberish | null,
      caseId?: null,
      change?: null
    ): WeatherChangeEventFilter;

    "BeanDeposit(address,uint256,uint256)"(
      account?: string | null,
      season?: null,
      beans?: null
    ): BeanDepositEventFilter;
    BeanDeposit(
      account?: string | null,
      season?: null,
      beans?: null
    ): BeanDepositEventFilter;

    "BeanWithdraw(address,uint256,uint256)"(
      account?: string | null,
      season?: null,
      beans?: null
    ): BeanWithdrawEventFilter;
    BeanWithdraw(
      account?: string | null,
      season?: null,
      beans?: null
    ): BeanWithdrawEventFilter;

    "LPWithdraw(address,uint256,uint256)"(
      account?: string | null,
      season?: null,
      lp?: null
    ): LPWithdrawEventFilter;
    LPWithdraw(
      account?: string | null,
      season?: null,
      lp?: null
    ): LPWithdrawEventFilter;

    "ClaimSeason(address,address,uint32,uint256)"(
      account?: string | null,
      token?: string | null,
      season?: null,
      amount?: null
    ): ClaimSeasonEventFilter;
    ClaimSeason(
      account?: string | null,
      token?: string | null,
      season?: null,
      amount?: null
    ): ClaimSeasonEventFilter;

    "ClaimSeasons(address,address,uint32[],uint256)"(
      account?: string | null,
      token?: string | null,
      seasons?: null,
      amount?: null
    ): ClaimSeasonsEventFilter;
    ClaimSeasons(
      account?: string | null,
      token?: string | null,
      seasons?: null,
      amount?: null
    ): ClaimSeasonsEventFilter;

    "Deposit(address,address,uint256,uint256,uint256)"(
      account?: string | null,
      token?: string | null,
      season?: null,
      amount?: null,
      bdv?: null
    ): DepositEventFilter;
    Deposit(
      account?: string | null,
      token?: string | null,
      season?: null,
      amount?: null,
      bdv?: null
    ): DepositEventFilter;

    "RemoveSeason(address,address,uint32,uint256)"(
      account?: string | null,
      token?: string | null,
      season?: null,
      amount?: null
    ): RemoveSeasonEventFilter;
    RemoveSeason(
      account?: string | null,
      token?: string | null,
      season?: null,
      amount?: null
    ): RemoveSeasonEventFilter;

    "RemoveSeasons(address,address,uint32[],uint256[],uint256)"(
      account?: string | null,
      token?: string | null,
      seasons?: null,
      amounts?: null,
      amount?: null
    ): RemoveSeasonsEventFilter;
    RemoveSeasons(
      account?: string | null,
      token?: string | null,
      seasons?: null,
      amounts?: null,
      amount?: null
    ): RemoveSeasonsEventFilter;

    "Withdraw(address,address,uint32,uint256)"(
      account?: string | null,
      token?: string | null,
      season?: null,
      amount?: null
    ): WithdrawEventFilter;
    Withdraw(
      account?: string | null,
      token?: string | null,
      season?: null,
      amount?: null
    ): WithdrawEventFilter;
  };

  estimateGas: {
    mockToBDV(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claim(
      c: LibClaim.ClaimStruct,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimAndUnwrapBeans(
      c: LibClaim.ClaimStruct,
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimBeans(
      withdrawals: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimEth(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimLP(
      withdrawals: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    harvest(
      plots: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeAndClaimLP(
      withdrawals: BigNumberish[],
      minBeanAmount: BigNumberish,
      minEthAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unwrapBeans(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    wrapBeans(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    wrappedBeans(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    beansToPeg(overrides?: CallOverrides): Promise<BigNumber>;

    claimConvertAddAndDepositLP(
      lp: BigNumberish,
      al: LibMarket.AddLiquidityStruct,
      crates: BigNumberish[],
      amounts: BigNumberish[],
      claim: LibClaim.ClaimStruct,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    convertAddAndDepositLP(
      lp: BigNumberish,
      al: LibMarket.AddLiquidityStruct,
      crates: BigNumberish[],
      amounts: BigNumberish[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    convertDepositedBeans(
      beans: BigNumberish,
      minLP: BigNumberish,
      crates: BigNumberish[],
      amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    convertDepositedLP(
      lp: BigNumberish,
      minBeans: BigNumberish,
      crates: BigNumberish[],
      amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    lpToPeg(overrides?: CallOverrides): Promise<BigNumber>;

    curveToBDV(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    diamondCut(
      _diamondCut: IDiamondCut.FacetCutStruct[],
      _init: string,
      _calldata: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    facetAddress(
      _functionSelector: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    facetAddresses(overrides?: CallOverrides): Promise<BigNumber>;

    facetFunctionSelectors(
      _facet: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    facets(overrides?: CallOverrides): Promise<BigNumber>;

    supportsInterface(
      _interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    buyAndSowBeans(
      amount: BigNumberish,
      buyAmount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    buyAndSowBeansWithMin(
      amount: BigNumberish,
      buyAmount: BigNumberish,
      minAmount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimAndSowBeans(
      amount: BigNumberish,
      claim: LibClaim.ClaimStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimAndSowBeansWithMin(
      amount: BigNumberish,
      minAmount: BigNumberish,
      claim: LibClaim.ClaimStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimBuyAndSowBeans(
      amount: BigNumberish,
      buyAmount: BigNumberish,
      claim: LibClaim.ClaimStruct,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimBuyAndSowBeansWithMin(
      amount: BigNumberish,
      buyAmount: BigNumberish,
      minAmount: BigNumberish,
      claim: LibClaim.ClaimStruct,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    harvestableIndex(overrides?: CallOverrides): Promise<BigNumber>;

    harvestedIndex(overrides?: CallOverrides): Promise<BigNumber>;

    plot(
      account: string,
      plotId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    podIndex(overrides?: CallOverrides): Promise<BigNumber>;

    sowBeans(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sowBeansWithMin(
      amount: BigNumberish,
      minAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    totalHarvestable(overrides?: CallOverrides): Promise<BigNumber>;

    totalPods(overrides?: CallOverrides): Promise<BigNumber>;

    totalSoil(overrides?: CallOverrides): Promise<BigNumber>;

    totalUnripenedPods(overrides?: CallOverrides): Promise<BigNumber>;

    createFundraiser(
      payee: string,
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    fund(
      id: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    fundingToken(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fundraiser(id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    numberOfFundraisers(overrides?: CallOverrides): Promise<BigNumber>;

    remainingFunding(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalFunding(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    activeBips(overrides?: CallOverrides): Promise<BigNumber>;

    bip(bipId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    bipDiamondCut(
      bipId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bipFacetCuts(
      bipId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    commit(
      bip: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    emergencyCommit(
      bip: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    numberOfBips(overrides?: CallOverrides): Promise<BigNumber>;

    ownerPause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    ownerUnpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    pauseOrUnpause(
      bip: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    propose(
      _diamondCut: IDiamondCut.FacetCutStruct[],
      _init: string,
      _calldata: BytesLike,
      _pauseOrUnpause: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rootsFor(
      bipId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unvote(
      bip: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unvoteAll(
      bip_list: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    vote(
      bip: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    voteAll(
      bip_list: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    voteUnvoteAll(
      bip_list: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "voted(address,uint32)"(
      account: string,
      bipId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "voted(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    allowancePods(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approvePods(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    buyBeansAndCreatePodOrder(
      beanAmount: BigNumberish,
      buyBeanAmount: BigNumberish,
      pricePerPod: BigNumberish,
      maxPlaceInLine: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    buyBeansAndFillPodListing(
      l: Listing.PodListingStruct,
      beanAmount: BigNumberish,
      buyBeanAmount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cancelPodListing(
      index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cancelPodOrder(
      pricePerPod: BigNumberish,
      maxPlaceInLine: BigNumberish,
      toWallet: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimAndCreatePodOrder(
      beanAmount: BigNumberish,
      pricePerPod: BigNumberish,
      maxPlaceInLine: BigNumberish,
      claim: LibClaim.ClaimStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimAndFillPodListing(
      l: Listing.PodListingStruct,
      beanAmount: BigNumberish,
      claim: LibClaim.ClaimStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimBuyBeansAndCreatePodOrder(
      beanAmount: BigNumberish,
      buyBeanAmount: BigNumberish,
      pricePerPod: BigNumberish,
      maxPlaceInLine: BigNumberish,
      claim: LibClaim.ClaimStruct,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimBuyBeansAndFillPodListing(
      l: Listing.PodListingStruct,
      beanAmount: BigNumberish,
      buyBeanAmount: BigNumberish,
      claim: LibClaim.ClaimStruct,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createPodListing(
      index: BigNumberish,
      start: BigNumberish,
      amount: BigNumberish,
      pricePerPod: BigNumberish,
      maxHarvestableIndex: BigNumberish,
      toWallet: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createPodOrder(
      beanAmount: BigNumberish,
      pricePerPod: BigNumberish,
      maxPlaceInLine: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    fillPodListing(
      l: Listing.PodListingStruct,
      beanAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    fillPodOrder(
      o: Order.PodOrderStruct,
      index: BigNumberish,
      start: BigNumberish,
      amount: BigNumberish,
      toWallet: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    podListing(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    podOrder(
      account: string,
      pricePerPod: BigNumberish,
      maxPlaceInLine: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    podOrderById(id: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    transferPlot(
      sender: string,
      recipient: string,
      id: BigNumberish,
      start: BigNumberish,
      end: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    capture(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getTWAPPrices(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      _newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    bean(overrides?: CallOverrides): Promise<BigNumber>;

    lockedReserves(overrides?: CallOverrides): Promise<BigNumber>;

    pair(overrides?: CallOverrides): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    pegPair(overrides?: CallOverrides): Promise<BigNumber>;

    pegReserves(overrides?: CallOverrides): Promise<BigNumber>;

    rain(overrides?: CallOverrides): Promise<BigNumber>;

    reserves(overrides?: CallOverrides): Promise<BigNumber>;

    season(overrides?: CallOverrides): Promise<BigNumber>;

    seasonOfPlenty(
      _s: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    seasonTime(overrides?: CallOverrides): Promise<BigNumber>;

    sunrise(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    time(overrides?: CallOverrides): Promise<BigNumber>;

    weather(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawSeasons(overrides?: CallOverrides): Promise<BigNumber>;

    yield(overrides?: CallOverrides): Promise<BigNumber>;

    addAndDepositLP(
      lp: BigNumberish,
      buyBeanAmount: BigNumberish,
      buyEthAmount: BigNumberish,
      al: LibMarket.AddLiquidityStruct,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balanceOfEth(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfFarmableBeans(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfFarmableBeansV1(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfFarmableBeansV2(
      roots: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfFarmableBeansV3(
      account: string,
      accountStalk: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfFarmableSeeds(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfFarmableStalk(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfGrownStalk(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfPlentyBase(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfRainRoots(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfRoots(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfSeeds(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfStalk(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfUnclaimedRoots(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    beanDeposit(
      account: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    beanWithdrawal(
      account: string,
      i: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    buyAndDepositBeans(
      amount: BigNumberish,
      buyAmount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimAddAndDepositLP(
      lp: BigNumberish,
      buyBeanAmount: BigNumberish,
      buyEthAmount: BigNumberish,
      al: LibMarket.AddLiquidityStruct,
      claim: LibClaim.ClaimStruct,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimAndDepositBeans(
      amount: BigNumberish,
      claim: LibClaim.ClaimStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimAndDepositLP(
      amount: BigNumberish,
      claim: LibClaim.ClaimStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimAndWithdrawBeans(
      crates: BigNumberish[],
      amounts: BigNumberish[],
      claim: LibClaim.ClaimStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimAndWithdrawLP(
      crates: BigNumberish[],
      amounts: BigNumberish[],
      claim: LibClaim.ClaimStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimBuyAndDepositBeans(
      amount: BigNumberish,
      buyAmount: BigNumberish,
      claim: LibClaim.ClaimStruct,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositBeans(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositLP(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    lastSeasonOfPlenty(overrides?: CallOverrides): Promise<BigNumber>;

    lastSupplyIncreases(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lastUpdate(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    legacySupplyIncrease(overrides?: CallOverrides): Promise<BigNumber>;

    lpDeposit(
      account: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lpWithdrawal(
      account: string,
      i: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    proposedUntil(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    seasonsOfPlenty(overrides?: CallOverrides): Promise<BigNumber>;

    supplyIncreases(overrides?: CallOverrides): Promise<BigNumber>;

    totalDepositedBeans(overrides?: CallOverrides): Promise<BigNumber>;

    totalDepositedLP(overrides?: CallOverrides): Promise<BigNumber>;

    totalFarmableBeans(overrides?: CallOverrides): Promise<BigNumber>;

    totalRoots(overrides?: CallOverrides): Promise<BigNumber>;

    totalSeeds(overrides?: CallOverrides): Promise<BigNumber>;

    totalStalk(overrides?: CallOverrides): Promise<BigNumber>;

    totalWithdrawnBeans(overrides?: CallOverrides): Promise<BigNumber>;

    totalWithdrawnLP(overrides?: CallOverrides): Promise<BigNumber>;

    unclaimedRoots(overrides?: CallOverrides): Promise<BigNumber>;

    updateSilo(
      account: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    votedUntil(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    weth(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawBeans(
      crates: BigNumberish[],
      amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawLP(
      crates: BigNumberish[],
      amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimTokenBySeason(
      token: string,
      season: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimTokenBySeasons(
      token: string,
      seasons: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimTokensBySeason(
      claims: SiloV2Facet.SeasonClaimStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimTokensBySeasons(
      claims: SiloV2Facet.SeasonsClaimStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deposit(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getDeposit(
      account: string,
      token: string,
      season: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalDeposited(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalWithdrawn(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getWithdrawal(
      account: string,
      token: string,
      season: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenSettings(token: string, overrides?: CallOverrides): Promise<BigNumber>;

    whitelistToken(
      token: string,
      selector: BytesLike,
      stalk: BigNumberish,
      seeds: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawTokenBySeason(
      token: string,
      season: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawTokenBySeasons(
      token: string,
      seasons: BigNumberish[],
      amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawTokensBySeason(
      withdraws: SiloV2Facet.WithdrawSeasonStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawTokensBySeasons(
      withdraws: SiloV2Facet.WithdrawSeasonsStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    mockToBDV(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claim(
      c: LibClaim.ClaimStruct,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimAndUnwrapBeans(
      c: LibClaim.ClaimStruct,
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimBeans(
      withdrawals: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimEth(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimLP(
      withdrawals: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    harvest(
      plots: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeAndClaimLP(
      withdrawals: BigNumberish[],
      minBeanAmount: BigNumberish,
      minEthAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unwrapBeans(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    wrapBeans(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    wrappedBeans(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    beansToPeg(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    claimConvertAddAndDepositLP(
      lp: BigNumberish,
      al: LibMarket.AddLiquidityStruct,
      crates: BigNumberish[],
      amounts: BigNumberish[],
      claim: LibClaim.ClaimStruct,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    convertAddAndDepositLP(
      lp: BigNumberish,
      al: LibMarket.AddLiquidityStruct,
      crates: BigNumberish[],
      amounts: BigNumberish[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    convertDepositedBeans(
      beans: BigNumberish,
      minLP: BigNumberish,
      crates: BigNumberish[],
      amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    convertDepositedLP(
      lp: BigNumberish,
      minBeans: BigNumberish,
      crates: BigNumberish[],
      amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    lpToPeg(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    curveToBDV(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    diamondCut(
      _diamondCut: IDiamondCut.FacetCutStruct[],
      _init: string,
      _calldata: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    facetAddress(
      _functionSelector: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    facetAddresses(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    facetFunctionSelectors(
      _facet: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    facets(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    supportsInterface(
      _interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    buyAndSowBeans(
      amount: BigNumberish,
      buyAmount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    buyAndSowBeansWithMin(
      amount: BigNumberish,
      buyAmount: BigNumberish,
      minAmount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimAndSowBeans(
      amount: BigNumberish,
      claim: LibClaim.ClaimStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimAndSowBeansWithMin(
      amount: BigNumberish,
      minAmount: BigNumberish,
      claim: LibClaim.ClaimStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimBuyAndSowBeans(
      amount: BigNumberish,
      buyAmount: BigNumberish,
      claim: LibClaim.ClaimStruct,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimBuyAndSowBeansWithMin(
      amount: BigNumberish,
      buyAmount: BigNumberish,
      minAmount: BigNumberish,
      claim: LibClaim.ClaimStruct,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    harvestableIndex(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    harvestedIndex(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    plot(
      account: string,
      plotId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    podIndex(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sowBeans(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sowBeansWithMin(
      amount: BigNumberish,
      minAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    totalHarvestable(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalPods(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSoil(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalUnripenedPods(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createFundraiser(
      payee: string,
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    fund(
      id: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    fundingToken(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fundraiser(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    numberOfFundraisers(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    remainingFunding(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalFunding(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    activeBips(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bip(
      bipId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bipDiamondCut(
      bipId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bipFacetCuts(
      bipId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    commit(
      bip: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    emergencyCommit(
      bip: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    numberOfBips(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerPause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    ownerUnpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    pauseOrUnpause(
      bip: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    propose(
      _diamondCut: IDiamondCut.FacetCutStruct[],
      _init: string,
      _calldata: BytesLike,
      _pauseOrUnpause: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rootsFor(
      bipId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unvote(
      bip: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unvoteAll(
      bip_list: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    vote(
      bip: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    voteAll(
      bip_list: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    voteUnvoteAll(
      bip_list: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "voted(address,uint32)"(
      account: string,
      bipId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "voted(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allowancePods(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approvePods(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    buyBeansAndCreatePodOrder(
      beanAmount: BigNumberish,
      buyBeanAmount: BigNumberish,
      pricePerPod: BigNumberish,
      maxPlaceInLine: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    buyBeansAndFillPodListing(
      l: Listing.PodListingStruct,
      beanAmount: BigNumberish,
      buyBeanAmount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cancelPodListing(
      index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cancelPodOrder(
      pricePerPod: BigNumberish,
      maxPlaceInLine: BigNumberish,
      toWallet: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimAndCreatePodOrder(
      beanAmount: BigNumberish,
      pricePerPod: BigNumberish,
      maxPlaceInLine: BigNumberish,
      claim: LibClaim.ClaimStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimAndFillPodListing(
      l: Listing.PodListingStruct,
      beanAmount: BigNumberish,
      claim: LibClaim.ClaimStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimBuyBeansAndCreatePodOrder(
      beanAmount: BigNumberish,
      buyBeanAmount: BigNumberish,
      pricePerPod: BigNumberish,
      maxPlaceInLine: BigNumberish,
      claim: LibClaim.ClaimStruct,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimBuyBeansAndFillPodListing(
      l: Listing.PodListingStruct,
      beanAmount: BigNumberish,
      buyBeanAmount: BigNumberish,
      claim: LibClaim.ClaimStruct,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createPodListing(
      index: BigNumberish,
      start: BigNumberish,
      amount: BigNumberish,
      pricePerPod: BigNumberish,
      maxHarvestableIndex: BigNumberish,
      toWallet: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createPodOrder(
      beanAmount: BigNumberish,
      pricePerPod: BigNumberish,
      maxPlaceInLine: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    fillPodListing(
      l: Listing.PodListingStruct,
      beanAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    fillPodOrder(
      o: Order.PodOrderStruct,
      index: BigNumberish,
      start: BigNumberish,
      amount: BigNumberish,
      toWallet: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    podListing(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    podOrder(
      account: string,
      pricePerPod: BigNumberish,
      maxPlaceInLine: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    podOrderById(
      id: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferPlot(
      sender: string,
      recipient: string,
      id: BigNumberish,
      start: BigNumberish,
      end: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    capture(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getTWAPPrices(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      _newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    bean(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lockedReserves(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pair(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pegPair(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pegReserves(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rain(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    reserves(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    season(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    seasonOfPlenty(
      _s: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    seasonTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sunrise(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    time(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    weather(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawSeasons(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    yield(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addAndDepositLP(
      lp: BigNumberish,
      buyBeanAmount: BigNumberish,
      buyEthAmount: BigNumberish,
      al: LibMarket.AddLiquidityStruct,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balanceOfEth(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOfFarmableBeans(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOfFarmableBeansV1(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOfFarmableBeansV2(
      roots: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOfFarmableBeansV3(
      account: string,
      accountStalk: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOfFarmableSeeds(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOfFarmableStalk(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOfGrownStalk(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOfPlentyBase(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOfRainRoots(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOfRoots(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOfSeeds(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOfStalk(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOfUnclaimedRoots(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    beanDeposit(
      account: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    beanWithdrawal(
      account: string,
      i: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    buyAndDepositBeans(
      amount: BigNumberish,
      buyAmount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimAddAndDepositLP(
      lp: BigNumberish,
      buyBeanAmount: BigNumberish,
      buyEthAmount: BigNumberish,
      al: LibMarket.AddLiquidityStruct,
      claim: LibClaim.ClaimStruct,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimAndDepositBeans(
      amount: BigNumberish,
      claim: LibClaim.ClaimStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimAndDepositLP(
      amount: BigNumberish,
      claim: LibClaim.ClaimStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimAndWithdrawBeans(
      crates: BigNumberish[],
      amounts: BigNumberish[],
      claim: LibClaim.ClaimStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimAndWithdrawLP(
      crates: BigNumberish[],
      amounts: BigNumberish[],
      claim: LibClaim.ClaimStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimBuyAndDepositBeans(
      amount: BigNumberish,
      buyAmount: BigNumberish,
      claim: LibClaim.ClaimStruct,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositBeans(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositLP(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    lastSeasonOfPlenty(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastSupplyIncreases(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastUpdate(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    legacySupplyIncrease(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lpDeposit(
      account: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lpWithdrawal(
      account: string,
      i: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proposedUntil(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    seasonsOfPlenty(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    supplyIncreases(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalDepositedBeans(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalDepositedLP(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalFarmableBeans(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalRoots(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSeeds(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalStalk(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalWithdrawnBeans(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalWithdrawnLP(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    unclaimedRoots(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updateSilo(
      account: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    votedUntil(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    weth(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawBeans(
      crates: BigNumberish[],
      amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawLP(
      crates: BigNumberish[],
      amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimTokenBySeason(
      token: string,
      season: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimTokenBySeasons(
      token: string,
      seasons: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimTokensBySeason(
      claims: SiloV2Facet.SeasonClaimStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimTokensBySeasons(
      claims: SiloV2Facet.SeasonsClaimStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deposit(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getDeposit(
      account: string,
      token: string,
      season: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalDeposited(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalWithdrawn(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getWithdrawal(
      account: string,
      token: string,
      season: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenSettings(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    whitelistToken(
      token: string,
      selector: BytesLike,
      stalk: BigNumberish,
      seeds: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawTokenBySeason(
      token: string,
      season: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawTokenBySeasons(
      token: string,
      seasons: BigNumberish[],
      amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawTokensBySeason(
      withdraws: SiloV2Facet.WithdrawSeasonStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawTokensBySeasons(
      withdraws: SiloV2Facet.WithdrawSeasonsStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
