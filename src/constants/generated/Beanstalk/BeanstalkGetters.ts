/* Autogenerated file. Do not edit manually. */
// @ts-nocheck
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export declare namespace BeanstalkGetters {
  export type BipStruct = {
    proposer: string;
    start: BigNumberish;
    period: BigNumberish;
    executed: boolean;
    pauseOrUnpause: BigNumberish;
    timestamp: BigNumberish;
    roots: BigNumberish;
    totalRoots: BigNumberish;
    active: boolean;
  };

  export type BipStructOutput = [
    string,
    number,
    number,
    boolean,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    boolean
  ] & {
    proposer: string;
    start: number;
    period: number;
    executed: boolean;
    pauseOrUnpause: BigNumber;
    timestamp: BigNumber;
    roots: BigNumber;
    totalRoots: BigNumber;
    active: boolean;
  };

  export type VoteStruct = { bipId: BigNumberish; vote: boolean };

  export type VoteStructOutput = [number, boolean] & {
    bipId: number;
    vote: boolean;
  };
}

export declare namespace IBS {
  export type FundraiserStruct = {
    payee: string;
    token: string;
    total: BigNumberish;
    remaining: BigNumberish;
    start: BigNumberish;
  };

  export type FundraiserStructOutput = [
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    payee: string;
    token: string;
    total: BigNumber;
    remaining: BigNumber;
    start: BigNumber;
  };
}

export interface BeanstalkGettersInterface extends utils.Interface {
  functions: {
    "bips()": FunctionFragment;
    "fundraisers()": FunctionFragment;
    "getActiveVotes(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "bips" | "fundraisers" | "getActiveVotes"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "bips", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "fundraisers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getActiveVotes",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "bips", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "fundraisers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getActiveVotes",
    data: BytesLike
  ): Result;

  events: {};
}

export interface BeanstalkGetters extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BeanstalkGettersInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    bips(
      overrides?: CallOverrides
    ): Promise<
      [BeanstalkGetters.BipStructOutput[]] & {
        bs: BeanstalkGetters.BipStructOutput[];
      }
    >;

    fundraisers(
      overrides?: CallOverrides
    ): Promise<
      [IBS.FundraiserStructOutput[]] & { fs: IBS.FundraiserStructOutput[] }
    >;

    getActiveVotes(
      account: string,
      overrides?: CallOverrides
    ): Promise<
      [BeanstalkGetters.VoteStructOutput[]] & {
        vs: BeanstalkGetters.VoteStructOutput[];
      }
    >;
  };

  bips(overrides?: CallOverrides): Promise<BeanstalkGetters.BipStructOutput[]>;

  fundraisers(overrides?: CallOverrides): Promise<IBS.FundraiserStructOutput[]>;

  getActiveVotes(
    account: string,
    overrides?: CallOverrides
  ): Promise<BeanstalkGetters.VoteStructOutput[]>;

  callStatic: {
    bips(
      overrides?: CallOverrides
    ): Promise<BeanstalkGetters.BipStructOutput[]>;

    fundraisers(
      overrides?: CallOverrides
    ): Promise<IBS.FundraiserStructOutput[]>;

    getActiveVotes(
      account: string,
      overrides?: CallOverrides
    ): Promise<BeanstalkGetters.VoteStructOutput[]>;
  };

  filters: {};

  estimateGas: {
    bips(overrides?: CallOverrides): Promise<BigNumber>;

    fundraisers(overrides?: CallOverrides): Promise<BigNumber>;

    getActiveVotes(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    bips(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fundraisers(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getActiveVotes(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
