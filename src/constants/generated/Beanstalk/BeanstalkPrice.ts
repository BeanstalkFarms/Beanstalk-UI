/* Autogenerated file. Do not edit manually. */
// @ts-nocheck
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export declare namespace P {
  export type PoolStruct = {
    pool: string;
    tokens: [string, string];
    balances: [BigNumberish, BigNumberish];
    price: BigNumberish;
    liquidity: BigNumberish;
    deltaB: BigNumberish;
  };

  export type PoolStructOutput = [
    string,
    [string, string],
    [BigNumber, BigNumber],
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    pool: string;
    tokens: [string, string];
    balances: [BigNumber, BigNumber];
    price: BigNumber;
    liquidity: BigNumber;
    deltaB: BigNumber;
  };
}

export declare namespace BeanstalkPrice {
  export type PricesStruct = {
    price: BigNumberish;
    liquidity: BigNumberish;
    deltaB: BigNumberish;
    ps: P.PoolStruct[];
  };

  export type PricesStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    P.PoolStructOutput[]
  ] & {
    price: BigNumber;
    liquidity: BigNumber;
    deltaB: BigNumber;
    ps: P.PoolStructOutput[];
  };
}

export interface BeanstalkPriceInterface extends utils.Interface {
  functions: {
    "getBeanLUSDCurve()": FunctionFragment;
    "getCurve()": FunctionFragment;
    "getUniswap()": FunctionFragment;
    "price()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getBeanLUSDCurve"
      | "getCurve"
      | "getUniswap"
      | "price"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getBeanLUSDCurve",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getCurve", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getUniswap",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "price", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "getBeanLUSDCurve",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getCurve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getUniswap", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "price", data: BytesLike): Result;

  events: {};
}

export interface BeanstalkPrice extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BeanstalkPriceInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getBeanLUSDCurve(
      overrides?: CallOverrides
    ): Promise<[P.PoolStructOutput] & { pool: P.PoolStructOutput }>;

    getCurve(
      overrides?: CallOverrides
    ): Promise<[P.PoolStructOutput] & { pool: P.PoolStructOutput }>;

    getUniswap(
      overrides?: CallOverrides
    ): Promise<[P.PoolStructOutput] & { pool: P.PoolStructOutput }>;

    price(
      overrides?: CallOverrides
    ): Promise<
      [BeanstalkPrice.PricesStructOutput] & {
        p: BeanstalkPrice.PricesStructOutput;
      }
    >;
  };

  getBeanLUSDCurve(overrides?: CallOverrides): Promise<P.PoolStructOutput>;

  getCurve(overrides?: CallOverrides): Promise<P.PoolStructOutput>;

  getUniswap(overrides?: CallOverrides): Promise<P.PoolStructOutput>;

  price(overrides?: CallOverrides): Promise<BeanstalkPrice.PricesStructOutput>;

  callStatic: {
    getBeanLUSDCurve(overrides?: CallOverrides): Promise<P.PoolStructOutput>;

    getCurve(overrides?: CallOverrides): Promise<P.PoolStructOutput>;

    getUniswap(overrides?: CallOverrides): Promise<P.PoolStructOutput>;

    price(
      overrides?: CallOverrides
    ): Promise<BeanstalkPrice.PricesStructOutput>;
  };

  filters: {};

  estimateGas: {
    getBeanLUSDCurve(overrides?: CallOverrides): Promise<BigNumber>;

    getCurve(overrides?: CallOverrides): Promise<BigNumber>;

    getUniswap(overrides?: CallOverrides): Promise<BigNumber>;

    price(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    getBeanLUSDCurve(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCurve(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getUniswap(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    price(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
