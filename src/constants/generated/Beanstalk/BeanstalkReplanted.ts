/* Autogenerated file. Do not edit manually. */
// @ts-nocheck
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export declare namespace IDiamondCut {
  export type FacetCutStruct = {
    facetAddress: string;
    action: BigNumberish;
    functionSelectors: BytesLike[];
  };

  export type FacetCutStructOutput = [string, number, string[]] & {
    facetAddress: string;
    action: number;
    functionSelectors: string[];
  };
}

export declare namespace IDiamondLoupe {
  export type FacetStruct = {
    facetAddress: string;
    functionSelectors: BytesLike[];
  };

  export type FacetStructOutput = [string, string[]] & {
    facetAddress: string;
    functionSelectors: string[];
  };
}

export declare namespace IFertilizer {
  export type BalanceStruct = { amount: BigNumberish; lastBpf: BigNumberish };

  export type BalanceStructOutput = [BigNumber, BigNumber] & {
    amount: BigNumber;
    lastBpf: BigNumber;
  };
}

export declare namespace Storage {
  export type FundraiserStruct = {
    payee: string;
    token: string;
    total: BigNumberish;
    remaining: BigNumberish;
    start: BigNumberish;
  };

  export type FundraiserStructOutput = [
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    payee: string;
    token: string;
    total: BigNumber;
    remaining: BigNumber;
    start: BigNumber;
  };

  export type RainStruct = {
    depreciated: BigNumberish;
    pods: BigNumberish;
    roots: BigNumberish;
  };

  export type RainStructOutput = [BigNumber, BigNumber, BigNumber] & {
    depreciated: BigNumber;
    pods: BigNumber;
    roots: BigNumber;
  };

  export type SeasonStruct = {
    current: BigNumberish;
    lastSop: BigNumberish;
    withdrawSeasons: BigNumberish;
    lastSopSeason: BigNumberish;
    rainStart: BigNumberish;
    raining: boolean;
    fertilizing: boolean;
    start: BigNumberish;
    period: BigNumberish;
    timestamp: BigNumberish;
  };

  export type SeasonStructOutput = [
    number,
    number,
    number,
    number,
    number,
    boolean,
    boolean,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    current: number;
    lastSop: number;
    withdrawSeasons: number;
    lastSopSeason: number;
    rainStart: number;
    raining: boolean;
    fertilizing: boolean;
    start: BigNumber;
    period: BigNumber;
    timestamp: BigNumber;
  };

  export type WeatherStruct = {
    startSoil: BigNumberish;
    lastDSoil: BigNumberish;
    lastSoilPercent: BigNumberish;
    lastSowTime: BigNumberish;
    nextSowTime: BigNumberish;
    yield: BigNumberish;
    didSowBelowMin: boolean;
    didSowFaster: boolean;
  };

  export type WeatherStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    number,
    number,
    number,
    boolean,
    boolean
  ] & {
    startSoil: BigNumber;
    lastDSoil: BigNumber;
    lastSoilPercent: BigNumber;
    lastSowTime: number;
    nextSowTime: number;
    yield: number;
    didSowBelowMin: boolean;
    didSowFaster: boolean;
  };

  export type SiloSettingsStruct = {
    selector: BytesLike;
    seeds: BigNumberish;
    stalk: BigNumberish;
  };

  export type SiloSettingsStructOutput = [string, number, number] & {
    selector: string;
    seeds: number;
    stalk: number;
  };
}

export declare namespace Listing {
  export type PodListingStruct = {
    account: string;
    index: BigNumberish;
    start: BigNumberish;
    amount: BigNumberish;
    pricePerPod: BigNumberish;
    maxHarvestableIndex: BigNumberish;
    mode: BigNumberish;
  };

  export type PodListingStructOutput = [
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    number,
    BigNumber,
    number
  ] & {
    account: string;
    index: BigNumber;
    start: BigNumber;
    amount: BigNumber;
    pricePerPod: number;
    maxHarvestableIndex: BigNumber;
    mode: number;
  };
}

export declare namespace Order {
  export type PodOrderStruct = {
    account: string;
    pricePerPod: BigNumberish;
    maxPlaceInLine: BigNumberish;
  };

  export type PodOrderStructOutput = [string, number, BigNumber] & {
    account: string;
    pricePerPod: number;
    maxPlaceInLine: BigNumber;
  };
}

export declare namespace SiloExit {
  export type AccountSeasonOfPlentyStruct = {
    lastRain: BigNumberish;
    lastSop: BigNumberish;
    roots: BigNumberish;
    plentyPerRoot: BigNumberish;
    plenty: BigNumberish;
  };

  export type AccountSeasonOfPlentyStructOutput = [
    number,
    number,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    lastRain: number;
    lastSop: number;
    roots: BigNumber;
    plentyPerRoot: BigNumber;
    plenty: BigNumber;
  };
}

export declare namespace TokenFacet {
  export type BalanceStruct = {
    internalBalance: BigNumberish;
    externalBalance: BigNumberish;
    totalBalance: BigNumberish;
  };

  export type BalanceStructOutput = [BigNumber, BigNumber, BigNumber] & {
    internalBalance: BigNumber;
    externalBalance: BigNumber;
    totalBalance: BigNumber;
  };
}

export interface BeanstalkReplantedInterface extends utils.Interface {
  functions: {
    "bdv(address,uint256)": FunctionFragment;
    "beanToBDV(uint256)": FunctionFragment;
    "curveToBDV(uint256)": FunctionFragment;
    "unripeBeanToBDV(uint256)": FunctionFragment;
    "unripeLPToBDV(uint256)": FunctionFragment;
    "convert(bytes,uint32[],uint256[])": FunctionFragment;
    "getAmountOut(address,address,uint256)": FunctionFragment;
    "getMaxAmountIn(address,address)": FunctionFragment;
    "addLiquidity(address,address,uint256[],uint256,uint8,uint8)": FunctionFragment;
    "exchange(address,address,address,address,uint256,uint256,uint8,uint8)": FunctionFragment;
    "exchangeUnderlying(address,address,address,uint256,uint256,uint8,uint8)": FunctionFragment;
    "removeLiquidity(address,address,uint256,uint256[],uint8,uint8)": FunctionFragment;
    "removeLiquidityImbalance(address,address,uint256[],uint256,uint8,uint8)": FunctionFragment;
    "removeLiquidityOneToken(address,address,address,uint256,uint256,uint8,uint8)": FunctionFragment;
    "diamondCut((address,uint8,bytes4[])[],address,bytes)": FunctionFragment;
    "facetAddress(bytes4)": FunctionFragment;
    "facetAddresses()": FunctionFragment;
    "facetFunctionSelectors(address)": FunctionFragment;
    "facets()": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "farm(bytes[])": FunctionFragment;
    "addFertilizerOwner(uint128,uint128,uint256)": FunctionFragment;
    "balanceOfBatchFertilizer(address[],uint256[])": FunctionFragment;
    "balanceOfFertilized(address,uint256[])": FunctionFragment;
    "balanceOfFertilizer(address,uint256)": FunctionFragment;
    "balanceOfUnfertilized(address,uint256[])": FunctionFragment;
    "beansPerFertilizer()": FunctionFragment;
    "claimFertilized(uint256[],uint8)": FunctionFragment;
    "getActiveFertilizer()": FunctionFragment;
    "getEndBpf()": FunctionFragment;
    "getFertilizer(uint128)": FunctionFragment;
    "getFirst()": FunctionFragment;
    "getHumidity(uint128)": FunctionFragment;
    "getLast()": FunctionFragment;
    "getNext(uint128)": FunctionFragment;
    "isFertilizing()": FunctionFragment;
    "mintFertilizer(uint128,uint256,uint8)": FunctionFragment;
    "payFertilizer(address,uint256)": FunctionFragment;
    "remainingRecapitalization()": FunctionFragment;
    "totalFertilizedBeans()": FunctionFragment;
    "totalFertilizerBeans()": FunctionFragment;
    "totalUnfertilizedBeans()": FunctionFragment;
    "harvest(uint256[],uint8)": FunctionFragment;
    "harvestableIndex()": FunctionFragment;
    "plot(address,uint256)": FunctionFragment;
    "podIndex()": FunctionFragment;
    "sow(uint256,uint8)": FunctionFragment;
    "sowWithMin(uint256,uint256,uint8)": FunctionFragment;
    "totalHarvestable()": FunctionFragment;
    "totalHarvested()": FunctionFragment;
    "totalPods()": FunctionFragment;
    "totalSoil()": FunctionFragment;
    "totalUnharvestable()": FunctionFragment;
    "createFundraiser(address,address,uint256)": FunctionFragment;
    "fund(uint32,uint256,uint8)": FunctionFragment;
    "fundingToken(uint32)": FunctionFragment;
    "fundraiser(uint32)": FunctionFragment;
    "numberOfFundraisers()": FunctionFragment;
    "remainingFunding(uint32)": FunctionFragment;
    "totalFunding(uint32)": FunctionFragment;
    "allowancePods(address,address)": FunctionFragment;
    "approvePods(address,uint256)": FunctionFragment;
    "cancelPodListing(uint256)": FunctionFragment;
    "cancelPodOrder(uint24,uint256,uint8)": FunctionFragment;
    "createPodListing(uint256,uint256,uint256,uint24,uint256,uint8)": FunctionFragment;
    "createPodOrder(uint256,uint24,uint256,uint8)": FunctionFragment;
    "fillPodListing((address,uint256,uint256,uint256,uint24,uint256,uint8),uint256,uint8)": FunctionFragment;
    "fillPodOrder((address,uint24,uint256),uint256,uint256,uint256,uint8)": FunctionFragment;
    "podListing(uint256)": FunctionFragment;
    "podOrder(address,uint24,uint256)": FunctionFragment;
    "podOrderById(bytes32)": FunctionFragment;
    "transferPlot(address,address,uint256,uint256,uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "pause()": FunctionFragment;
    "unpause()": FunctionFragment;
    "paused()": FunctionFragment;
    "plentyPerRoot(uint32)": FunctionFragment;
    "poolDeltaB(address)": FunctionFragment;
    "rain()": FunctionFragment;
    "season()": FunctionFragment;
    "seasonTime()": FunctionFragment;
    "sunrise()": FunctionFragment;
    "time()": FunctionFragment;
    "totalDeltaB()": FunctionFragment;
    "weather()": FunctionFragment;
    "yield()": FunctionFragment;
    "balanceOfEarnedBeans(address)": FunctionFragment;
    "balanceOfEarnedSeeds(address)": FunctionFragment;
    "balanceOfEarnedStalk(address)": FunctionFragment;
    "balanceOfGrownStalk(address)": FunctionFragment;
    "balanceOfPlenty(address)": FunctionFragment;
    "balanceOfRainRoots(address)": FunctionFragment;
    "balanceOfRoots(address)": FunctionFragment;
    "balanceOfSeeds(address)": FunctionFragment;
    "balanceOfSop(address)": FunctionFragment;
    "balanceOfStalk(address)": FunctionFragment;
    "claimPlenty(address)": FunctionFragment;
    "claimWithdrawal(address,uint32,uint8)": FunctionFragment;
    "claimWithdrawals(address,uint32[],uint8)": FunctionFragment;
    "deposit(address,uint256,uint8)": FunctionFragment;
    "earn(address)": FunctionFragment;
    "getDeposit(address,address,uint32)": FunctionFragment;
    "getTotalDeposited(address)": FunctionFragment;
    "getTotalWithdrawn(address)": FunctionFragment;
    "getWithdrawal(address,address,uint32)": FunctionFragment;
    "lastSeasonOfPlenty()": FunctionFragment;
    "lastUpdate(address)": FunctionFragment;
    "tokenSettings(address)": FunctionFragment;
    "totalEarnedBeans()": FunctionFragment;
    "totalRoots()": FunctionFragment;
    "totalSeeds()": FunctionFragment;
    "totalStalk()": FunctionFragment;
    "transferDeposit(address,address,uint32,uint256)": FunctionFragment;
    "transferDeposits(address,address,uint32[],uint256[])": FunctionFragment;
    "update(address)": FunctionFragment;
    "updateUnripeDeposit(address,uint32,uint256)": FunctionFragment;
    "updateUnripeDeposits(address,uint32[],uint256[])": FunctionFragment;
    "withdrawDeposit(address,uint32,uint256)": FunctionFragment;
    "withdrawDeposits(address,uint32[],uint256[])": FunctionFragment;
    "withdrawFreeze()": FunctionFragment;
    "getAllBalance(address,address)": FunctionFragment;
    "getAllBalances(address,address[])": FunctionFragment;
    "getBalance(address,address)": FunctionFragment;
    "getBalances(address,address[])": FunctionFragment;
    "getExternalBalance(address,address)": FunctionFragment;
    "getExternalBalances(address,address[])": FunctionFragment;
    "getInternalBalance(address,address)": FunctionFragment;
    "getInternalBalances(address,address[])": FunctionFragment;
    "transferToken(address,address,uint256,uint8,uint8)": FunctionFragment;
    "unwrapEth(uint256,uint8)": FunctionFragment;
    "wrapEth(uint256,uint8)": FunctionFragment;
    "addUnripeToken(address,address,bytes32)": FunctionFragment;
    "balanceOfPenalizedUnderlying(address,address)": FunctionFragment;
    "balanceOfUnderlying(address,address)": FunctionFragment;
    "claimUnripe(address,uint256,bytes32[])": FunctionFragment;
    "getPenalizedUnderlying(address,uint256)": FunctionFragment;
    "getPenalty(address)": FunctionFragment;
    "getPercentPenalty(address)": FunctionFragment;
    "getRecapFundedPercent(address)": FunctionFragment;
    "getRecapPaidPercent()": FunctionFragment;
    "getTotalUnderlying(address)": FunctionFragment;
    "getUnderlying(address,uint256)": FunctionFragment;
    "getUnderlyingPerUnripeToken(address)": FunctionFragment;
    "isUnripe(address)": FunctionFragment;
    "ripen(address,uint256,uint8)": FunctionFragment;
    "dewhitelistToken(address)": FunctionFragment;
    "whitelistToken(address,bytes4,uint32,uint32)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "bdv"
      | "beanToBDV"
      | "curveToBDV"
      | "unripeBeanToBDV"
      | "unripeLPToBDV"
      | "convert"
      | "getAmountOut"
      | "getMaxAmountIn"
      | "addLiquidity"
      | "exchange"
      | "exchangeUnderlying"
      | "removeLiquidity"
      | "removeLiquidityImbalance"
      | "removeLiquidityOneToken"
      | "diamondCut"
      | "facetAddress"
      | "facetAddresses"
      | "facetFunctionSelectors"
      | "facets"
      | "supportsInterface"
      | "farm"
      | "addFertilizerOwner"
      | "balanceOfBatchFertilizer"
      | "balanceOfFertilized"
      | "balanceOfFertilizer"
      | "balanceOfUnfertilized"
      | "beansPerFertilizer"
      | "claimFertilized"
      | "getActiveFertilizer"
      | "getEndBpf"
      | "getFertilizer"
      | "getFirst"
      | "getHumidity"
      | "getLast"
      | "getNext"
      | "isFertilizing"
      | "mintFertilizer"
      | "payFertilizer"
      | "remainingRecapitalization"
      | "totalFertilizedBeans"
      | "totalFertilizerBeans"
      | "totalUnfertilizedBeans"
      | "harvest"
      | "harvestableIndex"
      | "plot"
      | "podIndex"
      | "sow"
      | "sowWithMin"
      | "totalHarvestable"
      | "totalHarvested"
      | "totalPods"
      | "totalSoil"
      | "totalUnharvestable"
      | "createFundraiser"
      | "fund"
      | "fundingToken"
      | "fundraiser"
      | "numberOfFundraisers"
      | "remainingFunding"
      | "totalFunding"
      | "allowancePods"
      | "approvePods"
      | "cancelPodListing"
      | "cancelPodOrder"
      | "createPodListing"
      | "createPodOrder"
      | "fillPodListing"
      | "fillPodOrder"
      | "podListing"
      | "podOrder"
      | "podOrderById"
      | "transferPlot"
      | "owner"
      | "transferOwnership"
      | "pause"
      | "unpause"
      | "paused"
      | "plentyPerRoot"
      | "poolDeltaB"
      | "rain"
      | "season"
      | "seasonTime"
      | "sunrise"
      | "time"
      | "totalDeltaB"
      | "weather"
      | "yield"
      | "balanceOfEarnedBeans"
      | "balanceOfEarnedSeeds"
      | "balanceOfEarnedStalk"
      | "balanceOfGrownStalk"
      | "balanceOfPlenty"
      | "balanceOfRainRoots"
      | "balanceOfRoots"
      | "balanceOfSeeds"
      | "balanceOfSop"
      | "balanceOfStalk"
      | "claimPlenty"
      | "claimWithdrawal"
      | "claimWithdrawals"
      | "deposit"
      | "earn"
      | "getDeposit"
      | "getTotalDeposited"
      | "getTotalWithdrawn"
      | "getWithdrawal"
      | "lastSeasonOfPlenty"
      | "lastUpdate"
      | "tokenSettings"
      | "totalEarnedBeans"
      | "totalRoots"
      | "totalSeeds"
      | "totalStalk"
      | "transferDeposit"
      | "transferDeposits"
      | "update"
      | "updateUnripeDeposit"
      | "updateUnripeDeposits"
      | "withdrawDeposit"
      | "withdrawDeposits"
      | "withdrawFreeze"
      | "getAllBalance"
      | "getAllBalances"
      | "getBalance"
      | "getBalances"
      | "getExternalBalance"
      | "getExternalBalances"
      | "getInternalBalance"
      | "getInternalBalances"
      | "transferToken"
      | "unwrapEth"
      | "wrapEth"
      | "addUnripeToken"
      | "balanceOfPenalizedUnderlying"
      | "balanceOfUnderlying"
      | "claimUnripe"
      | "getPenalizedUnderlying"
      | "getPenalty"
      | "getPercentPenalty"
      | "getRecapFundedPercent"
      | "getRecapPaidPercent"
      | "getTotalUnderlying"
      | "getUnderlying"
      | "getUnderlyingPerUnripeToken"
      | "isUnripe"
      | "ripen"
      | "dewhitelistToken"
      | "whitelistToken"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "bdv",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "beanToBDV",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "curveToBDV",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "unripeBeanToBDV",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "unripeLPToBDV",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "convert",
    values: [BytesLike, BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getAmountOut",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMaxAmountIn",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "addLiquidity",
    values: [
      string,
      string,
      BigNumberish[],
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "exchange",
    values: [
      string,
      string,
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "exchangeUnderlying",
    values: [
      string,
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquidity",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish[],
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquidityImbalance",
    values: [
      string,
      string,
      BigNumberish[],
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquidityOneToken",
    values: [
      string,
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "diamondCut",
    values: [IDiamondCut.FacetCutStruct[], string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "facetAddress",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "facetAddresses",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "facetFunctionSelectors",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "facets", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "farm", values: [BytesLike[]]): string;
  encodeFunctionData(
    functionFragment: "addFertilizerOwner",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOfBatchFertilizer",
    values: [string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOfFertilized",
    values: [string, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOfFertilizer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOfUnfertilized",
    values: [string, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "beansPerFertilizer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimFertilized",
    values: [BigNumberish[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getActiveFertilizer",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getEndBpf", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getFertilizer",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getFirst", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getHumidity",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getLast", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getNext",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isFertilizing",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mintFertilizer",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "payFertilizer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "remainingRecapitalization",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalFertilizedBeans",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalFertilizerBeans",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalUnfertilizedBeans",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "harvest",
    values: [BigNumberish[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "harvestableIndex",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "plot",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "podIndex", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "sow",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sowWithMin",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalHarvestable",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalHarvested",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "totalPods", values?: undefined): string;
  encodeFunctionData(functionFragment: "totalSoil", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalUnharvestable",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createFundraiser",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "fund",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "fundingToken",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "fundraiser",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "numberOfFundraisers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "remainingFunding",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalFunding",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "allowancePods",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "approvePods",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelPodListing",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelPodOrder",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createPodListing",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createPodOrder",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "fillPodListing",
    values: [Listing.PodListingStruct, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "fillPodOrder",
    values: [
      Order.PodOrderStruct,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "podListing",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "podOrder",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "podOrderById",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferPlot",
    values: [string, string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "plentyPerRoot",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "poolDeltaB", values: [string]): string;
  encodeFunctionData(functionFragment: "rain", values?: undefined): string;
  encodeFunctionData(functionFragment: "season", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "seasonTime",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "sunrise", values?: undefined): string;
  encodeFunctionData(functionFragment: "time", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalDeltaB",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "weather", values?: undefined): string;
  encodeFunctionData(functionFragment: "yield", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "balanceOfEarnedBeans",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOfEarnedSeeds",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOfEarnedStalk",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOfGrownStalk",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOfPlenty",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOfRainRoots",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOfRoots",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOfSeeds",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOfSop",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOfStalk",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "claimPlenty", values: [string]): string;
  encodeFunctionData(
    functionFragment: "claimWithdrawal",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimWithdrawals",
    values: [string, BigNumberish[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "earn", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getDeposit",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalDeposited",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalWithdrawn",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getWithdrawal",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lastSeasonOfPlenty",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "lastUpdate", values: [string]): string;
  encodeFunctionData(
    functionFragment: "tokenSettings",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "totalEarnedBeans",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalRoots",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSeeds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalStalk",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferDeposit",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferDeposits",
    values: [string, string, BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(functionFragment: "update", values: [string]): string;
  encodeFunctionData(
    functionFragment: "updateUnripeDeposit",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateUnripeDeposits",
    values: [string, BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawDeposit",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawDeposits",
    values: [string, BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFreeze",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllBalance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllBalances",
    values: [string, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getBalance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getBalances",
    values: [string, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getExternalBalance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getExternalBalances",
    values: [string, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getInternalBalance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getInternalBalances",
    values: [string, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "transferToken",
    values: [string, string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "unwrapEth",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "wrapEth",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addUnripeToken",
    values: [string, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOfPenalizedUnderlying",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOfUnderlying",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "claimUnripe",
    values: [string, BigNumberish, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getPenalizedUnderlying",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getPenalty", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getPercentPenalty",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getRecapFundedPercent",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getRecapPaidPercent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalUnderlying",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getUnderlying",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUnderlyingPerUnripeToken",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "isUnripe", values: [string]): string;
  encodeFunctionData(
    functionFragment: "ripen",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "dewhitelistToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistToken",
    values: [string, BytesLike, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "bdv", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "beanToBDV", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "curveToBDV", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "unripeBeanToBDV",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unripeLPToBDV",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "convert", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAmountOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMaxAmountIn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "exchange", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "exchangeUnderlying",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidityImbalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidityOneToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "diamondCut", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "facetAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "facetAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "facetFunctionSelectors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "facets", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "farm", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addFertilizerOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfBatchFertilizer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfFertilized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfFertilizer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfUnfertilized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "beansPerFertilizer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimFertilized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getActiveFertilizer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getEndBpf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getFertilizer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getFirst", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getHumidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getLast", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getNext", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isFertilizing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintFertilizer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "payFertilizer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "remainingRecapitalization",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalFertilizedBeans",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalFertilizerBeans",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalUnfertilizedBeans",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "harvest", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "harvestableIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "plot", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "podIndex", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sow", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sowWithMin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalHarvestable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalHarvested",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "totalPods", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "totalSoil", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalUnharvestable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createFundraiser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fund", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "fundingToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fundraiser", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "numberOfFundraisers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "remainingFunding",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalFunding",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allowancePods",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approvePods",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelPodListing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelPodOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createPodListing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createPodOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fillPodListing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fillPodOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "podListing", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "podOrder", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "podOrderById",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferPlot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "plentyPerRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "poolDeltaB", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rain", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "season", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "seasonTime", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sunrise", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "time", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalDeltaB",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "weather", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "yield", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfEarnedBeans",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfEarnedSeeds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfEarnedStalk",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfGrownStalk",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfPlenty",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfRainRoots",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfRoots",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfSeeds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfSop",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfStalk",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimPlenty",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimWithdrawal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimWithdrawals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "earn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getDeposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTotalDeposited",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalWithdrawn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWithdrawal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastSeasonOfPlenty",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lastUpdate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenSettings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalEarnedBeans",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "totalRoots", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "totalSeeds", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "totalStalk", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferDeposits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "update", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateUnripeDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateUnripeDeposits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawDeposits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFreeze",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getBalance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getExternalBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getExternalBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInternalBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInternalBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unwrapEth", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "wrapEth", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addUnripeToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfPenalizedUnderlying",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfUnderlying",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimUnripe",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPenalizedUnderlying",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPenalty", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPercentPenalty",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRecapFundedPercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRecapPaidPercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalUnderlying",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUnderlying",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUnderlyingPerUnripeToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isUnripe", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ripen", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "dewhitelistToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelistToken",
    data: BytesLike
  ): Result;

  events: {
    "Convert(address,address,address,uint256,uint256)": EventFragment;
    "RemoveDeposits(address,address,uint32[],uint256[],uint256)": EventFragment;
    "RemoveDeposits(address,address,uint32[],uint256[],uint256)": EventFragment;
    "DiamondCut(tuple[],address,bytes)": EventFragment;
    "SetFertilizer(uint128,uint128)": EventFragment;
    "Harvest(address,uint256[],uint256)": EventFragment;
    "PodListingCancelled(address,uint256)": EventFragment;
    "PodListingCancelled(address,uint256)": EventFragment;
    "Sow(address,uint256,uint256,uint256)": EventFragment;
    "CompleteFundraiser(uint32)": EventFragment;
    "CreateFundraiser(uint32,address,address,uint256)": EventFragment;
    "FundFundraiser(address,uint32,uint256)": EventFragment;
    "PlotTransfer(address,address,uint256,uint256)": EventFragment;
    "PodApproval(address,address,uint256)": EventFragment;
    "PodListingCreated(address,uint256,uint256,uint256,uint24,uint256,uint8)": EventFragment;
    "PodListingFilled(address,address,uint256,uint256,uint256)": EventFragment;
    "PodOrderCancelled(address,bytes32)": EventFragment;
    "PodOrderCreated(address,bytes32,uint256,uint24,uint256)": EventFragment;
    "PodOrderFilled(address,address,bytes32,uint256,uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Pause(uint256)": EventFragment;
    "Unpause(uint256,uint256)": EventFragment;
    "Incentivization(address,uint256)": EventFragment;
    "Reward(uint256,uint256,uint256)": EventFragment;
    "SeasonOfPlenty(uint256,uint256,uint256)": EventFragment;
    "Soil(uint256)": EventFragment;
    "Sunrise(uint256)": EventFragment;
    "WeatherChange(uint256,uint256,int8)": EventFragment;
    "AddDeposit(address,address,uint32,uint256,uint256)": EventFragment;
    "AddWithdrawal(address,address,uint32,uint256)": EventFragment;
    "ClaimPlenty(address,uint256)": EventFragment;
    "Earn(address,uint256)": EventFragment;
    "RemoveDeposit(address,address,uint32,uint256)": EventFragment;
    "RemoveWithdrawal(address,address,uint32,uint256)": EventFragment;
    "RemoveWithdrawals(address,address,uint32[],uint256)": EventFragment;
    "SeedsBalanceChanged(address,int256)": EventFragment;
    "StalkBalanceChanged(address,int256,int256)": EventFragment;
    "InternalBalanceChanged(address,address,int256)": EventFragment;
    "AddUnripeToken(address,address,bytes32)": EventFragment;
    "ChangeUnderlying(address,int256)": EventFragment;
    "ClaimUnripe(address,address,uint256)": EventFragment;
    "Ripen(address,address,uint256,uint256)": EventFragment;
    "DewhitelistToken(address)": EventFragment;
    "WhitelistToken(address,bytes4,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Convert"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "RemoveDeposits(address,address,uint32[],uint256[],uint256)"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "RemoveDeposits(address,address,uint32[],uint256[],uint256)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DiamondCut"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetFertilizer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Harvest"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "PodListingCancelled(address,uint256)"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "PodListingCancelled(address,uint256)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Sow"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CompleteFundraiser"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CreateFundraiser"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FundFundraiser"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PlotTransfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PodApproval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PodListingCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PodListingFilled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PodOrderCancelled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PodOrderCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PodOrderFilled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Pause"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpause"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Incentivization"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Reward"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SeasonOfPlenty"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Soil"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Sunrise"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WeatherChange"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AddDeposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AddWithdrawal"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ClaimPlenty"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Earn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemoveDeposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemoveWithdrawal"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemoveWithdrawals"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SeedsBalanceChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StalkBalanceChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "InternalBalanceChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AddUnripeToken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChangeUnderlying"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ClaimUnripe"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Ripen"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DewhitelistToken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WhitelistToken"): EventFragment;
}

export interface ConvertEventObject {
  account: string;
  fromToken: string;
  toToken: string;
  fromAmount: BigNumber;
  toAmount: BigNumber;
}
export type ConvertEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber],
  ConvertEventObject
>;

export type ConvertEventFilter = TypedEventFilter<ConvertEvent>;

export interface RemoveDeposits_address_address_uint32_array_uint256_array_uint256_EventObject {
  account: string;
  token: string;
  seasons: number[];
  amounts: BigNumber[];
  amount: BigNumber;
}
export type RemoveDeposits_address_address_uint32_array_uint256_array_uint256_Event =
  TypedEvent<
    [string, string, number[], BigNumber[], BigNumber],
    RemoveDeposits_address_address_uint32_array_uint256_array_uint256_EventObject
  >;

export type RemoveDeposits_address_address_uint32_array_uint256_array_uint256_EventFilter =
  TypedEventFilter<RemoveDeposits_address_address_uint32_array_uint256_array_uint256_Event>;

export interface RemoveDeposits_address_address_uint32_array_uint256_array_uint256_EventObject {
  account: string;
  token: string;
  seasons: number[];
  amounts: BigNumber[];
  amount: BigNumber;
}
export type RemoveDeposits_address_address_uint32_array_uint256_array_uint256_Event =
  TypedEvent<
    [string, string, number[], BigNumber[], BigNumber],
    RemoveDeposits_address_address_uint32_array_uint256_array_uint256_EventObject
  >;

export type RemoveDeposits_address_address_uint32_array_uint256_array_uint256_EventFilter =
  TypedEventFilter<RemoveDeposits_address_address_uint32_array_uint256_array_uint256_Event>;

export interface DiamondCutEventObject {
  _diamondCut: IDiamondCut.FacetCutStructOutput[];
  _init: string;
  _calldata: string;
}
export type DiamondCutEvent = TypedEvent<
  [IDiamondCut.FacetCutStructOutput[], string, string],
  DiamondCutEventObject
>;

export type DiamondCutEventFilter = TypedEventFilter<DiamondCutEvent>;

export interface SetFertilizerEventObject {
  id: BigNumber;
  bpf: BigNumber;
}
export type SetFertilizerEvent = TypedEvent<
  [BigNumber, BigNumber],
  SetFertilizerEventObject
>;

export type SetFertilizerEventFilter = TypedEventFilter<SetFertilizerEvent>;

export interface HarvestEventObject {
  account: string;
  plots: BigNumber[];
  beans: BigNumber;
}
export type HarvestEvent = TypedEvent<
  [string, BigNumber[], BigNumber],
  HarvestEventObject
>;

export type HarvestEventFilter = TypedEventFilter<HarvestEvent>;

export interface PodListingCancelled_address_uint256_EventObject {
  account: string;
  index: BigNumber;
}
export type PodListingCancelled_address_uint256_Event = TypedEvent<
  [string, BigNumber],
  PodListingCancelled_address_uint256_EventObject
>;

export type PodListingCancelled_address_uint256_EventFilter =
  TypedEventFilter<PodListingCancelled_address_uint256_Event>;

export interface PodListingCancelled_address_uint256_EventObject {
  account: string;
  index: BigNumber;
}
export type PodListingCancelled_address_uint256_Event = TypedEvent<
  [string, BigNumber],
  PodListingCancelled_address_uint256_EventObject
>;

export type PodListingCancelled_address_uint256_EventFilter =
  TypedEventFilter<PodListingCancelled_address_uint256_Event>;

export interface SowEventObject {
  account: string;
  index: BigNumber;
  beans: BigNumber;
  pods: BigNumber;
}
export type SowEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  SowEventObject
>;

export type SowEventFilter = TypedEventFilter<SowEvent>;

export interface CompleteFundraiserEventObject {
  id: number;
}
export type CompleteFundraiserEvent = TypedEvent<
  [number],
  CompleteFundraiserEventObject
>;

export type CompleteFundraiserEventFilter =
  TypedEventFilter<CompleteFundraiserEvent>;

export interface CreateFundraiserEventObject {
  id: number;
  fundraiser: string;
  token: string;
  amount: BigNumber;
}
export type CreateFundraiserEvent = TypedEvent<
  [number, string, string, BigNumber],
  CreateFundraiserEventObject
>;

export type CreateFundraiserEventFilter =
  TypedEventFilter<CreateFundraiserEvent>;

export interface FundFundraiserEventObject {
  account: string;
  id: number;
  amount: BigNumber;
}
export type FundFundraiserEvent = TypedEvent<
  [string, number, BigNumber],
  FundFundraiserEventObject
>;

export type FundFundraiserEventFilter = TypedEventFilter<FundFundraiserEvent>;

export interface PlotTransferEventObject {
  from: string;
  to: string;
  id: BigNumber;
  pods: BigNumber;
}
export type PlotTransferEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  PlotTransferEventObject
>;

export type PlotTransferEventFilter = TypedEventFilter<PlotTransferEvent>;

export interface PodApprovalEventObject {
  owner: string;
  spender: string;
  pods: BigNumber;
}
export type PodApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  PodApprovalEventObject
>;

export type PodApprovalEventFilter = TypedEventFilter<PodApprovalEvent>;

export interface PodListingCreatedEventObject {
  account: string;
  index: BigNumber;
  start: BigNumber;
  amount: BigNumber;
  pricePerPod: number;
  maxHarvestableIndex: BigNumber;
  mode: number;
}
export type PodListingCreatedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, number, BigNumber, number],
  PodListingCreatedEventObject
>;

export type PodListingCreatedEventFilter =
  TypedEventFilter<PodListingCreatedEvent>;

export interface PodListingFilledEventObject {
  from: string;
  to: string;
  index: BigNumber;
  start: BigNumber;
  amount: BigNumber;
}
export type PodListingFilledEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber],
  PodListingFilledEventObject
>;

export type PodListingFilledEventFilter =
  TypedEventFilter<PodListingFilledEvent>;

export interface PodOrderCancelledEventObject {
  account: string;
  id: string;
}
export type PodOrderCancelledEvent = TypedEvent<
  [string, string],
  PodOrderCancelledEventObject
>;

export type PodOrderCancelledEventFilter =
  TypedEventFilter<PodOrderCancelledEvent>;

export interface PodOrderCreatedEventObject {
  account: string;
  id: string;
  amount: BigNumber;
  pricePerPod: number;
  maxPlaceInLine: BigNumber;
}
export type PodOrderCreatedEvent = TypedEvent<
  [string, string, BigNumber, number, BigNumber],
  PodOrderCreatedEventObject
>;

export type PodOrderCreatedEventFilter = TypedEventFilter<PodOrderCreatedEvent>;

export interface PodOrderFilledEventObject {
  from: string;
  to: string;
  id: string;
  index: BigNumber;
  start: BigNumber;
  amount: BigNumber;
}
export type PodOrderFilledEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber, BigNumber],
  PodOrderFilledEventObject
>;

export type PodOrderFilledEventFilter = TypedEventFilter<PodOrderFilledEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PauseEventObject {
  timestamp: BigNumber;
}
export type PauseEvent = TypedEvent<[BigNumber], PauseEventObject>;

export type PauseEventFilter = TypedEventFilter<PauseEvent>;

export interface UnpauseEventObject {
  timestamp: BigNumber;
  timePassed: BigNumber;
}
export type UnpauseEvent = TypedEvent<
  [BigNumber, BigNumber],
  UnpauseEventObject
>;

export type UnpauseEventFilter = TypedEventFilter<UnpauseEvent>;

export interface IncentivizationEventObject {
  account: string;
  beans: BigNumber;
}
export type IncentivizationEvent = TypedEvent<
  [string, BigNumber],
  IncentivizationEventObject
>;

export type IncentivizationEventFilter = TypedEventFilter<IncentivizationEvent>;

export interface RewardEventObject {
  toField: BigNumber;
  toSilo: BigNumber;
  toFertilizer: BigNumber;
}
export type RewardEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  RewardEventObject
>;

export type RewardEventFilter = TypedEventFilter<RewardEvent>;

export interface SeasonOfPlentyEventObject {
  season: BigNumber;
  amount: BigNumber;
  toField: BigNumber;
}
export type SeasonOfPlentyEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  SeasonOfPlentyEventObject
>;

export type SeasonOfPlentyEventFilter = TypedEventFilter<SeasonOfPlentyEvent>;

export interface SoilEventObject {
  soil: BigNumber;
}
export type SoilEvent = TypedEvent<[BigNumber], SoilEventObject>;

export type SoilEventFilter = TypedEventFilter<SoilEvent>;

export interface SunriseEventObject {
  season: BigNumber;
}
export type SunriseEvent = TypedEvent<[BigNumber], SunriseEventObject>;

export type SunriseEventFilter = TypedEventFilter<SunriseEvent>;

export interface WeatherChangeEventObject {
  season: BigNumber;
  caseId: BigNumber;
  change: number;
}
export type WeatherChangeEvent = TypedEvent<
  [BigNumber, BigNumber, number],
  WeatherChangeEventObject
>;

export type WeatherChangeEventFilter = TypedEventFilter<WeatherChangeEvent>;

export interface AddDepositEventObject {
  account: string;
  token: string;
  season: number;
  amount: BigNumber;
  bdv: BigNumber;
}
export type AddDepositEvent = TypedEvent<
  [string, string, number, BigNumber, BigNumber],
  AddDepositEventObject
>;

export type AddDepositEventFilter = TypedEventFilter<AddDepositEvent>;

export interface AddWithdrawalEventObject {
  account: string;
  token: string;
  season: number;
  amount: BigNumber;
}
export type AddWithdrawalEvent = TypedEvent<
  [string, string, number, BigNumber],
  AddWithdrawalEventObject
>;

export type AddWithdrawalEventFilter = TypedEventFilter<AddWithdrawalEvent>;

export interface ClaimPlentyEventObject {
  account: string;
  plenty: BigNumber;
}
export type ClaimPlentyEvent = TypedEvent<
  [string, BigNumber],
  ClaimPlentyEventObject
>;

export type ClaimPlentyEventFilter = TypedEventFilter<ClaimPlentyEvent>;

export interface EarnEventObject {
  account: string;
  beans: BigNumber;
}
export type EarnEvent = TypedEvent<[string, BigNumber], EarnEventObject>;

export type EarnEventFilter = TypedEventFilter<EarnEvent>;

export interface RemoveDepositEventObject {
  account: string;
  token: string;
  season: number;
  amount: BigNumber;
}
export type RemoveDepositEvent = TypedEvent<
  [string, string, number, BigNumber],
  RemoveDepositEventObject
>;

export type RemoveDepositEventFilter = TypedEventFilter<RemoveDepositEvent>;

export interface RemoveWithdrawalEventObject {
  account: string;
  token: string;
  season: number;
  amount: BigNumber;
}
export type RemoveWithdrawalEvent = TypedEvent<
  [string, string, number, BigNumber],
  RemoveWithdrawalEventObject
>;

export type RemoveWithdrawalEventFilter =
  TypedEventFilter<RemoveWithdrawalEvent>;

export interface RemoveWithdrawalsEventObject {
  account: string;
  token: string;
  seasons: number[];
  amount: BigNumber;
}
export type RemoveWithdrawalsEvent = TypedEvent<
  [string, string, number[], BigNumber],
  RemoveWithdrawalsEventObject
>;

export type RemoveWithdrawalsEventFilter =
  TypedEventFilter<RemoveWithdrawalsEvent>;

export interface SeedsBalanceChangedEventObject {
  account: string;
  delta: BigNumber;
}
export type SeedsBalanceChangedEvent = TypedEvent<
  [string, BigNumber],
  SeedsBalanceChangedEventObject
>;

export type SeedsBalanceChangedEventFilter =
  TypedEventFilter<SeedsBalanceChangedEvent>;

export interface StalkBalanceChangedEventObject {
  account: string;
  delta: BigNumber;
  deltaRoots: BigNumber;
}
export type StalkBalanceChangedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  StalkBalanceChangedEventObject
>;

export type StalkBalanceChangedEventFilter =
  TypedEventFilter<StalkBalanceChangedEvent>;

export interface InternalBalanceChangedEventObject {
  user: string;
  token: string;
  delta: BigNumber;
}
export type InternalBalanceChangedEvent = TypedEvent<
  [string, string, BigNumber],
  InternalBalanceChangedEventObject
>;

export type InternalBalanceChangedEventFilter =
  TypedEventFilter<InternalBalanceChangedEvent>;

export interface AddUnripeTokenEventObject {
  unripeToken: string;
  underlyingToken: string;
  merkleRoot: string;
}
export type AddUnripeTokenEvent = TypedEvent<
  [string, string, string],
  AddUnripeTokenEventObject
>;

export type AddUnripeTokenEventFilter = TypedEventFilter<AddUnripeTokenEvent>;

export interface ChangeUnderlyingEventObject {
  token: string;
  underlying: BigNumber;
}
export type ChangeUnderlyingEvent = TypedEvent<
  [string, BigNumber],
  ChangeUnderlyingEventObject
>;

export type ChangeUnderlyingEventFilter =
  TypedEventFilter<ChangeUnderlyingEvent>;

export interface ClaimUnripeEventObject {
  account: string;
  token: string;
  amount: BigNumber;
}
export type ClaimUnripeEvent = TypedEvent<
  [string, string, BigNumber],
  ClaimUnripeEventObject
>;

export type ClaimUnripeEventFilter = TypedEventFilter<ClaimUnripeEvent>;

export interface RipenEventObject {
  account: string;
  token: string;
  amount: BigNumber;
  underlying: BigNumber;
}
export type RipenEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  RipenEventObject
>;

export type RipenEventFilter = TypedEventFilter<RipenEvent>;

export interface DewhitelistTokenEventObject {
  token: string;
}
export type DewhitelistTokenEvent = TypedEvent<
  [string],
  DewhitelistTokenEventObject
>;

export type DewhitelistTokenEventFilter =
  TypedEventFilter<DewhitelistTokenEvent>;

export interface WhitelistTokenEventObject {
  token: string;
  selector: string;
  seeds: BigNumber;
  stalk: BigNumber;
}
export type WhitelistTokenEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  WhitelistTokenEventObject
>;

export type WhitelistTokenEventFilter = TypedEventFilter<WhitelistTokenEvent>;

export interface BeanstalkReplanted extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BeanstalkReplantedInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    bdv(
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    beanToBDV(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    curveToBDV(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    unripeBeanToBDV(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    unripeLPToBDV(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    convert(
      convertData: BytesLike,
      crates: BigNumberish[],
      amounts: BigNumberish[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getAmountOut(
      tokenIn: string,
      tokenOut: string,
      amountIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amountOut: BigNumber }>;

    getMaxAmountIn(
      tokenIn: string,
      tokenOut: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amountIn: BigNumber }>;

    addLiquidity(
      pool: string,
      registry: string,
      amounts: BigNumberish[],
      minAmountOut: BigNumberish,
      fromMode: BigNumberish,
      toMode: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    exchange(
      pool: string,
      registry: string,
      fromToken: string,
      toToken: string,
      amountIn: BigNumberish,
      minAmountOut: BigNumberish,
      fromMode: BigNumberish,
      toMode: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    exchangeUnderlying(
      pool: string,
      fromToken: string,
      toToken: string,
      amountIn: BigNumberish,
      minAmountOut: BigNumberish,
      fromMode: BigNumberish,
      toMode: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeLiquidity(
      pool: string,
      registry: string,
      amountIn: BigNumberish,
      minAmountsOut: BigNumberish[],
      fromMode: BigNumberish,
      toMode: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeLiquidityImbalance(
      pool: string,
      registry: string,
      amountsOut: BigNumberish[],
      maxAmountIn: BigNumberish,
      fromMode: BigNumberish,
      toMode: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeLiquidityOneToken(
      pool: string,
      registry: string,
      toToken: string,
      amountIn: BigNumberish,
      minAmountOut: BigNumberish,
      fromMode: BigNumberish,
      toMode: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    diamondCut(
      _diamondCut: IDiamondCut.FacetCutStruct[],
      _init: string,
      _calldata: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    facetAddress(
      _functionSelector: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string] & { facetAddress_: string }>;

    facetAddresses(
      overrides?: CallOverrides
    ): Promise<[string[]] & { facetAddresses_: string[] }>;

    facetFunctionSelectors(
      _facet: string,
      overrides?: CallOverrides
    ): Promise<[string[]] & { facetFunctionSelectors_: string[] }>;

    facets(
      overrides?: CallOverrides
    ): Promise<
      [IDiamondLoupe.FacetStructOutput[]] & {
        facets_: IDiamondLoupe.FacetStructOutput[];
      }
    >;

    supportsInterface(
      _interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    farm(
      data: BytesLike[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addFertilizerOwner(
      id: BigNumberish,
      amount: BigNumberish,
      minLP: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balanceOfBatchFertilizer(
      accounts: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[IFertilizer.BalanceStructOutput[]]>;

    balanceOfFertilized(
      account: string,
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { beans: BigNumber }>;

    balanceOfFertilizer(
      account: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[IFertilizer.BalanceStructOutput]>;

    balanceOfUnfertilized(
      account: string,
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { beans: BigNumber }>;

    beansPerFertilizer(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { bpf: BigNumber }>;

    claimFertilized(
      ids: BigNumberish[],
      mode: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getActiveFertilizer(overrides?: CallOverrides): Promise<[BigNumber]>;

    getEndBpf(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { endBpf: BigNumber }>;

    getFertilizer(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getFirst(overrides?: CallOverrides): Promise<[BigNumber]>;

    getHumidity(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { humidity: BigNumber }>;

    getLast(overrides?: CallOverrides): Promise<[BigNumber]>;

    getNext(id: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    isFertilizing(overrides?: CallOverrides): Promise<[boolean]>;

    mintFertilizer(
      amount: BigNumberish,
      minLP: BigNumberish,
      mode: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    payFertilizer(
      account: string,
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    remainingRecapitalization(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalFertilizedBeans(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { beans: BigNumber }>;

    totalFertilizerBeans(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { beans: BigNumber }>;

    totalUnfertilizedBeans(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { beans: BigNumber }>;

    harvest(
      plots: BigNumberish[],
      mode: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    harvestableIndex(overrides?: CallOverrides): Promise<[BigNumber]>;

    plot(
      account: string,
      plotId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    podIndex(overrides?: CallOverrides): Promise<[BigNumber]>;

    sow(
      amount: BigNumberish,
      mode: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sowWithMin(
      amount: BigNumberish,
      minAmount: BigNumberish,
      mode: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    totalHarvestable(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalHarvested(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalPods(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalSoil(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalUnharvestable(overrides?: CallOverrides): Promise<[BigNumber]>;

    createFundraiser(
      payee: string,
      token: string,
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    fund(
      id: BigNumberish,
      amount: BigNumberish,
      mode: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    fundingToken(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    fundraiser(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[Storage.FundraiserStructOutput]>;

    numberOfFundraisers(overrides?: CallOverrides): Promise<[number]>;

    remainingFunding(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    totalFunding(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    allowancePods(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    approvePods(
      spender: string,
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cancelPodListing(
      index: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cancelPodOrder(
      pricePerPod: BigNumberish,
      maxPlaceInLine: BigNumberish,
      mode: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createPodListing(
      index: BigNumberish,
      start: BigNumberish,
      amount: BigNumberish,
      pricePerPod: BigNumberish,
      maxHarvestableIndex: BigNumberish,
      mode: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createPodOrder(
      beanAmount: BigNumberish,
      pricePerPod: BigNumberish,
      maxPlaceInLine: BigNumberish,
      mode: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    fillPodListing(
      l: Listing.PodListingStruct,
      beanAmount: BigNumberish,
      mode: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    fillPodOrder(
      o: Order.PodOrderStruct,
      index: BigNumberish,
      start: BigNumberish,
      amount: BigNumberish,
      mode: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    podListing(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    podOrder(
      account: string,
      pricePerPod: BigNumberish,
      maxPlaceInLine: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    podOrderById(
      id: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    transferPlot(
      sender: string,
      recipient: string,
      id: BigNumberish,
      start: BigNumberish,
      end: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string] & { owner_: string }>;

    transferOwnership(
      _newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    pause(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unpause(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    plentyPerRoot(
      season: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    poolDeltaB(
      pool: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { bdv: BigNumber }>;

    rain(overrides?: CallOverrides): Promise<[Storage.RainStructOutput]>;

    season(overrides?: CallOverrides): Promise<[number]>;

    seasonTime(overrides?: CallOverrides): Promise<[number]>;

    sunrise(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    time(overrides?: CallOverrides): Promise<[Storage.SeasonStructOutput]>;

    totalDeltaB(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { deltaB: BigNumber }>;

    weather(overrides?: CallOverrides): Promise<[Storage.WeatherStructOutput]>;

    yield(overrides?: CallOverrides): Promise<[number]>;

    balanceOfEarnedBeans(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { beans: BigNumber }>;

    balanceOfEarnedSeeds(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    balanceOfEarnedStalk(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    balanceOfGrownStalk(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    balanceOfPlenty(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { plenty: BigNumber }>;

    balanceOfRainRoots(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    balanceOfRoots(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    balanceOfSeeds(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    balanceOfSop(
      account: string,
      overrides?: CallOverrides
    ): Promise<
      [SiloExit.AccountSeasonOfPlentyStructOutput] & {
        sop: SiloExit.AccountSeasonOfPlentyStructOutput;
      }
    >;

    balanceOfStalk(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    claimPlenty(
      account: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimWithdrawal(
      token: string,
      season: BigNumberish,
      mode: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimWithdrawals(
      token: string,
      seasons: BigNumberish[],
      mode: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deposit(
      token: string,
      amount: BigNumberish,
      mode: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    earn(
      account: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getDeposit(
      account: string,
      token: string,
      season: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    getTotalDeposited(
      token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTotalWithdrawn(
      token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getWithdrawal(
      account: string,
      token: string,
      season: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    lastSeasonOfPlenty(overrides?: CallOverrides): Promise<[number]>;

    lastUpdate(account: string, overrides?: CallOverrides): Promise<[number]>;

    tokenSettings(
      token: string,
      overrides?: CallOverrides
    ): Promise<[Storage.SiloSettingsStructOutput]>;

    totalEarnedBeans(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalRoots(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalSeeds(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalStalk(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferDeposit(
      recipient: string,
      token: string,
      season: BigNumberish,
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferDeposits(
      recipient: string,
      token: string,
      seasons: BigNumberish[],
      amounts: BigNumberish[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    update(
      account: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateUnripeDeposit(
      token: string,
      _season: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateUnripeDeposits(
      token: string,
      seasons: BigNumberish[],
      amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawDeposit(
      token: string,
      season: BigNumberish,
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawDeposits(
      token: string,
      seasons: BigNumberish[],
      amounts: BigNumberish[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawFreeze(overrides?: CallOverrides): Promise<[number]>;

    getAllBalance(
      account: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<
      [TokenFacet.BalanceStructOutput] & { b: TokenFacet.BalanceStructOutput }
    >;

    getAllBalances(
      account: string,
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<
      [TokenFacet.BalanceStructOutput[]] & {
        balances: TokenFacet.BalanceStructOutput[];
      }
    >;

    getBalance(
      account: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { balance: BigNumber }>;

    getBalances(
      account: string,
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { balances: BigNumber[] }>;

    getExternalBalance(
      account: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { balance: BigNumber }>;

    getExternalBalances(
      account: string,
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { balances: BigNumber[] }>;

    getInternalBalance(
      account: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { balance: BigNumber }>;

    getInternalBalances(
      account: string,
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { balances: BigNumber[] }>;

    transferToken(
      token: string,
      recipient: string,
      amount: BigNumberish,
      fromMode: BigNumberish,
      toMode: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unwrapEth(
      amount: BigNumberish,
      mode: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    wrapEth(
      amount: BigNumberish,
      mode: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addUnripeToken(
      unripeToken: string,
      underlyingToken: string,
      root: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balanceOfPenalizedUnderlying(
      unripeToken: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { underlying: BigNumber }>;

    balanceOfUnderlying(
      unripeToken: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { underlying: BigNumber }>;

    claimUnripe(
      token: string,
      amount: BigNumberish,
      proof: BytesLike[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getPenalizedUnderlying(
      unripeToken: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { redeem: BigNumber }>;

    getPenalty(
      unripeToken: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { penalty: BigNumber }>;

    getPercentPenalty(
      unripeToken: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { penalty: BigNumber }>;

    getRecapFundedPercent(
      unripeToken: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { percent: BigNumber }>;

    getRecapPaidPercent(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { penalty: BigNumber }>;

    getTotalUnderlying(
      unripeToken: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { underlying: BigNumber }>;

    getUnderlying(
      unripeToken: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { redeem: BigNumber }>;

    getUnderlyingPerUnripeToken(
      unripeToken: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { underlyingPerToken: BigNumber }>;

    isUnripe(
      unripeToken: string,
      overrides?: CallOverrides
    ): Promise<[boolean] & { unripe: boolean }>;

    ripen(
      unripeToken: string,
      amount: BigNumberish,
      mode: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    dewhitelistToken(
      token: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    whitelistToken(
      token: string,
      selector: BytesLike,
      stalk: BigNumberish,
      seeds: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  bdv(
    token: string,
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  beanToBDV(
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  curveToBDV(
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  unripeBeanToBDV(
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  unripeLPToBDV(
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  convert(
    convertData: BytesLike,
    crates: BigNumberish[],
    amounts: BigNumberish[],
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getAmountOut(
    tokenIn: string,
    tokenOut: string,
    amountIn: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getMaxAmountIn(
    tokenIn: string,
    tokenOut: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  addLiquidity(
    pool: string,
    registry: string,
    amounts: BigNumberish[],
    minAmountOut: BigNumberish,
    fromMode: BigNumberish,
    toMode: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  exchange(
    pool: string,
    registry: string,
    fromToken: string,
    toToken: string,
    amountIn: BigNumberish,
    minAmountOut: BigNumberish,
    fromMode: BigNumberish,
    toMode: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  exchangeUnderlying(
    pool: string,
    fromToken: string,
    toToken: string,
    amountIn: BigNumberish,
    minAmountOut: BigNumberish,
    fromMode: BigNumberish,
    toMode: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeLiquidity(
    pool: string,
    registry: string,
    amountIn: BigNumberish,
    minAmountsOut: BigNumberish[],
    fromMode: BigNumberish,
    toMode: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeLiquidityImbalance(
    pool: string,
    registry: string,
    amountsOut: BigNumberish[],
    maxAmountIn: BigNumberish,
    fromMode: BigNumberish,
    toMode: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeLiquidityOneToken(
    pool: string,
    registry: string,
    toToken: string,
    amountIn: BigNumberish,
    minAmountOut: BigNumberish,
    fromMode: BigNumberish,
    toMode: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  diamondCut(
    _diamondCut: IDiamondCut.FacetCutStruct[],
    _init: string,
    _calldata: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  facetAddress(
    _functionSelector: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  facetAddresses(overrides?: CallOverrides): Promise<string[]>;

  facetFunctionSelectors(
    _facet: string,
    overrides?: CallOverrides
  ): Promise<string[]>;

  facets(overrides?: CallOverrides): Promise<IDiamondLoupe.FacetStructOutput[]>;

  supportsInterface(
    _interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  farm(
    data: BytesLike[],
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addFertilizerOwner(
    id: BigNumberish,
    amount: BigNumberish,
    minLP: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balanceOfBatchFertilizer(
    accounts: string[],
    ids: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<IFertilizer.BalanceStructOutput[]>;

  balanceOfFertilized(
    account: string,
    ids: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  balanceOfFertilizer(
    account: string,
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<IFertilizer.BalanceStructOutput>;

  balanceOfUnfertilized(
    account: string,
    ids: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  beansPerFertilizer(overrides?: CallOverrides): Promise<BigNumber>;

  claimFertilized(
    ids: BigNumberish[],
    mode: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getActiveFertilizer(overrides?: CallOverrides): Promise<BigNumber>;

  getEndBpf(overrides?: CallOverrides): Promise<BigNumber>;

  getFertilizer(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getFirst(overrides?: CallOverrides): Promise<BigNumber>;

  getHumidity(id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  getLast(overrides?: CallOverrides): Promise<BigNumber>;

  getNext(id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  isFertilizing(overrides?: CallOverrides): Promise<boolean>;

  mintFertilizer(
    amount: BigNumberish,
    minLP: BigNumberish,
    mode: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  payFertilizer(
    account: string,
    amount: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  remainingRecapitalization(overrides?: CallOverrides): Promise<BigNumber>;

  totalFertilizedBeans(overrides?: CallOverrides): Promise<BigNumber>;

  totalFertilizerBeans(overrides?: CallOverrides): Promise<BigNumber>;

  totalUnfertilizedBeans(overrides?: CallOverrides): Promise<BigNumber>;

  harvest(
    plots: BigNumberish[],
    mode: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  harvestableIndex(overrides?: CallOverrides): Promise<BigNumber>;

  plot(
    account: string,
    plotId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  podIndex(overrides?: CallOverrides): Promise<BigNumber>;

  sow(
    amount: BigNumberish,
    mode: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sowWithMin(
    amount: BigNumberish,
    minAmount: BigNumberish,
    mode: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  totalHarvestable(overrides?: CallOverrides): Promise<BigNumber>;

  totalHarvested(overrides?: CallOverrides): Promise<BigNumber>;

  totalPods(overrides?: CallOverrides): Promise<BigNumber>;

  totalSoil(overrides?: CallOverrides): Promise<BigNumber>;

  totalUnharvestable(overrides?: CallOverrides): Promise<BigNumber>;

  createFundraiser(
    payee: string,
    token: string,
    amount: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  fund(
    id: BigNumberish,
    amount: BigNumberish,
    mode: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  fundingToken(id: BigNumberish, overrides?: CallOverrides): Promise<string>;

  fundraiser(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<Storage.FundraiserStructOutput>;

  numberOfFundraisers(overrides?: CallOverrides): Promise<number>;

  remainingFunding(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  totalFunding(id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  allowancePods(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approvePods(
    spender: string,
    amount: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cancelPodListing(
    index: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cancelPodOrder(
    pricePerPod: BigNumberish,
    maxPlaceInLine: BigNumberish,
    mode: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createPodListing(
    index: BigNumberish,
    start: BigNumberish,
    amount: BigNumberish,
    pricePerPod: BigNumberish,
    maxHarvestableIndex: BigNumberish,
    mode: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createPodOrder(
    beanAmount: BigNumberish,
    pricePerPod: BigNumberish,
    maxPlaceInLine: BigNumberish,
    mode: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  fillPodListing(
    l: Listing.PodListingStruct,
    beanAmount: BigNumberish,
    mode: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  fillPodOrder(
    o: Order.PodOrderStruct,
    index: BigNumberish,
    start: BigNumberish,
    amount: BigNumberish,
    mode: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  podListing(index: BigNumberish, overrides?: CallOverrides): Promise<string>;

  podOrder(
    account: string,
    pricePerPod: BigNumberish,
    maxPlaceInLine: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  podOrderById(id: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

  transferPlot(
    sender: string,
    recipient: string,
    id: BigNumberish,
    start: BigNumberish,
    end: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    _newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  pause(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unpause(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  plentyPerRoot(
    season: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  poolDeltaB(pool: string, overrides?: CallOverrides): Promise<BigNumber>;

  rain(overrides?: CallOverrides): Promise<Storage.RainStructOutput>;

  season(overrides?: CallOverrides): Promise<number>;

  seasonTime(overrides?: CallOverrides): Promise<number>;

  sunrise(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  time(overrides?: CallOverrides): Promise<Storage.SeasonStructOutput>;

  totalDeltaB(overrides?: CallOverrides): Promise<BigNumber>;

  weather(overrides?: CallOverrides): Promise<Storage.WeatherStructOutput>;

  yield(overrides?: CallOverrides): Promise<number>;

  balanceOfEarnedBeans(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  balanceOfEarnedSeeds(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  balanceOfEarnedStalk(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  balanceOfGrownStalk(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  balanceOfPlenty(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  balanceOfRainRoots(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  balanceOfRoots(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  balanceOfSeeds(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  balanceOfSop(
    account: string,
    overrides?: CallOverrides
  ): Promise<SiloExit.AccountSeasonOfPlentyStructOutput>;

  balanceOfStalk(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  claimPlenty(
    account: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimWithdrawal(
    token: string,
    season: BigNumberish,
    mode: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimWithdrawals(
    token: string,
    seasons: BigNumberish[],
    mode: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deposit(
    token: string,
    amount: BigNumberish,
    mode: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  earn(
    account: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getDeposit(
    account: string,
    token: string,
    season: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  getTotalDeposited(
    token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTotalWithdrawn(
    token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getWithdrawal(
    account: string,
    token: string,
    season: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  lastSeasonOfPlenty(overrides?: CallOverrides): Promise<number>;

  lastUpdate(account: string, overrides?: CallOverrides): Promise<number>;

  tokenSettings(
    token: string,
    overrides?: CallOverrides
  ): Promise<Storage.SiloSettingsStructOutput>;

  totalEarnedBeans(overrides?: CallOverrides): Promise<BigNumber>;

  totalRoots(overrides?: CallOverrides): Promise<BigNumber>;

  totalSeeds(overrides?: CallOverrides): Promise<BigNumber>;

  totalStalk(overrides?: CallOverrides): Promise<BigNumber>;

  transferDeposit(
    recipient: string,
    token: string,
    season: BigNumberish,
    amount: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferDeposits(
    recipient: string,
    token: string,
    seasons: BigNumberish[],
    amounts: BigNumberish[],
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  update(
    account: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateUnripeDeposit(
    token: string,
    _season: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateUnripeDeposits(
    token: string,
    seasons: BigNumberish[],
    amounts: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawDeposit(
    token: string,
    season: BigNumberish,
    amount: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawDeposits(
    token: string,
    seasons: BigNumberish[],
    amounts: BigNumberish[],
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawFreeze(overrides?: CallOverrides): Promise<number>;

  getAllBalance(
    account: string,
    token: string,
    overrides?: CallOverrides
  ): Promise<TokenFacet.BalanceStructOutput>;

  getAllBalances(
    account: string,
    tokens: string[],
    overrides?: CallOverrides
  ): Promise<TokenFacet.BalanceStructOutput[]>;

  getBalance(
    account: string,
    token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getBalances(
    account: string,
    tokens: string[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getExternalBalance(
    account: string,
    token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getExternalBalances(
    account: string,
    tokens: string[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getInternalBalance(
    account: string,
    token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getInternalBalances(
    account: string,
    tokens: string[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  transferToken(
    token: string,
    recipient: string,
    amount: BigNumberish,
    fromMode: BigNumberish,
    toMode: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unwrapEth(
    amount: BigNumberish,
    mode: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  wrapEth(
    amount: BigNumberish,
    mode: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addUnripeToken(
    unripeToken: string,
    underlyingToken: string,
    root: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balanceOfPenalizedUnderlying(
    unripeToken: string,
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  balanceOfUnderlying(
    unripeToken: string,
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  claimUnripe(
    token: string,
    amount: BigNumberish,
    proof: BytesLike[],
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getPenalizedUnderlying(
    unripeToken: string,
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPenalty(
    unripeToken: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPercentPenalty(
    unripeToken: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRecapFundedPercent(
    unripeToken: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRecapPaidPercent(overrides?: CallOverrides): Promise<BigNumber>;

  getTotalUnderlying(
    unripeToken: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getUnderlying(
    unripeToken: string,
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getUnderlyingPerUnripeToken(
    unripeToken: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  isUnripe(unripeToken: string, overrides?: CallOverrides): Promise<boolean>;

  ripen(
    unripeToken: string,
    amount: BigNumberish,
    mode: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  dewhitelistToken(
    token: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  whitelistToken(
    token: string,
    selector: BytesLike,
    stalk: BigNumberish,
    seeds: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    bdv(
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    beanToBDV(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    curveToBDV(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unripeBeanToBDV(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unripeLPToBDV(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    convert(
      convertData: BytesLike,
      crates: BigNumberish[],
      amounts: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    getAmountOut(
      tokenIn: string,
      tokenOut: string,
      amountIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMaxAmountIn(
      tokenIn: string,
      tokenOut: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addLiquidity(
      pool: string,
      registry: string,
      amounts: BigNumberish[],
      minAmountOut: BigNumberish,
      fromMode: BigNumberish,
      toMode: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    exchange(
      pool: string,
      registry: string,
      fromToken: string,
      toToken: string,
      amountIn: BigNumberish,
      minAmountOut: BigNumberish,
      fromMode: BigNumberish,
      toMode: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    exchangeUnderlying(
      pool: string,
      fromToken: string,
      toToken: string,
      amountIn: BigNumberish,
      minAmountOut: BigNumberish,
      fromMode: BigNumberish,
      toMode: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    removeLiquidity(
      pool: string,
      registry: string,
      amountIn: BigNumberish,
      minAmountsOut: BigNumberish[],
      fromMode: BigNumberish,
      toMode: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    removeLiquidityImbalance(
      pool: string,
      registry: string,
      amountsOut: BigNumberish[],
      maxAmountIn: BigNumberish,
      fromMode: BigNumberish,
      toMode: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    removeLiquidityOneToken(
      pool: string,
      registry: string,
      toToken: string,
      amountIn: BigNumberish,
      minAmountOut: BigNumberish,
      fromMode: BigNumberish,
      toMode: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    diamondCut(
      _diamondCut: IDiamondCut.FacetCutStruct[],
      _init: string,
      _calldata: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    facetAddress(
      _functionSelector: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    facetAddresses(overrides?: CallOverrides): Promise<string[]>;

    facetFunctionSelectors(
      _facet: string,
      overrides?: CallOverrides
    ): Promise<string[]>;

    facets(
      overrides?: CallOverrides
    ): Promise<IDiamondLoupe.FacetStructOutput[]>;

    supportsInterface(
      _interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    farm(data: BytesLike[], overrides?: CallOverrides): Promise<void>;

    addFertilizerOwner(
      id: BigNumberish,
      amount: BigNumberish,
      minLP: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    balanceOfBatchFertilizer(
      accounts: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<IFertilizer.BalanceStructOutput[]>;

    balanceOfFertilized(
      account: string,
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfFertilizer(
      account: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<IFertilizer.BalanceStructOutput>;

    balanceOfUnfertilized(
      account: string,
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    beansPerFertilizer(overrides?: CallOverrides): Promise<BigNumber>;

    claimFertilized(
      ids: BigNumberish[],
      mode: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getActiveFertilizer(overrides?: CallOverrides): Promise<BigNumber>;

    getEndBpf(overrides?: CallOverrides): Promise<BigNumber>;

    getFertilizer(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFirst(overrides?: CallOverrides): Promise<BigNumber>;

    getHumidity(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLast(overrides?: CallOverrides): Promise<BigNumber>;

    getNext(id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    isFertilizing(overrides?: CallOverrides): Promise<boolean>;

    mintFertilizer(
      amount: BigNumberish,
      minLP: BigNumberish,
      mode: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    payFertilizer(
      account: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    remainingRecapitalization(overrides?: CallOverrides): Promise<BigNumber>;

    totalFertilizedBeans(overrides?: CallOverrides): Promise<BigNumber>;

    totalFertilizerBeans(overrides?: CallOverrides): Promise<BigNumber>;

    totalUnfertilizedBeans(overrides?: CallOverrides): Promise<BigNumber>;

    harvest(
      plots: BigNumberish[],
      mode: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    harvestableIndex(overrides?: CallOverrides): Promise<BigNumber>;

    plot(
      account: string,
      plotId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    podIndex(overrides?: CallOverrides): Promise<BigNumber>;

    sow(
      amount: BigNumberish,
      mode: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sowWithMin(
      amount: BigNumberish,
      minAmount: BigNumberish,
      mode: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalHarvestable(overrides?: CallOverrides): Promise<BigNumber>;

    totalHarvested(overrides?: CallOverrides): Promise<BigNumber>;

    totalPods(overrides?: CallOverrides): Promise<BigNumber>;

    totalSoil(overrides?: CallOverrides): Promise<BigNumber>;

    totalUnharvestable(overrides?: CallOverrides): Promise<BigNumber>;

    createFundraiser(
      payee: string,
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    fund(
      id: BigNumberish,
      amount: BigNumberish,
      mode: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fundingToken(id: BigNumberish, overrides?: CallOverrides): Promise<string>;

    fundraiser(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<Storage.FundraiserStructOutput>;

    numberOfFundraisers(overrides?: CallOverrides): Promise<number>;

    remainingFunding(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalFunding(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    allowancePods(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approvePods(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    cancelPodListing(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    cancelPodOrder(
      pricePerPod: BigNumberish,
      maxPlaceInLine: BigNumberish,
      mode: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    createPodListing(
      index: BigNumberish,
      start: BigNumberish,
      amount: BigNumberish,
      pricePerPod: BigNumberish,
      maxHarvestableIndex: BigNumberish,
      mode: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    createPodOrder(
      beanAmount: BigNumberish,
      pricePerPod: BigNumberish,
      maxPlaceInLine: BigNumberish,
      mode: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    fillPodListing(
      l: Listing.PodListingStruct,
      beanAmount: BigNumberish,
      mode: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    fillPodOrder(
      o: Order.PodOrderStruct,
      index: BigNumberish,
      start: BigNumberish,
      amount: BigNumberish,
      mode: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    podListing(index: BigNumberish, overrides?: CallOverrides): Promise<string>;

    podOrder(
      account: string,
      pricePerPod: BigNumberish,
      maxPlaceInLine: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    podOrderById(id: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    transferPlot(
      sender: string,
      recipient: string,
      id: BigNumberish,
      start: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      _newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    pause(overrides?: CallOverrides): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    plentyPerRoot(
      season: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolDeltaB(pool: string, overrides?: CallOverrides): Promise<BigNumber>;

    rain(overrides?: CallOverrides): Promise<Storage.RainStructOutput>;

    season(overrides?: CallOverrides): Promise<number>;

    seasonTime(overrides?: CallOverrides): Promise<number>;

    sunrise(overrides?: CallOverrides): Promise<void>;

    time(overrides?: CallOverrides): Promise<Storage.SeasonStructOutput>;

    totalDeltaB(overrides?: CallOverrides): Promise<BigNumber>;

    weather(overrides?: CallOverrides): Promise<Storage.WeatherStructOutput>;

    yield(overrides?: CallOverrides): Promise<number>;

    balanceOfEarnedBeans(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfEarnedSeeds(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfEarnedStalk(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfGrownStalk(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfPlenty(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfRainRoots(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfRoots(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfSeeds(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfSop(
      account: string,
      overrides?: CallOverrides
    ): Promise<SiloExit.AccountSeasonOfPlentyStructOutput>;

    balanceOfStalk(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimPlenty(account: string, overrides?: CallOverrides): Promise<void>;

    claimWithdrawal(
      token: string,
      season: BigNumberish,
      mode: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    claimWithdrawals(
      token: string,
      seasons: BigNumberish[],
      mode: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    deposit(
      token: string,
      amount: BigNumberish,
      mode: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    earn(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    getDeposit(
      account: string,
      token: string,
      season: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    getTotalDeposited(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalWithdrawn(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getWithdrawal(
      account: string,
      token: string,
      season: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lastSeasonOfPlenty(overrides?: CallOverrides): Promise<number>;

    lastUpdate(account: string, overrides?: CallOverrides): Promise<number>;

    tokenSettings(
      token: string,
      overrides?: CallOverrides
    ): Promise<Storage.SiloSettingsStructOutput>;

    totalEarnedBeans(overrides?: CallOverrides): Promise<BigNumber>;

    totalRoots(overrides?: CallOverrides): Promise<BigNumber>;

    totalSeeds(overrides?: CallOverrides): Promise<BigNumber>;

    totalStalk(overrides?: CallOverrides): Promise<BigNumber>;

    transferDeposit(
      recipient: string,
      token: string,
      season: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferDeposits(
      recipient: string,
      token: string,
      seasons: BigNumberish[],
      amounts: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    update(account: string, overrides?: CallOverrides): Promise<void>;

    updateUnripeDeposit(
      token: string,
      _season: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateUnripeDeposits(
      token: string,
      seasons: BigNumberish[],
      amounts: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawDeposit(
      token: string,
      season: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawDeposits(
      token: string,
      seasons: BigNumberish[],
      amounts: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawFreeze(overrides?: CallOverrides): Promise<number>;

    getAllBalance(
      account: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<TokenFacet.BalanceStructOutput>;

    getAllBalances(
      account: string,
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<TokenFacet.BalanceStructOutput[]>;

    getBalance(
      account: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBalances(
      account: string,
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getExternalBalance(
      account: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getExternalBalances(
      account: string,
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getInternalBalance(
      account: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getInternalBalances(
      account: string,
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    transferToken(
      token: string,
      recipient: string,
      amount: BigNumberish,
      fromMode: BigNumberish,
      toMode: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    unwrapEth(
      amount: BigNumberish,
      mode: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    wrapEth(
      amount: BigNumberish,
      mode: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    addUnripeToken(
      unripeToken: string,
      underlyingToken: string,
      root: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    balanceOfPenalizedUnderlying(
      unripeToken: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfUnderlying(
      unripeToken: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimUnripe(
      token: string,
      amount: BigNumberish,
      proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    getPenalizedUnderlying(
      unripeToken: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPenalty(
      unripeToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPercentPenalty(
      unripeToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRecapFundedPercent(
      unripeToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRecapPaidPercent(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalUnderlying(
      unripeToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUnderlying(
      unripeToken: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUnderlyingPerUnripeToken(
      unripeToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isUnripe(unripeToken: string, overrides?: CallOverrides): Promise<boolean>;

    ripen(
      unripeToken: string,
      amount: BigNumberish,
      mode: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    dewhitelistToken(token: string, overrides?: CallOverrides): Promise<void>;

    whitelistToken(
      token: string,
      selector: BytesLike,
      stalk: BigNumberish,
      seeds: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Convert(address,address,address,uint256,uint256)"(
      account?: string | null,
      fromToken?: null,
      toToken?: null,
      fromAmount?: null,
      toAmount?: null
    ): ConvertEventFilter;
    Convert(
      account?: string | null,
      fromToken?: null,
      toToken?: null,
      fromAmount?: null,
      toAmount?: null
    ): ConvertEventFilter;

    "RemoveDeposits(address,address,uint32[],uint256[],uint256)"(
      account?: string | null,
      token?: string | null,
      seasons?: null,
      amounts?: null,
      amount?: null
    ): RemoveDeposits_address_address_uint32_array_uint256_array_uint256_EventFilter;
    "RemoveDeposits(address,address,uint32[],uint256[],uint256)"(
      account?: string | null,
      token?: string | null,
      seasons?: null,
      amounts?: null,
      amount?: null
    ): RemoveDeposits_address_address_uint32_array_uint256_array_uint256_EventFilter;

    "DiamondCut(tuple[],address,bytes)"(
      _diamondCut?: null,
      _init?: null,
      _calldata?: null
    ): DiamondCutEventFilter;
    DiamondCut(
      _diamondCut?: null,
      _init?: null,
      _calldata?: null
    ): DiamondCutEventFilter;

    "SetFertilizer(uint128,uint128)"(
      id?: null,
      bpf?: null
    ): SetFertilizerEventFilter;
    SetFertilizer(id?: null, bpf?: null): SetFertilizerEventFilter;

    "Harvest(address,uint256[],uint256)"(
      account?: string | null,
      plots?: null,
      beans?: null
    ): HarvestEventFilter;
    Harvest(
      account?: string | null,
      plots?: null,
      beans?: null
    ): HarvestEventFilter;

    "PodListingCancelled(address,uint256)"(
      account?: string | null,
      index?: null
    ): PodListingCancelled_address_uint256_EventFilter;
    "PodListingCancelled(address,uint256)"(
      account?: string | null,
      index?: null
    ): PodListingCancelled_address_uint256_EventFilter;

    "Sow(address,uint256,uint256,uint256)"(
      account?: string | null,
      index?: null,
      beans?: null,
      pods?: null
    ): SowEventFilter;
    Sow(
      account?: string | null,
      index?: null,
      beans?: null,
      pods?: null
    ): SowEventFilter;

    "CompleteFundraiser(uint32)"(
      id?: BigNumberish | null
    ): CompleteFundraiserEventFilter;
    CompleteFundraiser(id?: BigNumberish | null): CompleteFundraiserEventFilter;

    "CreateFundraiser(uint32,address,address,uint256)"(
      id?: BigNumberish | null,
      fundraiser?: null,
      token?: null,
      amount?: null
    ): CreateFundraiserEventFilter;
    CreateFundraiser(
      id?: BigNumberish | null,
      fundraiser?: null,
      token?: null,
      amount?: null
    ): CreateFundraiserEventFilter;

    "FundFundraiser(address,uint32,uint256)"(
      account?: string | null,
      id?: BigNumberish | null,
      amount?: null
    ): FundFundraiserEventFilter;
    FundFundraiser(
      account?: string | null,
      id?: BigNumberish | null,
      amount?: null
    ): FundFundraiserEventFilter;

    "PlotTransfer(address,address,uint256,uint256)"(
      from?: string | null,
      to?: string | null,
      id?: BigNumberish | null,
      pods?: null
    ): PlotTransferEventFilter;
    PlotTransfer(
      from?: string | null,
      to?: string | null,
      id?: BigNumberish | null,
      pods?: null
    ): PlotTransferEventFilter;

    "PodApproval(address,address,uint256)"(
      owner?: string | null,
      spender?: string | null,
      pods?: null
    ): PodApprovalEventFilter;
    PodApproval(
      owner?: string | null,
      spender?: string | null,
      pods?: null
    ): PodApprovalEventFilter;

    "PodListingCreated(address,uint256,uint256,uint256,uint24,uint256,uint8)"(
      account?: string | null,
      index?: null,
      start?: null,
      amount?: null,
      pricePerPod?: null,
      maxHarvestableIndex?: null,
      mode?: null
    ): PodListingCreatedEventFilter;
    PodListingCreated(
      account?: string | null,
      index?: null,
      start?: null,
      amount?: null,
      pricePerPod?: null,
      maxHarvestableIndex?: null,
      mode?: null
    ): PodListingCreatedEventFilter;

    "PodListingFilled(address,address,uint256,uint256,uint256)"(
      from?: string | null,
      to?: string | null,
      index?: null,
      start?: null,
      amount?: null
    ): PodListingFilledEventFilter;
    PodListingFilled(
      from?: string | null,
      to?: string | null,
      index?: null,
      start?: null,
      amount?: null
    ): PodListingFilledEventFilter;

    "PodOrderCancelled(address,bytes32)"(
      account?: string | null,
      id?: null
    ): PodOrderCancelledEventFilter;
    PodOrderCancelled(
      account?: string | null,
      id?: null
    ): PodOrderCancelledEventFilter;

    "PodOrderCreated(address,bytes32,uint256,uint24,uint256)"(
      account?: string | null,
      id?: null,
      amount?: null,
      pricePerPod?: null,
      maxPlaceInLine?: null
    ): PodOrderCreatedEventFilter;
    PodOrderCreated(
      account?: string | null,
      id?: null,
      amount?: null,
      pricePerPod?: null,
      maxPlaceInLine?: null
    ): PodOrderCreatedEventFilter;

    "PodOrderFilled(address,address,bytes32,uint256,uint256,uint256)"(
      from?: string | null,
      to?: string | null,
      id?: null,
      index?: null,
      start?: null,
      amount?: null
    ): PodOrderFilledEventFilter;
    PodOrderFilled(
      from?: string | null,
      to?: string | null,
      id?: null,
      index?: null,
      start?: null,
      amount?: null
    ): PodOrderFilledEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "Pause(uint256)"(timestamp?: null): PauseEventFilter;
    Pause(timestamp?: null): PauseEventFilter;

    "Unpause(uint256,uint256)"(
      timestamp?: null,
      timePassed?: null
    ): UnpauseEventFilter;
    Unpause(timestamp?: null, timePassed?: null): UnpauseEventFilter;

    "Incentivization(address,uint256)"(
      account?: string | null,
      beans?: null
    ): IncentivizationEventFilter;
    Incentivization(
      account?: string | null,
      beans?: null
    ): IncentivizationEventFilter;

    "Reward(uint256,uint256,uint256)"(
      toField?: null,
      toSilo?: null,
      toFertilizer?: null
    ): RewardEventFilter;
    Reward(
      toField?: null,
      toSilo?: null,
      toFertilizer?: null
    ): RewardEventFilter;

    "SeasonOfPlenty(uint256,uint256,uint256)"(
      season?: BigNumberish | null,
      amount?: null,
      toField?: null
    ): SeasonOfPlentyEventFilter;
    SeasonOfPlenty(
      season?: BigNumberish | null,
      amount?: null,
      toField?: null
    ): SeasonOfPlentyEventFilter;

    "Soil(uint256)"(soil?: null): SoilEventFilter;
    Soil(soil?: null): SoilEventFilter;

    "Sunrise(uint256)"(season?: BigNumberish | null): SunriseEventFilter;
    Sunrise(season?: BigNumberish | null): SunriseEventFilter;

    "WeatherChange(uint256,uint256,int8)"(
      season?: BigNumberish | null,
      caseId?: null,
      change?: null
    ): WeatherChangeEventFilter;
    WeatherChange(
      season?: BigNumberish | null,
      caseId?: null,
      change?: null
    ): WeatherChangeEventFilter;

    "AddDeposit(address,address,uint32,uint256,uint256)"(
      account?: string | null,
      token?: string | null,
      season?: null,
      amount?: null,
      bdv?: null
    ): AddDepositEventFilter;
    AddDeposit(
      account?: string | null,
      token?: string | null,
      season?: null,
      amount?: null,
      bdv?: null
    ): AddDepositEventFilter;

    "AddWithdrawal(address,address,uint32,uint256)"(
      account?: string | null,
      token?: string | null,
      season?: null,
      amount?: null
    ): AddWithdrawalEventFilter;
    AddWithdrawal(
      account?: string | null,
      token?: string | null,
      season?: null,
      amount?: null
    ): AddWithdrawalEventFilter;

    "ClaimPlenty(address,uint256)"(
      account?: string | null,
      plenty?: null
    ): ClaimPlentyEventFilter;
    ClaimPlenty(account?: string | null, plenty?: null): ClaimPlentyEventFilter;

    "Earn(address,uint256)"(
      account?: string | null,
      beans?: null
    ): EarnEventFilter;
    Earn(account?: string | null, beans?: null): EarnEventFilter;

    "RemoveDeposit(address,address,uint32,uint256)"(
      account?: string | null,
      token?: string | null,
      season?: null,
      amount?: null
    ): RemoveDepositEventFilter;
    RemoveDeposit(
      account?: string | null,
      token?: string | null,
      season?: null,
      amount?: null
    ): RemoveDepositEventFilter;

    "RemoveWithdrawal(address,address,uint32,uint256)"(
      account?: string | null,
      token?: string | null,
      season?: null,
      amount?: null
    ): RemoveWithdrawalEventFilter;
    RemoveWithdrawal(
      account?: string | null,
      token?: string | null,
      season?: null,
      amount?: null
    ): RemoveWithdrawalEventFilter;

    "RemoveWithdrawals(address,address,uint32[],uint256)"(
      account?: string | null,
      token?: string | null,
      seasons?: null,
      amount?: null
    ): RemoveWithdrawalsEventFilter;
    RemoveWithdrawals(
      account?: string | null,
      token?: string | null,
      seasons?: null,
      amount?: null
    ): RemoveWithdrawalsEventFilter;

    "SeedsBalanceChanged(address,int256)"(
      account?: string | null,
      delta?: null
    ): SeedsBalanceChangedEventFilter;
    SeedsBalanceChanged(
      account?: string | null,
      delta?: null
    ): SeedsBalanceChangedEventFilter;

    "StalkBalanceChanged(address,int256,int256)"(
      account?: string | null,
      delta?: null,
      deltaRoots?: null
    ): StalkBalanceChangedEventFilter;
    StalkBalanceChanged(
      account?: string | null,
      delta?: null,
      deltaRoots?: null
    ): StalkBalanceChangedEventFilter;

    "InternalBalanceChanged(address,address,int256)"(
      user?: string | null,
      token?: string | null,
      delta?: null
    ): InternalBalanceChangedEventFilter;
    InternalBalanceChanged(
      user?: string | null,
      token?: string | null,
      delta?: null
    ): InternalBalanceChangedEventFilter;

    "AddUnripeToken(address,address,bytes32)"(
      unripeToken?: string | null,
      underlyingToken?: string | null,
      merkleRoot?: null
    ): AddUnripeTokenEventFilter;
    AddUnripeToken(
      unripeToken?: string | null,
      underlyingToken?: string | null,
      merkleRoot?: null
    ): AddUnripeTokenEventFilter;

    "ChangeUnderlying(address,int256)"(
      token?: string | null,
      underlying?: null
    ): ChangeUnderlyingEventFilter;
    ChangeUnderlying(
      token?: string | null,
      underlying?: null
    ): ChangeUnderlyingEventFilter;

    "ClaimUnripe(address,address,uint256)"(
      account?: string | null,
      token?: string | null,
      amount?: null
    ): ClaimUnripeEventFilter;
    ClaimUnripe(
      account?: string | null,
      token?: string | null,
      amount?: null
    ): ClaimUnripeEventFilter;

    "Ripen(address,address,uint256,uint256)"(
      account?: string | null,
      token?: string | null,
      amount?: null,
      underlying?: null
    ): RipenEventFilter;
    Ripen(
      account?: string | null,
      token?: string | null,
      amount?: null,
      underlying?: null
    ): RipenEventFilter;

    "DewhitelistToken(address)"(
      token?: string | null
    ): DewhitelistTokenEventFilter;
    DewhitelistToken(token?: string | null): DewhitelistTokenEventFilter;

    "WhitelistToken(address,bytes4,uint256,uint256)"(
      token?: string | null,
      selector?: null,
      seeds?: null,
      stalk?: null
    ): WhitelistTokenEventFilter;
    WhitelistToken(
      token?: string | null,
      selector?: null,
      seeds?: null,
      stalk?: null
    ): WhitelistTokenEventFilter;
  };

  estimateGas: {
    bdv(
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    beanToBDV(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    curveToBDV(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unripeBeanToBDV(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unripeLPToBDV(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    convert(
      convertData: BytesLike,
      crates: BigNumberish[],
      amounts: BigNumberish[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getAmountOut(
      tokenIn: string,
      tokenOut: string,
      amountIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMaxAmountIn(
      tokenIn: string,
      tokenOut: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addLiquidity(
      pool: string,
      registry: string,
      amounts: BigNumberish[],
      minAmountOut: BigNumberish,
      fromMode: BigNumberish,
      toMode: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    exchange(
      pool: string,
      registry: string,
      fromToken: string,
      toToken: string,
      amountIn: BigNumberish,
      minAmountOut: BigNumberish,
      fromMode: BigNumberish,
      toMode: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    exchangeUnderlying(
      pool: string,
      fromToken: string,
      toToken: string,
      amountIn: BigNumberish,
      minAmountOut: BigNumberish,
      fromMode: BigNumberish,
      toMode: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeLiquidity(
      pool: string,
      registry: string,
      amountIn: BigNumberish,
      minAmountsOut: BigNumberish[],
      fromMode: BigNumberish,
      toMode: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeLiquidityImbalance(
      pool: string,
      registry: string,
      amountsOut: BigNumberish[],
      maxAmountIn: BigNumberish,
      fromMode: BigNumberish,
      toMode: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeLiquidityOneToken(
      pool: string,
      registry: string,
      toToken: string,
      amountIn: BigNumberish,
      minAmountOut: BigNumberish,
      fromMode: BigNumberish,
      toMode: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    diamondCut(
      _diamondCut: IDiamondCut.FacetCutStruct[],
      _init: string,
      _calldata: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    facetAddress(
      _functionSelector: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    facetAddresses(overrides?: CallOverrides): Promise<BigNumber>;

    facetFunctionSelectors(
      _facet: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    facets(overrides?: CallOverrides): Promise<BigNumber>;

    supportsInterface(
      _interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    farm(
      data: BytesLike[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addFertilizerOwner(
      id: BigNumberish,
      amount: BigNumberish,
      minLP: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balanceOfBatchFertilizer(
      accounts: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfFertilized(
      account: string,
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfFertilizer(
      account: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfUnfertilized(
      account: string,
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    beansPerFertilizer(overrides?: CallOverrides): Promise<BigNumber>;

    claimFertilized(
      ids: BigNumberish[],
      mode: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getActiveFertilizer(overrides?: CallOverrides): Promise<BigNumber>;

    getEndBpf(overrides?: CallOverrides): Promise<BigNumber>;

    getFertilizer(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFirst(overrides?: CallOverrides): Promise<BigNumber>;

    getHumidity(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLast(overrides?: CallOverrides): Promise<BigNumber>;

    getNext(id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    isFertilizing(overrides?: CallOverrides): Promise<BigNumber>;

    mintFertilizer(
      amount: BigNumberish,
      minLP: BigNumberish,
      mode: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    payFertilizer(
      account: string,
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    remainingRecapitalization(overrides?: CallOverrides): Promise<BigNumber>;

    totalFertilizedBeans(overrides?: CallOverrides): Promise<BigNumber>;

    totalFertilizerBeans(overrides?: CallOverrides): Promise<BigNumber>;

    totalUnfertilizedBeans(overrides?: CallOverrides): Promise<BigNumber>;

    harvest(
      plots: BigNumberish[],
      mode: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    harvestableIndex(overrides?: CallOverrides): Promise<BigNumber>;

    plot(
      account: string,
      plotId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    podIndex(overrides?: CallOverrides): Promise<BigNumber>;

    sow(
      amount: BigNumberish,
      mode: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sowWithMin(
      amount: BigNumberish,
      minAmount: BigNumberish,
      mode: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    totalHarvestable(overrides?: CallOverrides): Promise<BigNumber>;

    totalHarvested(overrides?: CallOverrides): Promise<BigNumber>;

    totalPods(overrides?: CallOverrides): Promise<BigNumber>;

    totalSoil(overrides?: CallOverrides): Promise<BigNumber>;

    totalUnharvestable(overrides?: CallOverrides): Promise<BigNumber>;

    createFundraiser(
      payee: string,
      token: string,
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    fund(
      id: BigNumberish,
      amount: BigNumberish,
      mode: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    fundingToken(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fundraiser(id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    numberOfFundraisers(overrides?: CallOverrides): Promise<BigNumber>;

    remainingFunding(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalFunding(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    allowancePods(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approvePods(
      spender: string,
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cancelPodListing(
      index: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cancelPodOrder(
      pricePerPod: BigNumberish,
      maxPlaceInLine: BigNumberish,
      mode: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createPodListing(
      index: BigNumberish,
      start: BigNumberish,
      amount: BigNumberish,
      pricePerPod: BigNumberish,
      maxHarvestableIndex: BigNumberish,
      mode: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createPodOrder(
      beanAmount: BigNumberish,
      pricePerPod: BigNumberish,
      maxPlaceInLine: BigNumberish,
      mode: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    fillPodListing(
      l: Listing.PodListingStruct,
      beanAmount: BigNumberish,
      mode: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    fillPodOrder(
      o: Order.PodOrderStruct,
      index: BigNumberish,
      start: BigNumberish,
      amount: BigNumberish,
      mode: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    podListing(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    podOrder(
      account: string,
      pricePerPod: BigNumberish,
      maxPlaceInLine: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    podOrderById(id: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    transferPlot(
      sender: string,
      recipient: string,
      id: BigNumberish,
      start: BigNumberish,
      end: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      _newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    pause(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unpause(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    plentyPerRoot(
      season: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolDeltaB(pool: string, overrides?: CallOverrides): Promise<BigNumber>;

    rain(overrides?: CallOverrides): Promise<BigNumber>;

    season(overrides?: CallOverrides): Promise<BigNumber>;

    seasonTime(overrides?: CallOverrides): Promise<BigNumber>;

    sunrise(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    time(overrides?: CallOverrides): Promise<BigNumber>;

    totalDeltaB(overrides?: CallOverrides): Promise<BigNumber>;

    weather(overrides?: CallOverrides): Promise<BigNumber>;

    yield(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOfEarnedBeans(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfEarnedSeeds(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfEarnedStalk(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfGrownStalk(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfPlenty(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfRainRoots(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfRoots(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfSeeds(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfSop(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfStalk(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimPlenty(
      account: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimWithdrawal(
      token: string,
      season: BigNumberish,
      mode: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimWithdrawals(
      token: string,
      seasons: BigNumberish[],
      mode: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deposit(
      token: string,
      amount: BigNumberish,
      mode: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    earn(
      account: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getDeposit(
      account: string,
      token: string,
      season: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalDeposited(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalWithdrawn(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getWithdrawal(
      account: string,
      token: string,
      season: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lastSeasonOfPlenty(overrides?: CallOverrides): Promise<BigNumber>;

    lastUpdate(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    tokenSettings(token: string, overrides?: CallOverrides): Promise<BigNumber>;

    totalEarnedBeans(overrides?: CallOverrides): Promise<BigNumber>;

    totalRoots(overrides?: CallOverrides): Promise<BigNumber>;

    totalSeeds(overrides?: CallOverrides): Promise<BigNumber>;

    totalStalk(overrides?: CallOverrides): Promise<BigNumber>;

    transferDeposit(
      recipient: string,
      token: string,
      season: BigNumberish,
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferDeposits(
      recipient: string,
      token: string,
      seasons: BigNumberish[],
      amounts: BigNumberish[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    update(
      account: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateUnripeDeposit(
      token: string,
      _season: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateUnripeDeposits(
      token: string,
      seasons: BigNumberish[],
      amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawDeposit(
      token: string,
      season: BigNumberish,
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawDeposits(
      token: string,
      seasons: BigNumberish[],
      amounts: BigNumberish[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawFreeze(overrides?: CallOverrides): Promise<BigNumber>;

    getAllBalance(
      account: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAllBalances(
      account: string,
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBalance(
      account: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBalances(
      account: string,
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getExternalBalance(
      account: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getExternalBalances(
      account: string,
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getInternalBalance(
      account: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getInternalBalances(
      account: string,
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferToken(
      token: string,
      recipient: string,
      amount: BigNumberish,
      fromMode: BigNumberish,
      toMode: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unwrapEth(
      amount: BigNumberish,
      mode: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    wrapEth(
      amount: BigNumberish,
      mode: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addUnripeToken(
      unripeToken: string,
      underlyingToken: string,
      root: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balanceOfPenalizedUnderlying(
      unripeToken: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfUnderlying(
      unripeToken: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimUnripe(
      token: string,
      amount: BigNumberish,
      proof: BytesLike[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getPenalizedUnderlying(
      unripeToken: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPenalty(
      unripeToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPercentPenalty(
      unripeToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRecapFundedPercent(
      unripeToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRecapPaidPercent(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalUnderlying(
      unripeToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUnderlying(
      unripeToken: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUnderlyingPerUnripeToken(
      unripeToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isUnripe(
      unripeToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ripen(
      unripeToken: string,
      amount: BigNumberish,
      mode: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    dewhitelistToken(
      token: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    whitelistToken(
      token: string,
      selector: BytesLike,
      stalk: BigNumberish,
      seeds: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    bdv(
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    beanToBDV(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    curveToBDV(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unripeBeanToBDV(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unripeLPToBDV(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    convert(
      convertData: BytesLike,
      crates: BigNumberish[],
      amounts: BigNumberish[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getAmountOut(
      tokenIn: string,
      tokenOut: string,
      amountIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMaxAmountIn(
      tokenIn: string,
      tokenOut: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addLiquidity(
      pool: string,
      registry: string,
      amounts: BigNumberish[],
      minAmountOut: BigNumberish,
      fromMode: BigNumberish,
      toMode: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    exchange(
      pool: string,
      registry: string,
      fromToken: string,
      toToken: string,
      amountIn: BigNumberish,
      minAmountOut: BigNumberish,
      fromMode: BigNumberish,
      toMode: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    exchangeUnderlying(
      pool: string,
      fromToken: string,
      toToken: string,
      amountIn: BigNumberish,
      minAmountOut: BigNumberish,
      fromMode: BigNumberish,
      toMode: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeLiquidity(
      pool: string,
      registry: string,
      amountIn: BigNumberish,
      minAmountsOut: BigNumberish[],
      fromMode: BigNumberish,
      toMode: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeLiquidityImbalance(
      pool: string,
      registry: string,
      amountsOut: BigNumberish[],
      maxAmountIn: BigNumberish,
      fromMode: BigNumberish,
      toMode: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeLiquidityOneToken(
      pool: string,
      registry: string,
      toToken: string,
      amountIn: BigNumberish,
      minAmountOut: BigNumberish,
      fromMode: BigNumberish,
      toMode: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    diamondCut(
      _diamondCut: IDiamondCut.FacetCutStruct[],
      _init: string,
      _calldata: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    facetAddress(
      _functionSelector: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    facetAddresses(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    facetFunctionSelectors(
      _facet: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    facets(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    supportsInterface(
      _interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    farm(
      data: BytesLike[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addFertilizerOwner(
      id: BigNumberish,
      amount: BigNumberish,
      minLP: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balanceOfBatchFertilizer(
      accounts: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOfFertilized(
      account: string,
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOfFertilizer(
      account: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOfUnfertilized(
      account: string,
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    beansPerFertilizer(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimFertilized(
      ids: BigNumberish[],
      mode: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getActiveFertilizer(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEndBpf(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getFertilizer(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFirst(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getHumidity(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLast(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getNext(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isFertilizing(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mintFertilizer(
      amount: BigNumberish,
      minLP: BigNumberish,
      mode: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    payFertilizer(
      account: string,
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    remainingRecapitalization(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalFertilizedBeans(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalFertilizerBeans(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalUnfertilizedBeans(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    harvest(
      plots: BigNumberish[],
      mode: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    harvestableIndex(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    plot(
      account: string,
      plotId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    podIndex(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sow(
      amount: BigNumberish,
      mode: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sowWithMin(
      amount: BigNumberish,
      minAmount: BigNumberish,
      mode: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    totalHarvestable(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalHarvested(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalPods(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSoil(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalUnharvestable(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createFundraiser(
      payee: string,
      token: string,
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    fund(
      id: BigNumberish,
      amount: BigNumberish,
      mode: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    fundingToken(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fundraiser(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    numberOfFundraisers(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    remainingFunding(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalFunding(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allowancePods(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approvePods(
      spender: string,
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cancelPodListing(
      index: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cancelPodOrder(
      pricePerPod: BigNumberish,
      maxPlaceInLine: BigNumberish,
      mode: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createPodListing(
      index: BigNumberish,
      start: BigNumberish,
      amount: BigNumberish,
      pricePerPod: BigNumberish,
      maxHarvestableIndex: BigNumberish,
      mode: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createPodOrder(
      beanAmount: BigNumberish,
      pricePerPod: BigNumberish,
      maxPlaceInLine: BigNumberish,
      mode: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    fillPodListing(
      l: Listing.PodListingStruct,
      beanAmount: BigNumberish,
      mode: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    fillPodOrder(
      o: Order.PodOrderStruct,
      index: BigNumberish,
      start: BigNumberish,
      amount: BigNumberish,
      mode: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    podListing(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    podOrder(
      account: string,
      pricePerPod: BigNumberish,
      maxPlaceInLine: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    podOrderById(
      id: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferPlot(
      sender: string,
      recipient: string,
      id: BigNumberish,
      start: BigNumberish,
      end: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      _newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    pause(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    plentyPerRoot(
      season: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    poolDeltaB(
      pool: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rain(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    season(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    seasonTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sunrise(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    time(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalDeltaB(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    weather(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    yield(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    balanceOfEarnedBeans(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOfEarnedSeeds(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOfEarnedStalk(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOfGrownStalk(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOfPlenty(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOfRainRoots(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOfRoots(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOfSeeds(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOfSop(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOfStalk(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimPlenty(
      account: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimWithdrawal(
      token: string,
      season: BigNumberish,
      mode: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimWithdrawals(
      token: string,
      seasons: BigNumberish[],
      mode: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deposit(
      token: string,
      amount: BigNumberish,
      mode: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    earn(
      account: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getDeposit(
      account: string,
      token: string,
      season: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalDeposited(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalWithdrawn(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getWithdrawal(
      account: string,
      token: string,
      season: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastSeasonOfPlenty(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastUpdate(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenSettings(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalEarnedBeans(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalRoots(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSeeds(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalStalk(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferDeposit(
      recipient: string,
      token: string,
      season: BigNumberish,
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferDeposits(
      recipient: string,
      token: string,
      seasons: BigNumberish[],
      amounts: BigNumberish[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    update(
      account: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateUnripeDeposit(
      token: string,
      _season: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateUnripeDeposits(
      token: string,
      seasons: BigNumberish[],
      amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawDeposit(
      token: string,
      season: BigNumberish,
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawDeposits(
      token: string,
      seasons: BigNumberish[],
      amounts: BigNumberish[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawFreeze(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAllBalance(
      account: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAllBalances(
      account: string,
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBalance(
      account: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBalances(
      account: string,
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getExternalBalance(
      account: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getExternalBalances(
      account: string,
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getInternalBalance(
      account: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getInternalBalances(
      account: string,
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferToken(
      token: string,
      recipient: string,
      amount: BigNumberish,
      fromMode: BigNumberish,
      toMode: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unwrapEth(
      amount: BigNumberish,
      mode: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    wrapEth(
      amount: BigNumberish,
      mode: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addUnripeToken(
      unripeToken: string,
      underlyingToken: string,
      root: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balanceOfPenalizedUnderlying(
      unripeToken: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOfUnderlying(
      unripeToken: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimUnripe(
      token: string,
      amount: BigNumberish,
      proof: BytesLike[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getPenalizedUnderlying(
      unripeToken: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPenalty(
      unripeToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPercentPenalty(
      unripeToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRecapFundedPercent(
      unripeToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRecapPaidPercent(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalUnderlying(
      unripeToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUnderlying(
      unripeToken: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUnderlyingPerUnripeToken(
      unripeToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isUnripe(
      unripeToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ripen(
      unripeToken: string,
      amount: BigNumberish,
      mode: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    dewhitelistToken(
      token: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    whitelistToken(
      token: string,
      selector: BytesLike,
      stalk: BigNumberish,
      seeds: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
